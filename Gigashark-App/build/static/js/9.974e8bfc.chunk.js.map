{"version":3,"sources":["../node_modules/bs58/index.js","../../src/Layout.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../../src/structs/coercions.ts","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/layout.ts","../../src/util/bigint.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/sysvar.ts","../../src/transaction-constants.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/transaction.ts","../../src/util/assert.ts","../../src/system-program.ts","../../src/address-lookup-table-program.ts","../../src/bpf-loader-deprecated.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/util/url-impl.ts","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/util/makeWebsocketUrl.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../node_modules/base-x/src/index.js","../node_modules/borsh/lib/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/bigint-buffer/dist/browser.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/@solana/web3.js/node_modules/secp256k1/elliptic.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/index.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/elliptic.js","../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js","../../src/messages.ts","../../src/interfaces.ts","../../src/config.ts","../../src/loglevel.ts","../../src/baseProvider.ts","../../src/embedUtils.ts","../../src/PopupHandler.ts","../../src/communicationProvider.ts","../../src/inPageProvider.ts","../../src/siteMetadata.ts","../../src/embed.ts","../../src/solanaWalletAdapter.ts"],"names":["basex","require","module","exports","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","makeDestinationObject","defineProperty","value","encode","writable","decode","ExternalLayout","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","_objectWithoutProperties","source","excluded","key","target","sourceKeys","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","toFailures","run","StructError","failure","failures","cached","message","rest","path","msg","join","isObject","x","print","JSON","stringify","shiftIterator","input","next","done","toFailure","result","context","struct","branch","type","refinement","Symbol","iterator","r","options","coerce","mask","ctx","coercer","schema","valid","validator","entries","k","s","ts","t","Map","set","Set","add","refiner","Struct","props","this","assert","is","validate","tuples","tuple","error","f","define","array","Element","boolean","instance","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","string","Elements","Never","max","Structs","map","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","unknown","condition","toBuffer","Buffer","isBuffer","byteLength","minimalisticAssert","val","equal","l","inherits_browserModule","ctor","superCtor","super_","enumerable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","charCodeAt","htonl","w","zero2","zero8","utils","enc","res","replace","parseInt","p","c","endian","end","len","m","a","d","buf","pos","ah","al","bh","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","rotr32","ch32","y","z","maj32","p32","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","Hash","inner","outer","_init","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","fromCharCode","_checkNormalize","HEX","Logger","version","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","hex","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","UNSUPPORTED_OPERATION","operation","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","kind","censorship","permanent","globalLogger","warn","logger","addSlice","arguments","arrayify","checkSafeUint53","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","isBytes","data","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","fromPublicKey","seed","programId","seeds","publicKeyBytes","is_on_curve","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","BufferLayout","rustString","rsl","_decode","_encode","rslShim","str","chars","getAlloc","getItemAlloc","item","field","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","encodeData","allocLength","layoutFields","instruction","index","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","PACKET_DATA_SIZE","decodeLength","size","elem","encodeLength","rem_len","TransactionStatus","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","nonProgramIds","filter","_","numKeys","keyCount","shortvec","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","signature","nonceInstruction","signers","items","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","compiledInstructions","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","sign","uniqueSigners","signer","_partialSign","partialSign","detached","secretKey","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","authority","recentSlot","lookupTableAddress","bumpSeed","payer","lookupTable","addresses","addr","recipient","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","confirmTransaction","status","sleep","ms","Promise","resolve","setTimeout","Loader","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","all","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","URL","globalThis","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","fetch","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","process","Connection","endpoint","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","protocol","confirmTransactionInitialTimeout","useHttps","host","port","makeWebsocketUrl","customFetch","fetchWithMiddleware","fetchImpl","init","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","response","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","confirmationPromise","subscriptionId","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","timeoutId","TIMED_OUT","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","outcome","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","extra","block","endSlot","transactionDetails","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","logTrace","traceIndent","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","keyPair","fromSecretKey","skipValidation","TextEncoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","privateKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","publicKeyCreate","secp256k1","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","sha3","keccak_256","recoveryId","Secp256k1Program","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","_Buffer","ALPHABET","BASE_MAP","charAt","xc","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","__createBinding","o","k2","get","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","subarray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","inRange","min","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","codePointsToString","opt_string","u","stringToCodePoints","reversed","reverse","toBigIntBE","width","padStart","toBufferBE","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","_super","_ref","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","WebSocketBrowserImpl","_EventEmitter","protocols","_this","socket","window","WebSocket","onopen","emit","onmessage","event","onerror","onclose","optionsOrCallback","send","listener","addEventListener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","parse","listeners","_ref2","uuid","v4","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","isError","cond","isUint8Array","numbers","isCompressed","toTypeString","getAssertedOutput","output","contextRandomize","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyVerify","compressed","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","noncefn","ecdsaVerify","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","loadPublicKey","first","cmp","toRed","red","redSqr","redIMul","redIAdd","redSqrt","isOdd","redNeg","pub","loadCompressedPublicKey","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pairs","isInfinity","mul","nh","sigR","sigS","lenR","posR","lenS","posS","_noncefn","counter","canonical","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","getX","getY","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","getAccounts","createAsyncMiddleware","requestAccounts","targetMethod","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","BaseInjectedProvider","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","BaseProvider","getBaseProviderHandlers","ethErrors","methodNotSupported","_req$params","_req$params2","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","txMessage","invalidRequest","custom","conn","allTxns","unsignedTx","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","getSolletHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","configure","_objectSpread","setupProvider","privKey","keyPairGenerator","signedMsg","_providerEngineProxy","txns","_req$params6","tx","SolanaPrivateKeyProvider","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","switchChain","_ref3","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","updateAccount","_ref4","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","signedTransaction","signedTransactions","RegExp","flags","isStream","pipe","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform","disconnected","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","prodTorusUrl","localStorageKey","location","hostname","loglevel","getLogger","getWindowId","random","getTorusUrl","buildEnv","torusUrl","FEATURES_PROVIDER_CHANGE_WINDOW","height","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","top","connectionStream","jsonRpcStreamName","isDuplexStream","messages","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_initializeState","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","createStream","rpcEngine","createIdRemapMiddleware","createLoggerMiddleware","origin","middleware","_rpcEngine","jsonRpcConnectionEvents","events","getRpcPromiseCallback","payload","streamName","remoteLabel","emitter","warningMsg","stack","listenerCount","logStreamDisconnectWarning","SafeEventEmitter","handleEvent","handle","eventName","handlerArgs","handlerWrapper","removeEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","features","windowTimer","iClosedWindow","_setupTimer","closed","open","href","focus","redirect","locationReplaceOnRedirect","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","configuration","userLanguage","navigator","language","userLanguages","getUserLanguage","embedTranslations","windowRefs","isConnected","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","initialized","_handleWindow","finalUrl","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","display","right","bottom","torusWidgetVisibility","buttonPosition","hideTorusButton","showTorusButton","_payload","tryWindowHandle","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","PROVIDER_JRPC_METHODS","isUnlocked","isInternal","isEthAccounts","finalAccounts","dequal","imgExists","img","onload","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","querySelectorAll","find","_icon","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","storage","setItem","removeItem","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","apiKey","extraParams","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","dappMetadata","contentWindow","postMessage","_setupWeb3","torus","loginProvider","login_hint","loginParams","userInfo","success","LOGOUT","logout","clearInit","isElement","element","Document","contains","WALLET_INSTANCE_ID","instanceId","finalPath","searchParams","USER_INFO","userInfoResponse","TOPUP","topupResponse","messageOnly","encodedMessage","responses","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","detectAccountRequestPrototypeModifier","login","proxiedInPageProvider","deleteProperty","proxiedCommunicationProvider","SolanaWalletAdapter","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","loginSettings","CONNECTED","solanaProvider","blockExplorerUrl","logo","torusInstance","READY","ADAPTER_EVENTS","autoConnect","rehydrated","ERRORED","notReady","CONNECTING","adapter","torusInpageProvider","Web3AuthError","setProvider","reconnected","WalletLoginError","connectionError","cleanup","notConnectedError","DISCONNECTED","getUserInfo","setAdapterSettings","BaseAdapter"],"mappings":"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","file":"static/js/9.974e8bfc.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n",null,"import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport * as bigintLayout from './util/bigint';\nimport {SystemProgram} from './system-program';\nimport {TransactionInstruction} from './transaction';\nimport {decodeData, encodeData, IInstructionInputData} from './instruction';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const URL = globalThis.URL;\nexport const URLSearchParams = globalThis.URLSearchParams;\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {URL} from './util/url-impl';\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {URL} from './url-impl';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n",null,null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":""}