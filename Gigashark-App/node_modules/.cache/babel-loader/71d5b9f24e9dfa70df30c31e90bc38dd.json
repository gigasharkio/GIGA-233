{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _slicedToArray = require(\"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar ethereumjs_abi_1 = require(\"ethereumjs-abi\");\n\nvar utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\n\n\nvar SignTypedDataVersion;\n\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\n\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\n\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(\"Invalid version: '\".concat(version, \"'\"));\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\"SignTypedDataVersion not allowed: '\".concat(version, \"'. Allowed versions are: \").concat(allowedVersions.join(', ')));\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\n\n\nfunction encodeField(types, name, type, value, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return ['bytes32', version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethereumjs_util_1.keccak(encodeData(type, value, types, version))];\n  }\n\n  if (value === undefined) {\n    throw new Error(\"missing value for field \".concat(name, \" of type \").concat(type));\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n\n    var parsedType = type.slice(0, type.lastIndexOf('['));\n    var typeValuePairs = value.map(function (item) {\n      return encodeField(types, name, parsedType, item, version);\n    });\n    return ['bytes32', ethereumjs_util_1.keccak(ethereumjs_abi_1.rawEncode(typeValuePairs.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          t = _ref2[0];\n\n      return t;\n    }), typeValuePairs.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          v = _ref4[1];\n\n      return v;\n    })))];\n  }\n\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\n\n\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  var encodedTypes = ['bytes32'];\n  var encodedValues = [hashType(primaryType, types)];\n\n  var _iterator = _createForOfIteratorHelper(types[primaryType]),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var field = _step.value;\n\n      if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n        continue;\n      }\n\n      var _encodeField = encodeField(types, field.name, field.type, data[field.name], version),\n          _encodeField2 = _slicedToArray(_encodeField, 2),\n          type = _encodeField2[0],\n          value = _encodeField2[1];\n\n      encodedTypes.push(type);\n      encodedValues.push(value);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return ethereumjs_abi_1.rawEncode(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\n\n\nfunction encodeType(primaryType, types) {\n  var result = '';\n  var unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  var deps = [primaryType].concat(_toConsumableArray(Array.from(unsortedDeps).sort()));\n\n  var _iterator2 = _createForOfIteratorHelper(deps),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var type = _step2.value;\n      var children = types[type];\n\n      if (!children) {\n        throw new Error(\"No type definition specified: \".concat(type));\n      }\n\n      result += \"\".concat(type, \"(\").concat(types[type].map(function (_ref5) {\n        var name = _ref5.name,\n            t = _ref5.type;\n        return \"\".concat(t, \" \").concat(name);\n      }).join(','), \")\");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\n\n\nfunction findTypeDependencies(primaryType, types) {\n  var results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n\n  var _primaryType$match = primaryType.match(/^[0-9A-Z_a-z]*/);\n\n  var _primaryType$match2 = _slicedToArray(_primaryType$match, 1);\n\n  primaryType = _primaryType$match2[0];\n\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  var _iterator3 = _createForOfIteratorHelper(types[primaryType]),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var field = _step3.value;\n      findTypeDependencies(field.type, types, results);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\n\n\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  return ethereumjs_util_1.keccak(encodeData(primaryType, data, types, version));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\n\n\nfunction hashType(primaryType, types) {\n  return ethereumjs_util_1.keccak(encodeType(primaryType, types));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\n\n\nfunction sanitizeData(data) {\n  var sanitizedData = {};\n\n  for (var key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n\n  if ('types' in sanitizedData) {\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n\n  return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\n\n\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  var sanitizedData = sanitizeData(typedData);\n  var parts = [Buffer.from('1901', 'hex')];\n  parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct( // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n\n  return ethereumjs_util_1.keccak(Buffer.concat(parts));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\n\n\nexports.TypedDataUtils = {\n  encodeData: encodeData,\n  encodeType: encodeType,\n  findTypeDependencies: findTypeDependencies,\n  hashStruct: hashStruct,\n  hashType: hashType,\n  sanitizeData: sanitizeData,\n  eip712Hash: eip712Hash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\n\nfunction typedSignatureHash(typedData) {\n  var hashBuffer = _typedSignatureHash(typedData);\n\n  return ethereumjs_util_1.bufferToHex(hashBuffer);\n}\n\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\n\nfunction _typedSignatureHash(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n\n  var data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return utils_1.legacyToBuffer(e.value);\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n\n    return \"\".concat(e.type, \" \").concat(e.name);\n  });\n  return ethereumjs_abi_1.soliditySHA3(['bytes32', 'bytes32'], [ethereumjs_abi_1.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethereumjs_abi_1.soliditySHA3(types, data)]);\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\n\n\nfunction signTypedData(_ref6) {\n  var privateKey = _ref6.privateKey,\n      data = _ref6.data,\n      version = _ref6.version;\n  validateVersion(version);\n\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  var messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  var sig = ethereumjs_util_1.ecsign(messageHash, privateKey);\n  return utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n}\n\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\n\nfunction recoverTypedSignature(_ref7) {\n  var data = _ref7.data,\n      signature = _ref7.signature,\n      version = _ref7.version;\n  validateVersion(version);\n\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  var messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  var publicKey = utils_1.recoverPublicKey(messageHash, signature);\n  var sender = ethereumjs_util_1.publicToAddress(publicKey);\n  return ethereumjs_util_1.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature = recoverTypedSignature;","map":{"version":3,"mappings":"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","names":["SignTypedDataVersion","exports","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","validateVersion","version","allowedVersions","Object","keys","includes","Error","join","encodeField","value","V3","V4","undefined","ethereumjs_util_1","encodeData","Buffer","from","lastIndexOf","length","parsedType","slice","typeValuePairs","map","item","ethereumjs_abi_1","t","v","data","encodedTypes","encodedValues","hashType","field","push","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","Array","sort","children","results","Set","match","has","add","hashStruct","sanitizeData","sanitizedData","key","EIP712Domain","eip712Hash","typedData","parts","concat","typedSignatureHash","hashBuffer","_typedSignatureHash","error","e","utils_1","schema","fill","signTypedData","privateKey","messageHash","V1","sig","r","s","recoverTypedSignature","signature","publicKey","sender"],"sourceRoot":"","sources":["../src/sign-typed-data.ts"],"sourcesContent":["import {\n  bufferToHex,\n  ecsign,\n  keccak,\n  publicToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\nimport { rawEncode, soliditySHA3 } from 'ethereumjs-abi';\n\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport interface TypedDataV1Field {\n  name: string;\n  type: string;\n  value: any;\n}\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport interface MessageTypeProperty {\n  name: string;\n  type: string;\n}\n\nexport interface MessageTypes {\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n}\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport interface TypedMessage<T extends MessageTypes> {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n}\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string' },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: any] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : keccak(encodeData(type, value, types, version)),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      keccak(\n        rawEncode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: unknown[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  return keccak(encodeData(primaryType, data, types, version));\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  return keccak(encodeType(primaryType, types));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n\n  if ('types' in sanitizedData) {\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types };\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(\n    hashStruct(\n      'EIP712Domain',\n      sanitizedData.domain,\n      sanitizedData.types,\n      version,\n    ),\n  );\n\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return keccak(Buffer.concat(parts));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      soliditySHA3(types, data),\n    ],\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n"]},"metadata":{},"sourceType":"script"}