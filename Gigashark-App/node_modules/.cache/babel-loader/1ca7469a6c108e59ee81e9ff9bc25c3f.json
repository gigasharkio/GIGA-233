{"ast":null,"code":"import _objectWithoutProperties from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _wrapNativeSuper from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _createForOfIteratorHelper from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _inherits from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/root/gshark/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"commitment\"],\n    _excluded2 = [\"encoding\"],\n    _excluded3 = [\"commitment\"],\n    _excluded4 = [\"commitment\"];\nimport nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function TempCtor() {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) {\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n      }\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) {\n      res[i] = msg[i] | 0;\n    }\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    res += zero2(msg[i].toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) {\n      this._update(msg, i, i + this._delta32);\n    }\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) {\n    res[i] = 0;\n  } // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) {\n      res[i++] = 0;\n    }\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) {\n      res[i++] = 0;\n    }\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i++) {\n    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  }\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i++) {\n    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  }\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) {\n    key.push(0);\n  }\n\n  for (i = 0; i < key.length; i++) {\n    key[i] ^= 0x36;\n  }\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) {\n    key[i] ^= 0x6a;\n  }\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nvar version$2 = \"logger/5.6.0\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nvar _logLevel = LogLevels[\"default\"];\nvar _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    var missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nvar _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nvar HEX = \"0123456789abcdef\";\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _createClass(Logger, [{\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      var level = logLevel.toLowerCase();\n\n      if (LogLevels[level] == null) {\n        this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n      }\n\n      if (_logLevel > LogLevels[level]) {\n        return;\n      }\n\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      // Errors are being censored\n      if (_censorErrors) {\n        return this.makeError(\"censored error\", code, {});\n      }\n\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n\n      if (!params) {\n        params = {};\n      }\n\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        var value = params[key];\n\n        try {\n          if (value instanceof Uint8Array) {\n            var hex = \"\";\n\n            for (var i = 0; i < value.length; i++) {\n              hex += HEX[value[i] >> 4];\n              hex += HEX[value[i] & 0x0f];\n            }\n\n            messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n          } else {\n            messageDetails.push(key + \"=\" + JSON.stringify(value));\n          }\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"code=\".concat(code));\n      messageDetails.push(\"version=\".concat(this.version));\n      var reason = message;\n      var url = \"\";\n\n      switch (code) {\n        case ErrorCode.NUMERIC_FAULT:\n          {\n            url = \"NUMERIC_FAULT\";\n            var fault = message;\n\n            switch (fault) {\n              case \"overflow\":\n              case \"underflow\":\n              case \"division-by-zero\":\n                url += \"-\" + fault;\n                break;\n\n              case \"negative-power\":\n              case \"negative-width\":\n                url += \"-unsupported\";\n                break;\n\n              case \"unbound-bitwise-result\":\n                url += \"-unbound-result\";\n                break;\n            }\n\n            break;\n          }\n\n        case ErrorCode.CALL_EXCEPTION:\n        case ErrorCode.INSUFFICIENT_FUNDS:\n        case ErrorCode.MISSING_NEW:\n        case ErrorCode.NONCE_EXPIRED:\n        case ErrorCode.REPLACEMENT_UNDERPRICED:\n        case ErrorCode.TRANSACTION_REPLACED:\n        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n          url = code;\n          break;\n      }\n\n      if (url) {\n        message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n      }\n\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      } // @TODO: Any??\n\n\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(condition, message, code, params) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwError(message, code, params);\n    }\n  }, {\n    key: \"assertArgument\",\n    value: function assertArgument(condition, message, name, value) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwArgumentError(message, name, value);\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n\n      if (message == null) {\n        message = \"value not safe\";\n      }\n\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version$2);\n      }\n\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (!censorship && permanent) {\n        this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel.toLowerCase()];\n\n      if (level == null) {\n        Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n\n      _logLevel = level;\n    }\n  }, {\n    key: \"from\",\n    value: function from(version) {\n      return new Logger(version);\n    }\n  }]);\n\n  return Logger;\n}();\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nvar version$1 = \"bytes/5.6.0\";\nvar logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    var args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < value.length; i++) {\n    var v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    var result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    var hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    var _result = [];\n\n    for (var i = 0; i < hex.length; i += 2) {\n      _result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(_result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nvar version = \"sha2/5.6.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n\n    Object.assign(this, properties);\n  }\n\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n\n  return Struct;\n}(); // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n\n  var _super = _createSuper(Enum);\n\n  function Enum(properties) {\n    var _this;\n\n    _classCallCheck(this, Enum);\n\n    _this = _super.call(this, properties);\n    _this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(function (key) {\n      _this.enum = key;\n    });\n    return _this;\n  }\n\n  return _createClass(Enum);\n}(Struct);\n\nvar SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nvar MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nvar PublicKey = /*#__PURE__*/function (_Struct2) {\n  _inherits(PublicKey, _Struct2);\n\n  var _super2 = _createSuper(PublicKey);\n\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this2;\n\n    _classCallCheck(this, PublicKey);\n\n    _this2 = _super2.call(this, {});\n    _this2._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      _this2._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(\"Invalid public key input\");\n        }\n\n        _this2._bn = new BN(decoded);\n      } else {\n        _this2._bn = new BN(value);\n      }\n\n      if (_this2._bn.byteLength() > 32) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n\n    return _this2;\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value: function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toBase58();\n    }\n    /**\n     * Return the byte array representation of the public key\n     */\n\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      return this.toBuffer();\n    }\n    /**\n     * Return the Buffer representation of the public key\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n\n      if (b.length === 32) {\n        return b;\n      }\n\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n\n    /* eslint-disable require-await */\n\n  }], [{\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, hash;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n                hash = sha256(new Uint8Array(buffer)).slice(2);\n                return _context.abrupt(\"return\", new PublicKey(Buffer.from(hash, 'hex')));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n\n    /* eslint-disable require-await */\n\n  }, {\n    key: \"createProgramAddressSync\",\n    value: function createProgramAddressSync(seeds, programId) {\n      var buffer = Buffer.alloc(0);\n      seeds.forEach(function (seed) {\n        if (seed.length > MAX_SEED_LENGTH) {\n          throw new TypeError(\"Max seed length exceeded\");\n        }\n\n        buffer = Buffer.concat([buffer, toBuffer(seed)]);\n      });\n      buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n      var hash = sha256(new Uint8Array(buffer)).slice(2);\n      var publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n      if (is_on_curve(publicKeyBytes)) {\n        throw new Error(\"Invalid seeds, address must fall off the curve\");\n      }\n\n      return new PublicKey(publicKeyBytes);\n    }\n    /**\n     * Async version of createProgramAddressSync\n     * For backwards compatibility\n     */\n\n    /* eslint-disable require-await */\n\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seeds, programId) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.createProgramAddressSync(seeds, programId));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n\n  }, {\n    key: \"findProgramAddressSync\",\n    value: function findProgramAddressSync(seeds, programId) {\n      var nonce = 255;\n      var address;\n\n      while (nonce != 0) {\n        try {\n          var seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n          address = this.createProgramAddressSync(seedsWithNonce, programId);\n        } catch (err) {\n          if (err instanceof TypeError) {\n            throw err;\n          }\n\n          nonce--;\n          continue;\n        }\n\n        return [address, nonce];\n      }\n\n      throw new Error(\"Unable to find a viable program address nonce\");\n    }\n    /**\n     * Async version of findProgramAddressSync\n     * For backwards compatibility\n     */\n\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(seeds, programId) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.findProgramAddressSync(seeds, programId));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve(pubkeyData) {\n      var pubkey = new PublicKey(pubkeyData);\n      return is_on_curve(pubkey.toBytes()) == 1;\n    }\n  }]);\n\n  return PublicKey;\n}(Struct);\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nvar naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nvar gf1 = naclLowLevel.gf([1]);\nvar I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The **unencrypted** secret key for this account\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return toBuffer(this._keypair.secretKey);\n    }\n  }]);\n\n  return Account;\n}();\n/**\n * Layout for a public key\n */\n\n\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  var _decode = rsl.decode.bind(rsl);\n\n  var _encode = rsl.encode.bind(rsl);\n\n  var rslShim = rsl;\n\n  rslShim.decode = function (b, offset) {\n    var data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = function (str, b, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nvar voteInit = function voteInit() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  var getItemAlloc = function getItemAlloc(item) {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      var field = fields[item.property];\n\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } // Couldn't determine allocated size of layout\n\n\n    return 0;\n  };\n\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nvar encodeDecode = function encodeDecode(layout) {\n  var decode = layout.decode.bind(layout);\n  var encode = layout.encode.bind(layout);\n  return {\n    decode: decode,\n    encode: encode\n  };\n};\n\nvar bigInt = function bigInt(length) {\n  return function (property) {\n    var layout = blob(length, property);\n\n    var _encodeDecode = encodeDecode(layout),\n        encode = _encodeDecode.encode,\n        decode = _encodeDecode.decode;\n\n    var bigIntLayout = layout;\n\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n};\n\nvar u64 = bigInt(8);\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  var data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n\n  return NonceAccount;\n}();\n\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nvar SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar SIGNATURE_LENGTH_IN_BYTES = 64;\n\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nvar PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    var _this3 = this;\n\n    _classCallCheck(this, Message);\n\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(function (ix) {\n      return _this3.indexToProgramIds.set(ix.programIdIndex, _this3.accountKeys[ix.programIdIndex]);\n    });\n  }\n\n  _createClass(Message, [{\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n    }\n  }, {\n    key: \"isProgramId\",\n    value: function isProgramId(index) {\n      return this.indexToProgramIds.has(index);\n    }\n  }, {\n    key: \"programIds\",\n    value: function programIds() {\n      return _toConsumableArray(this.indexToProgramIds.values());\n    }\n  }, {\n    key: \"nonProgramIds\",\n    value: function nonProgramIds() {\n      var _this4 = this;\n\n      return this.accountKeys.filter(function (_, index) {\n        return !_this4.isProgramId(index);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n            programIdIndex = instruction.programIdIndex;\n        var data = Array.from(bs58.decode(instruction.data));\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: accounts,\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n    /**\n     * Decode a compiled message into a Message object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var numRequiredSignatures = byteArray.shift();\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBKEY_LENGTH);\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        accountKeys.push(bs58.encode(Buffer.from(account)));\n      }\n\n      var recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n\n        var _accountCount = decodeLength(byteArray);\n\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n\n  return Message;\n}();\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nvar TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nvar DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nvar TransactionInstruction = /*#__PURE__*/function () {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  function TransactionInstruction(opts) {\n    _classCallCheck(this, TransactionInstruction);\n\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(TransactionInstruction, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys.map(function (_ref) {\n          var pubkey = _ref.pubkey,\n              isSigner = _ref.isSigner,\n              isWritable = _ref.isWritable;\n          return {\n            pubkey: pubkey.toJSON(),\n            isSigner: isSigner,\n            isWritable: isWritable\n          };\n        }),\n        programId: this.programId.toJSON(),\n        data: _toConsumableArray(this.data)\n      };\n    }\n  }]);\n\n  return TransactionInstruction;\n}();\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    }\n\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      var blockhash = opts.blockhash,\n          lastValidBlockHeight = opts.lastValidBlockHeight;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      var recentBlockhash = opts.recentBlockhash,\n          nonceInfo = opts.nonceInfo;\n\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n\n    /**\n     * The first (payer) Transaction signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        recentBlockhash: this.recentBlockhash || null,\n        feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n        nonceInfo: this.nonceInfo ? {\n          nonce: this.nonceInfo.nonce,\n          nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n        } : null,\n        instructions: this.instructions.map(function (instruction) {\n          return instruction.toJSON();\n        }),\n        signers: this.signatures.map(function (_ref2) {\n          var publicKey = _ref2.publicKey;\n          return publicKey.toJSON();\n        })\n      };\n    }\n    /**\n     * Add one or more instructions to this Transaction\n     */\n\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this5 = this;\n\n      for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        items[_key4] = arguments[_key4];\n      }\n\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this5.instructions = _this5.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this5.instructions.push(item);\n        } else {\n          _this5.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n    /**\n     * Compile transaction data\n     */\n\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n        return this._message;\n      }\n\n      var recentBlockhash;\n      var instructions;\n\n      if (this.nonceInfo) {\n        recentBlockhash = this.nonceInfo.nonce;\n\n        if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n          instructions = [this.nonceInfo.nonceInstruction].concat(_toConsumableArray(this.instructions));\n        } else {\n          instructions = this.instructions;\n        }\n      } else {\n        recentBlockhash = this.recentBlockhash;\n        instructions = this.instructions;\n      }\n\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n\n      if (instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n\n      var feePayer;\n\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n\n      for (var i = 0; i < instructions.length; i++) {\n        if (instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n\n      var programIds = [];\n      var accountMetas = [];\n      instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      }); // Append programID account metas\n\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      }); // Cull duplicate account metas\n\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n          uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      }); // Sort. Prioritizing first by signer, then by writable\n\n      uniqueMetas.sort(function (x, y) {\n        if (x.isSigner !== y.isSigner) {\n          // Signers always come before non-signers\n          return x.isSigner ? -1 : 1;\n        }\n\n        if (x.isWritable !== y.isWritable) {\n          // Writable accounts always come before read-only accounts\n          return x.isWritable ? -1 : 1;\n        } // Otherwise, sort by pubkey, stringwise.\n\n\n        return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      }); // Move fee payer to the front\n\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n            _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n            payerMeta = _uniqueMetas$splice2[0];\n\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      } // Disallow unknown signers\n\n\n      var _iterator = _createForOfIteratorHelper(this.signatures),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var signature = _step.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref3) {\n        var pubkey = _ref3.pubkey,\n            isSigner = _ref3.isSigner,\n            isWritable = _ref3.isWritable;\n\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var compiledInstructions = instructions.map(function (instruction) {\n        var data = instruction.data,\n            programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      compiledInstructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: compiledInstructions\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n    /**\n     * Get the estimated fee associated with a transaction\n     */\n\n  }, {\n    key: \"getEstimatedFee\",\n    value: function () {\n      var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return connection.getFeeForMessage(this.compileMessage());\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getEstimatedFee(_x8) {\n        return _getEstimatedFee.apply(this, arguments);\n      }\n\n      return getEstimatedFee;\n    }()\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        signers[_key5] = arguments[_key5];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        signers[_key6] = arguments[_key6];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i2 = 0, _signers = signers; _i2 < _signers.length; _i2++) {\n        var signer = _signers[_i2];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     */\n\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        signers[_key7] = arguments[_key7];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i3 = 0, _signers2 = signers; _i3 < _signers2.length; _i3++) {\n        var signer = _signers2[_i3];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this6 = this;\n\n      var signData = message.serialize();\n\n      for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        signers[_key8 - 1] = arguments[_key8];\n      }\n\n      signers.forEach(function (signer) {\n        var signature = nacl.sign.detached(signData, signer.secretKey);\n\n        _this6._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     */\n\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n\n\n      this._addSignature(pubkey, signature);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n    /**\n     * Verify signatures of a complete, signed Transaction\n     */\n\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures() {\n      return this._verifySignatures(this.serializeMessage(), true);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator2 = _createForOfIteratorHelper(this.signatures),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n              signature = _step2$value.signature,\n              _publicKey = _step2$value.publicKey;\n\n          if (signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!nacl.sign.detached.verify(signData, signature, _publicKey.toBuffer())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return true;\n    }\n    /**\n     * Serialize the Transaction in the wire format.\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n        requireAllSignatures: true,\n        verifySignatures: true\n      }, config),\n          requireAllSignatures = _Object$assign.requireAllSignatures,\n          verifySignatures = _Object$assign.verifySignatures;\n\n      var signData = this.serializeMessage();\n\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n\n      return this._serialize(signData);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref4, index) {\n        var signature = _ref4.signature;\n\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n    /**\n     * Parse a wire transaction into a Transaction object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n\n      for (var i = 0; i < signatureCount; i++) {\n        var signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n        signatures.push(bs58.encode(Buffer.from(signature)));\n      }\n\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n    /**\n     * Populate Transaction object from message and signatures\n     */\n\n  }, {\n    key: \"populate\",\n    value: function populate(message) {\n      var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }) || message.isAccountSigner(account),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      transaction._message = message;\n      transaction._json = transaction.toJSON();\n      return transaction;\n    }\n  }]);\n\n  return Transaction;\n}();\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i4 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i4 < _Object$entries.length; _i4++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),\n            ixType = _Object$entries$_i[0],\n            layout = _Object$entries$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n          lamports = _decodeData.lamports,\n          space = _decodeData.space,\n          programId = _decodeData.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData2 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n          lamports = _decodeData2.lamports;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData3 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n          lamports = _decodeData3.lamports,\n          seed = _decodeData3.seed,\n          programId = _decodeData3.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData4 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n          space = _decodeData4.space;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData5 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n          base = _decodeData5.base,\n          seed = _decodeData5.seed,\n          space = _decodeData5.space,\n          programId = _decodeData5.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData6 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n          programId = _decodeData6.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData7 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n          base = _decodeData7.base,\n          seed = _decodeData7.seed,\n          programId = _decodeData7.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData8 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n          base = _decodeData8.base,\n          seed = _decodeData8.seed,\n          lamports = _decodeData8.lamports,\n          space = _decodeData8.space,\n          programId = _decodeData8.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData9 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n          authorized = _decodeData9.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData10 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n          lamports = _decodeData10.lamports;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData11 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n          authorized = _decodeData11.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(_type, {\n          lamports: BigInt(params.lamports),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type2, {\n          lamports: BigInt(params.lamports)\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(_type3, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type4, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(_type5, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type6, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return SystemProgram;\n}();\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\n\nvar LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\nvar AddressLookupTableInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableInstruction() {\n    _classCallCheck(this, AddressLookupTableInstruction);\n  }\n\n  _createClass(AddressLookupTableInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var index = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i5 = 0, _Object$entries2 = Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS); _i5 < _Object$entries2.length; _i5++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i5], 2),\n            layoutType = _Object$entries2$_i[0],\n            layout = _Object$entries2$_i[1];\n\n        if (layout.index == index) {\n          type = layoutType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n      }\n\n      return type;\n    }\n  }, {\n    key: \"decodeCreateLookupTable\",\n    value: function decodeCreateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 4);\n\n      var _decodeData12 = decodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data),\n          recentSlot = _decodeData12.recentSlot;\n\n      return {\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys[2].pubkey,\n        recentSlot: Number(recentSlot)\n      };\n    }\n  }, {\n    key: \"decodeExtendLookupTable\",\n    value: function decodeExtendLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      if (instruction.keys.length < 2) {\n        throw new Error(\"invalid instruction; found \".concat(instruction.keys.length, \" keys, expected at least 2\"));\n      }\n\n      var _decodeData13 = decodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data),\n          addresses = _decodeData13.addresses;\n\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n        addresses: addresses.map(function (buffer) {\n          return new PublicKey(buffer);\n        })\n      };\n    }\n  }, {\n    key: \"decodeCloseLookupTable\",\n    value: function decodeCloseLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 3);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        recipient: instruction.keys[2].pubkey\n      };\n    }\n  }, {\n    key: \"decodeFreezeLookupTable\",\n    value: function decodeFreezeLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n  }, {\n    key: \"decodeDeactivateLookupTable\",\n    value: function decodeDeactivateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(AddressLookupTableProgram.programId)) {\n        throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeysLength\",\n    value: function checkKeysLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return AddressLookupTableInstruction;\n}();\n\nvar AddressLookupTableProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableProgram() {\n    _classCallCheck(this, AddressLookupTableProgram);\n  }\n\n  _createClass(AddressLookupTableProgram, null, [{\n    key: \"createLookupTable\",\n    value: function createLookupTable(params) {\n      var _PublicKey$findProgra = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId),\n          _PublicKey$findProgra2 = _slicedToArray(_PublicKey$findProgra, 2),\n          lookupTableAddress = _PublicKey$findProgra2[0],\n          bumpSeed = _PublicKey$findProgra2[1];\n\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n      var data = encodeData(type, {\n        recentSlot: BigInt(params.recentSlot),\n        bumpSeed: bumpSeed\n      });\n      var keys = [{\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }];\n      return [new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      }), lookupTableAddress];\n    }\n  }, {\n    key: \"freezeLookupTable\",\n    value: function freezeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"extendLookupTable\",\n    value: function extendLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n      var data = encodeData(type, {\n        addresses: params.addresses.map(function (addr) {\n          return addr.toBytes();\n        })\n      });\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (params.payer) {\n        keys.push({\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"deactivateLookupTable\",\n    value: function deactivateLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"closeLookupTable\",\n    value: function closeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }]);\n\n  return AddressLookupTableProgram;\n}();\n\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nfunction sendAndConfirmTransaction(_x9, _x10, _x11, _x12) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\n\n\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee94(connection, transaction, signers, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime().wrap(function _callee94$(_context94) {\n      while (1) {\n        switch (_context94.prev = _context94.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment,\n              maxRetries: options.maxRetries,\n              minContextSlot: options.minContextSlot\n            };\n            _context94.next = 3;\n            return connection.sendTransaction(transaction, signers, sendOptions);\n\n          case 3:\n            signature = _context94.sent;\n\n            if (!(transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null)) {\n              _context94.next = 10;\n              break;\n            }\n\n            _context94.next = 7;\n            return connection.confirmTransaction({\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight\n            }, options && options.commitment);\n\n          case 7:\n            _context94.t0 = _context94.sent.value;\n            _context94.next = 13;\n            break;\n\n          case 10:\n            _context94.next = 12;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 12:\n            _context94.t0 = _context94.sent.value;\n\n          case 13:\n            status = _context94.t0;\n\n            if (!status.err) {\n              _context94.next = 16;\n              break;\n            }\n\n            throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 16:\n            return _context94.abrupt(\"return\", signature);\n\n          case 17:\n          case \"end\":\n            return _context94.stop();\n        }\n      }\n    }, _callee94);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n} // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\n\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * ( // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return connection.getMinimumBalanceForRentExemption(data.length);\n\n              case 2:\n                balanceNeeded = _context5.sent;\n                _context5.next = 5;\n                return connection.getAccountInfo(program.publicKey, 'confirmed');\n\n              case 5:\n                programInfo = _context5.sent;\n                transaction = null;\n\n                if (!(programInfo !== null)) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                if (!programInfo.executable) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                console.error('Program load failed, account is already executable');\n                return _context5.abrupt(\"return\", false);\n\n              case 11:\n                if (programInfo.data.length !== data.length) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.allocate({\n                    accountPubkey: program.publicKey,\n                    space: data.length\n                  }));\n                }\n\n                if (!programInfo.owner.equals(programId)) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.assign({\n                    accountPubkey: program.publicKey,\n                    programId: programId\n                  }));\n                }\n\n                if (programInfo.lamports < balanceNeeded) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.transfer({\n                    fromPubkey: payer.publicKey,\n                    toPubkey: program.publicKey,\n                    lamports: balanceNeeded - programInfo.lamports\n                  }));\n                }\n\n                _context5.next = 17;\n                break;\n\n              case 16:\n                transaction = new Transaction().add(SystemProgram.createAccount({\n                  fromPubkey: payer.publicKey,\n                  newAccountPubkey: program.publicKey,\n                  lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                  space: data.length,\n                  programId: programId\n                }));\n\n              case 17:\n                if (!(transaction !== null)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                _context5.next = 20;\n                return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 20:\n                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n                chunkSize = Loader.chunkSize;\n                offset = 0;\n                array = data;\n                transactions = [];\n\n              case 25:\n                if (!(array.length > 0)) {\n                  _context5.next = 39;\n                  break;\n                }\n\n                bytes = array.slice(0, chunkSize);\n                _data = Buffer.alloc(chunkSize + 16);\n                dataLayout.encode({\n                  instruction: 0,\n                  // Load instruction\n                  offset: offset,\n                  bytes: bytes,\n                  bytesLength: 0,\n                  bytesLengthPadding: 0\n                }, _data);\n                _transaction = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }],\n                  programId: programId,\n                  data: _data\n                });\n                transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                  commitment: 'confirmed'\n                })); // Delay between sends in an attempt to reduce rate limit errors\n\n                if (!connection._rpcEndpoint.includes('solana.com')) {\n                  _context5.next = 35;\n                  break;\n                }\n\n                REQUESTS_PER_SECOND = 4;\n                _context5.next = 35;\n                return sleep(1000 / REQUESTS_PER_SECOND);\n\n              case 35:\n                offset += chunkSize;\n                array = array.slice(chunkSize);\n                _context5.next = 25;\n                break;\n\n              case 39:\n                _context5.next = 41;\n                return Promise.all(transactions);\n\n              case 41:\n                _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n                _data2 = Buffer.alloc(_dataLayout.span);\n\n                _dataLayout.encode({\n                  instruction: 1 // Finalize instruction\n\n                }, _data2);\n\n                _transaction2 = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }, {\n                    pubkey: SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false\n                  }],\n                  programId: programId,\n                  data: _data2\n                });\n                _context5.next = 47;\n                return sendAndConfirmTransaction(connection, _transaction2, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 47:\n                return _context5.abrupt(\"return\", true);\n\n              case 48:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function load(_x13, _x14, _x15, _x16, _x17) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Loader;\n}();\n\nLoader.chunkSize = CHUNK_SIZE;\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n    /**\n     * Load a BPF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the BPF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n\n  return BpfLoader;\n}();\n/**\n * Compute Budget Instruction class\n */\n\n\nvar ComputeBudgetInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetInstruction() {\n    _classCallCheck(this, ComputeBudgetInstruction);\n  }\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(ComputeBudgetInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u8('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i6 = 0, _Object$entries3 = Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS); _i6 < _Object$entries3.length; _i6++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i6], 2),\n            ixType = _Object$entries3$_i[0],\n            layout = _Object$entries3$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode request units compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeRequestUnits\",\n    value: function decodeRequestUnits(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData14 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data),\n          units = _decodeData14.units,\n          additionalFee = _decodeData14.additionalFee;\n\n      return {\n        units: units,\n        additionalFee: additionalFee\n      };\n    }\n    /**\n     * Decode request heap frame compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeRequestHeapFrame\",\n    value: function decodeRequestHeapFrame(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData15 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data),\n          bytes = _decodeData15.bytes;\n\n      return {\n        bytes: bytes\n      };\n    }\n    /**\n     * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSetComputeUnitLimit\",\n    value: function decodeSetComputeUnitLimit(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData16 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data),\n          units = _decodeData16.units;\n\n      return {\n        units: units\n      };\n    }\n    /**\n     * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSetComputeUnitPrice\",\n    value: function decodeSetComputeUnitPrice(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData17 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data),\n          microLamports = _decodeData17.microLamports;\n\n      return {\n        microLamports: microLamports\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(ComputeBudgetProgram.programId)) {\n        throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n      }\n    }\n  }]);\n\n  return ComputeBudgetInstruction;\n}();\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nvar COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nvar ComputeBudgetProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetProgram() {\n    _classCallCheck(this, ComputeBudgetProgram);\n  }\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  _createClass(ComputeBudgetProgram, null, [{\n    key: \"requestUnits\",\n    value: function requestUnits(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"requestHeapFrame\",\n    value: function requestHeapFrame(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitLimit\",\n    value: function setComputeUnitLimit(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitPrice\",\n    value: function setComputeUnitPrice(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n      var data = encodeData(type, {\n        microLamports: BigInt(params.microLamports)\n      });\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return ComputeBudgetProgram;\n}();\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function fastStableStringify(val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nvar URL = globalThis.URL;\nvar MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nvar EpochSchedule = /*#__PURE__*/function () {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n\n  return EpochSchedule;\n}();\n\nvar SendTransactionError = /*#__PURE__*/function (_Error) {\n  _inherits(SendTransactionError, _Error);\n\n  var _super3 = _createSuper(SendTransactionError);\n\n  function SendTransactionError(message, logs) {\n    var _this7;\n\n    _classCallCheck(this, SendTransactionError);\n\n    _this7 = _super3.call(this, message);\n    _this7.logs = void 0;\n    _this7.logs = logs;\n    return _this7;\n  }\n\n  return _createClass(SendTransactionError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\n\nvar SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\n\nvar SolanaJSONRPCError = /*#__PURE__*/function (_Error2) {\n  _inherits(SolanaJSONRPCError, _Error2);\n\n  var _super4 = _createSuper(SolanaJSONRPCError);\n\n  function SolanaJSONRPCError(_ref5, customMessage) {\n    var _this8;\n\n    var code = _ref5.code,\n        message = _ref5.message,\n        data = _ref5.data;\n\n    _classCallCheck(this, SolanaJSONRPCError);\n\n    _this8 = _super4.call(this, customMessage != null ? \"\".concat(customMessage, \": \").concat(message) : message);\n    _this8.code = void 0;\n    _this8.data = void 0;\n    _this8.code = code;\n    _this8.data = data;\n    _this8.name = 'SolanaJSONRPCError';\n    return _this8;\n  }\n\n  return _createClass(SolanaJSONRPCError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar fetchImpl = globalThis.fetch; // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\nvar NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nvar DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nvar TransactionExpiredBlockheightExceededError = /*#__PURE__*/function (_Error3) {\n  _inherits(TransactionExpiredBlockheightExceededError, _Error3);\n\n  var _super5 = _createSuper(TransactionExpiredBlockheightExceededError);\n\n  function TransactionExpiredBlockheightExceededError(signature) {\n    var _this9;\n\n    _classCallCheck(this, TransactionExpiredBlockheightExceededError);\n\n    _this9 = _super5.call(this, \"Signature \".concat(signature, \" has expired: block height exceeded.\"));\n    _this9.signature = void 0;\n    _this9.signature = signature;\n    return _this9;\n  }\n\n  return _createClass(TransactionExpiredBlockheightExceededError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\n\nvar TransactionExpiredTimeoutError = /*#__PURE__*/function (_Error4) {\n  _inherits(TransactionExpiredTimeoutError, _Error4);\n\n  var _super6 = _createSuper(TransactionExpiredTimeoutError);\n\n  function TransactionExpiredTimeoutError(signature, timeoutSeconds) {\n    var _this10;\n\n    _classCallCheck(this, TransactionExpiredTimeoutError);\n\n    _this10 = _super6.call(this, \"Transaction was not confirmed in \".concat(timeoutSeconds.toFixed(2), \" seconds. It is \") + 'unknown if it succeeded or failed. Check signature ' + \"\".concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    _this10.signature = void 0;\n    _this10.signature = signature;\n    return _this10;\n  }\n\n  return _createClass(TransactionExpiredTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n\nfunction makeWebsocketUrl(endpoint) {\n  var url = new URL(endpoint);\n  var useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nvar _process$env$npm_pack;\n\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  var commitment;\n  var config;\n\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    var specifiedCommitment = commitmentOrConfig.commitment,\n        specifiedConfig = _objectWithoutProperties(commitmentOrConfig, _excluded);\n\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n\n  return {\n    commitment: commitment,\n    config: config\n  };\n}\n/**\n * @internal\n */\n\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nvar UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nvar SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nvar BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  var fetch = customFetch ? customFetch : fetchImpl;\n  var fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(info, init) {\n        var modifiedFetchArgs;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return new Promise(function (resolve, reject) {\n                  try {\n                    fetchMiddleware(info, init, function (modifiedInfo, modifiedInit) {\n                      return resolve([modifiedInfo, modifiedInit]);\n                    });\n                  } catch (error) {\n                    reject(error);\n                  }\n                });\n\n              case 2:\n                modifiedFetchArgs = _context6.sent;\n                _context6.next = 5;\n                return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));\n\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function fetchWithMiddleware(_x18, _x19) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n  }\n\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(request, callback) {\n      var agent, options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              agent = undefined;\n              options = {\n                method: 'POST',\n                body: request,\n                agent: agent,\n                headers: Object.assign({\n                  'Content-Type': 'application/json'\n                }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n              };\n              _context7.prev = 2;\n              too_many_requests_retries = 5;\n              waitTime = 500;\n\n            case 5:\n              if (!fetchWithMiddleware) {\n                _context7.next = 11;\n                break;\n              }\n\n              _context7.next = 8;\n              return fetchWithMiddleware(url, options);\n\n            case 8:\n              res = _context7.sent;\n              _context7.next = 14;\n              break;\n\n            case 11:\n              _context7.next = 13;\n              return fetch(url, options);\n\n            case 13:\n              res = _context7.sent;\n\n            case 14:\n              if (!(res.status !== 429\n              /* Too many requests */\n              )) {\n                _context7.next = 16;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 16:\n              if (!(disableRetryOnRateLimit === true)) {\n                _context7.next = 18;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 18:\n              too_many_requests_retries -= 1;\n\n              if (!(too_many_requests_retries === 0)) {\n                _context7.next = 21;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 21:\n              console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n              _context7.next = 24;\n              return sleep(waitTime);\n\n            case 24:\n              waitTime *= 2;\n\n            case 25:\n              _context7.next = 5;\n              break;\n\n            case 27:\n              _context7.next = 29;\n              return res.text();\n\n            case 29:\n              text = _context7.sent;\n\n              if (res.ok) {\n                callback(null, text);\n              } else {\n                callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n              }\n\n              _context7.next = 36;\n              break;\n\n            case 33:\n              _context7.prev = 33;\n              _context7.t0 = _context7[\"catch\"](2);\n              if (_context7.t0 instanceof Error) callback(_context7.t0);\n\n            case 36:\n              _context7.prev = 36;\n              return _context7.finish(36);\n\n            case 38:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[2, 33, 36, 38]]);\n    }));\n\n    return function (_x20, _x21) {\n      return _ref7.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nvar SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nvar GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nvar SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\n\nvar COMMON_HTTP_HEADERS = {\n  'solana-client': \"js/\".concat((_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN')\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nvar Connection = /*#__PURE__*/function () {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, commitmentOrConfig) {\n    _classCallCheck(this, Connection);\n\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    var url = new URL(endpoint);\n    var useHttps = url.protocol === 'https:';\n    var wsEndpoint;\n    var httpHeaders;\n    var fetch;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n    /**\n     * The RPC endpoint\n     */\n\n  }, {\n    key: \"rpcEndpoint\",\n    get: function get() {\n      return this._rpcEndpoint;\n    }\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                /** @internal */\n                _extractCommitmentFro = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro.commitment, config = _extractCommitmentFro.config;\n                args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n                /* encoding */\n                , config);\n                _context8.next = 4;\n                return this._rpcRequest('getBalance', args);\n\n              case 4:\n                unsafeRes = _context8.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n                if (!('error' in res)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get balance for \".concat(publicKey.toBase58()));\n\n              case 8:\n                return _context8.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getBalanceAndContext(_x22, _x23) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(publicKey, commitmentOrConfig) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getBalanceAndContext(publicKey, commitmentOrConfig).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getBalance(_x24, _x25) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._rpcRequest('getBlockTime', [slot]);\n\n              case 2:\n                unsafeRes = _context10.sent;\n                res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get block time for slot \".concat(slot));\n\n              case 6:\n                return _context10.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getBlockTime(_x26) {\n        return _getBlockTime.apply(this, arguments);\n      }\n\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._rpcRequest('minimumLedgerSlot', []);\n\n              case 2:\n                unsafeRes = _context11.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n\n              case 6:\n                return _context11.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._rpcRequest('getFirstAvailableBlock', []);\n\n              case 2:\n                unsafeRes = _context12.sent;\n                res = create(unsafeRes, SlotRpcResult);\n\n                if (!('error' in res)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n\n              case 6:\n                return _context12.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(config) {\n        var configArg, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                configArg = {};\n\n                if (typeof config === 'string') {\n                  configArg = {\n                    commitment: config\n                  };\n                } else if (config) {\n                  configArg = _objectSpread(_objectSpread({}, config), {}, {\n                    commitment: config && config.commitment || this.commitment\n                  });\n                } else {\n                  configArg = {\n                    commitment: this.commitment\n                  };\n                }\n\n                _context13.next = 4;\n                return this._rpcRequest('getSupply', [configArg]);\n\n              case 4:\n                unsafeRes = _context13.sent;\n                res = create(unsafeRes, GetSupplyRpcResult);\n\n                if (!('error' in res)) {\n                  _context13.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n\n              case 8:\n                return _context13.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getSupply(_x27) {\n        return _getSupply.apply(this, arguments);\n      }\n\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n                _context14.next = 3;\n                return this._rpcRequest('getTokenSupply', args);\n\n              case 3:\n                unsafeRes = _context14.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n\n              case 7:\n                return _context14.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getTokenSupply(_x28, _x29) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                args = this._buildArgs([tokenAddress.toBase58()], commitment);\n                _context15.next = 3;\n                return this._rpcRequest('getTokenAccountBalance', args);\n\n              case 3:\n                unsafeRes = _context15.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n\n              case 7:\n                return _context15.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getTokenAccountBalance(_x30, _x31) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n     */\n\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(ownerAddress, filter, commitmentOrConfig) {\n        var _extractCommitmentFro2, commitment, config, _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _extractCommitmentFro2 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro2.commitment, config = _extractCommitmentFro2.config;\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'base64', config);\n                _context16.next = 6;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 6:\n                unsafeRes = _context16.sent;\n                res = create(unsafeRes, GetTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context16.next = 10;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n\n              case 10:\n                return _context16.abrupt(\"return\", res.result);\n\n              case 11:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getTokenAccountsByOwner(_x32, _x33, _x34) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'jsonParsed');\n                _context17.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context17.sent;\n                res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context17.next = 9;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n\n              case 9:\n                return _context17.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getParsedTokenAccountsByOwner(_x35, _x36, _x37) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                arg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n                args = arg.filter || arg.commitment ? [arg] : [];\n                _context18.next = 4;\n                return this._rpcRequest('getLargestAccounts', args);\n\n              case 4:\n                unsafeRes = _context18.sent;\n                res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n                if (!('error' in res)) {\n                  _context18.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n\n              case 8:\n                return _context18.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getLargestAccounts(_x38) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                args = this._buildArgs([mintAddress.toBase58()], commitment);\n                _context19.next = 3;\n                return this._rpcRequest('getTokenLargestAccounts', args);\n\n              case 3:\n                unsafeRes = _context19.sent;\n                res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n                if (!('error' in res)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n\n              case 7:\n                return _context19.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getTokenLargestAccounts(_x39, _x40) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro3, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _extractCommitmentFro3 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro3.commitment, config = _extractCommitmentFro3.config;\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n                _context20.next = 4;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 4:\n                unsafeRes = _context20.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context20.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n\n              case 8:\n                return _context20.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getAccountInfoAndContext(_x41, _x42) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n                _context21.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context21.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context21.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n\n              case 7:\n                return _context21.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getParsedAccountInfo(_x43, _x44) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(publicKey, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.prev = 0;\n                _context22.next = 3;\n                return this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n\n              case 3:\n                res = _context22.sent;\n                return _context22.abrupt(\"return\", res.value);\n\n              case 7:\n                _context22.prev = 7;\n                _context22.t0 = _context22[\"catch\"](0);\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context22.t0);\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[0, 7]]);\n      }));\n\n      function getAccountInfo(_x45, _x46) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfoAndContext\",\n    value: function () {\n      var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(publicKeys, commitmentOrConfig) {\n        var _extractCommitmentFro4, commitment, config, keys, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _extractCommitmentFro4 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro4.commitment, config = _extractCommitmentFro4.config;\n                keys = publicKeys.map(function (key) {\n                  return key.toBase58();\n                });\n                args = this._buildArgs([keys], commitment, 'base64', config);\n                _context23.next = 5;\n                return this._rpcRequest('getMultipleAccounts', args);\n\n              case 5:\n                unsafeRes = _context23.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n                if (!('error' in res)) {\n                  _context23.next = 9;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n\n              case 9:\n                return _context23.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getMultipleAccountsInfoAndContext(_x47, _x48) {\n        return _getMultipleAccountsInfoAndContext.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfoAndContext;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(publicKeys, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n\n              case 2:\n                res = _context24.sent;\n                return _context24.abrupt(\"return\", res.value);\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getMultipleAccountsInfo(_x49, _x50) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(publicKey, commitmentOrConfig, epoch) {\n        var _extractCommitmentFro5, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _extractCommitmentFro5 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro5.commitment, config = _extractCommitmentFro5.config;\n                args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n                /* encoding */\n                , _objectSpread(_objectSpread({}, config), {}, {\n                  epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n                }));\n                _context25.next = 4;\n                return this._rpcRequest('getStakeActivation', args);\n\n              case 4:\n                unsafeRes = _context25.sent;\n                res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n                if (!('error' in res)) {\n                  _context25.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get Stake Activation \".concat(publicKey.toBase58()));\n\n              case 8:\n                return _context25.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getStakeActivation(_x51, _x52, _x53) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(programId, configOrCommitment) {\n        var _extractCommitmentFro6, commitment, config, _ref8, encoding, configWithoutEncoding, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _extractCommitmentFro6 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro6.commitment, config = _extractCommitmentFro6.config;\n                _ref8 = config || {}, encoding = _ref8.encoding, configWithoutEncoding = _objectWithoutProperties(_ref8, _excluded2);\n                args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n                _context26.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context26.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context26.next = 9;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n\n              case 9:\n                return _context26.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function getProgramAccounts(_x54, _x55) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(programId, configOrCommitment) {\n        var _extractCommitmentFro7, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _extractCommitmentFro7 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro7.commitment, config = _extractCommitmentFro7.config;\n                args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n                _context27.next = 4;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 4:\n                unsafeRes = _context27.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context27.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n\n              case 8:\n                return _context27.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getParsedProgramAccounts(_x56, _x57) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n\n      return getParsedProgramAccounts;\n    }() // eslint-disable-next-line no-dupe-class-members\n\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(strategy, commitment) {\n        var _this11 = this;\n\n        var rawSignature, config, decodedSignature, subscriptionCommitment, timeoutId, subscriptionId, done, confirmationPromise, expiryPromise, result, outcome;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                if (typeof strategy == 'string') {\n                  rawSignature = strategy;\n                } else {\n                  config = strategy;\n                  rawSignature = config.signature;\n                }\n\n                _context30.prev = 1;\n                decodedSignature = bs58.decode(rawSignature);\n                _context30.next = 8;\n                break;\n\n              case 5:\n                _context30.prev = 5;\n                _context30.t0 = _context30[\"catch\"](1);\n                throw new Error('signature must be base58 encoded: ' + rawSignature);\n\n              case 8:\n                assert(decodedSignature.length === 64, 'signature has invalid length');\n                subscriptionCommitment = commitment || this.commitment;\n                done = false;\n                confirmationPromise = new Promise(function (resolve, reject) {\n                  try {\n                    subscriptionId = _this11.onSignature(rawSignature, function (result, context) {\n                      subscriptionId = undefined;\n                      var response = {\n                        context: context,\n                        value: result\n                      };\n                      done = true;\n                      resolve({\n                        __type: TransactionStatus.PROCESSED,\n                        response: response\n                      });\n                    }, subscriptionCommitment);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n                expiryPromise = new Promise(function (resolve) {\n                  if (typeof strategy === 'string') {\n                    var timeoutMs = _this11._confirmTransactionInitialTimeout || 60 * 1000;\n\n                    switch (subscriptionCommitment) {\n                      case 'processed':\n                      case 'recent':\n                      case 'single':\n                      case 'confirmed':\n                      case 'singleGossip':\n                        {\n                          timeoutMs = _this11._confirmTransactionInitialTimeout || 30 * 1000;\n                          break;\n                        }\n                    }\n\n                    timeoutId = setTimeout(function () {\n                      return resolve({\n                        __type: TransactionStatus.TIMED_OUT,\n                        timeoutMs: timeoutMs\n                      });\n                    }, timeoutMs);\n                  } else {\n                    var _config = strategy;\n\n                    var checkBlockHeight = /*#__PURE__*/function () {\n                      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n                        var blockHeight;\n                        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n                          while (1) {\n                            switch (_context28.prev = _context28.next) {\n                              case 0:\n                                _context28.prev = 0;\n                                _context28.next = 3;\n                                return _this11.getBlockHeight(commitment);\n\n                              case 3:\n                                blockHeight = _context28.sent;\n                                return _context28.abrupt(\"return\", blockHeight);\n\n                              case 7:\n                                _context28.prev = 7;\n                                _context28.t0 = _context28[\"catch\"](0);\n                                return _context28.abrupt(\"return\", -1);\n\n                              case 10:\n                              case \"end\":\n                                return _context28.stop();\n                            }\n                          }\n                        }, _callee28, null, [[0, 7]]);\n                      }));\n\n                      return function checkBlockHeight() {\n                        return _ref9.apply(this, arguments);\n                      };\n                    }();\n\n                    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n                      var currentBlockHeight;\n                      return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n                        while (1) {\n                          switch (_context29.prev = _context29.next) {\n                            case 0:\n                              _context29.next = 2;\n                              return checkBlockHeight();\n\n                            case 2:\n                              currentBlockHeight = _context29.sent;\n\n                              if (!done) {\n                                _context29.next = 5;\n                                break;\n                              }\n\n                              return _context29.abrupt(\"return\");\n\n                            case 5:\n                              if (!(currentBlockHeight <= _config.lastValidBlockHeight)) {\n                                _context29.next = 17;\n                                break;\n                              }\n\n                              _context29.next = 8;\n                              return sleep(1000);\n\n                            case 8:\n                              if (!done) {\n                                _context29.next = 10;\n                                break;\n                              }\n\n                              return _context29.abrupt(\"return\");\n\n                            case 10:\n                              _context29.next = 12;\n                              return checkBlockHeight();\n\n                            case 12:\n                              currentBlockHeight = _context29.sent;\n\n                              if (!done) {\n                                _context29.next = 15;\n                                break;\n                              }\n\n                              return _context29.abrupt(\"return\");\n\n                            case 15:\n                              _context29.next = 5;\n                              break;\n\n                            case 17:\n                              resolve({\n                                __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n                              });\n\n                            case 18:\n                            case \"end\":\n                              return _context29.stop();\n                          }\n                        }\n                      }, _callee29);\n                    }))();\n                  }\n                });\n                _context30.prev = 13;\n                _context30.next = 16;\n                return Promise.race([confirmationPromise, expiryPromise]);\n\n              case 16:\n                outcome = _context30.sent;\n                _context30.t1 = outcome.__type;\n                _context30.next = _context30.t1 === TransactionStatus.BLOCKHEIGHT_EXCEEDED ? 20 : _context30.t1 === TransactionStatus.PROCESSED ? 21 : _context30.t1 === TransactionStatus.TIMED_OUT ? 23 : 24;\n                break;\n\n              case 20:\n                throw new TransactionExpiredBlockheightExceededError(rawSignature);\n\n              case 21:\n                result = outcome.response;\n                return _context30.abrupt(\"break\", 24);\n\n              case 23:\n                throw new TransactionExpiredTimeoutError(rawSignature, outcome.timeoutMs / 1000);\n\n              case 24:\n                _context30.prev = 24;\n                clearTimeout(timeoutId);\n\n                if (subscriptionId) {\n                  this.removeSignatureListener(subscriptionId);\n                }\n\n                return _context30.finish(24);\n\n              case 28:\n                return _context30.abrupt(\"return\", result);\n\n              case 29:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this, [[1, 5], [13,, 24, 28]]);\n      }));\n\n      function confirmTransaction(_x58, _x59) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n\n      return confirmTransaction;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this._rpcRequest('getClusterNodes', []);\n\n              case 2:\n                unsafeRes = _context31.sent;\n                res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n                if (!('error' in res)) {\n                  _context31.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n\n              case 6:\n                return _context31.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context32.next = 3;\n                return this._rpcRequest('getVoteAccounts', args);\n\n              case 3:\n                unsafeRes = _context32.sent;\n                res = create(unsafeRes, GetVoteAccounts);\n\n                if (!('error' in res)) {\n                  _context32.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n\n              case 7:\n                return _context32.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getVoteAccounts(_x60) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(commitmentOrConfig) {\n        var _extractCommitmentFro8, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                _extractCommitmentFro8 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro8.commitment, config = _extractCommitmentFro8.config;\n                args = this._buildArgs([], commitment, undefined\n                /* encoding */\n                , config);\n                _context33.next = 4;\n                return this._rpcRequest('getSlot', args);\n\n              case 4:\n                unsafeRes = _context33.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context33.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n\n              case 8:\n                return _context33.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function getSlot(_x61) {\n        return _getSlot.apply(this, arguments);\n      }\n\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(commitmentOrConfig) {\n        var _extractCommitmentFro9, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _extractCommitmentFro9 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro9.commitment, config = _extractCommitmentFro9.config;\n                args = this._buildArgs([], commitment, undefined\n                /* encoding */\n                , config);\n                _context34.next = 4;\n                return this._rpcRequest('getSlotLeader', args);\n\n              case 4:\n                unsafeRes = _context34.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context34.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n\n              case 8:\n                return _context34.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function getSlotLeader(_x62) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                args = [startSlot, limit];\n                _context35.next = 3;\n                return this._rpcRequest('getSlotLeaders', args);\n\n              case 3:\n                unsafeRes = _context35.sent;\n                res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n                if (!('error' in res)) {\n                  _context35.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n\n              case 7:\n                return _context35.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function getSlotLeaders(_x63, _x64) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.getSignatureStatuses([signature], config);\n\n              case 2:\n                _yield$this$getSignat = _context36.sent;\n                context = _yield$this$getSignat.context;\n                values = _yield$this$getSignat.value;\n                assert(values.length === 1);\n                value = values[0];\n                return _context36.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function getSignatureStatus(_x65, _x66) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                params = [signatures];\n\n                if (config) {\n                  params.push(config);\n                }\n\n                _context37.next = 4;\n                return this._rpcRequest('getSignatureStatuses', params);\n\n              case 4:\n                unsafeRes = _context37.sent;\n                res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n                if (!('error' in res)) {\n                  _context37.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n\n              case 8:\n                return _context37.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function getSignatureStatuses(_x67, _x68) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(commitmentOrConfig) {\n        var _extractCommitmentFro10, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _extractCommitmentFro10 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro10.commitment, config = _extractCommitmentFro10.config;\n                args = this._buildArgs([], commitment, undefined\n                /* encoding */\n                , config);\n                _context38.next = 4;\n                return this._rpcRequest('getTransactionCount', args);\n\n              case 4:\n                unsafeRes = _context38.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context38.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n\n              case 8:\n                return _context38.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getTransactionCount(_x69) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(commitment) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return this.getSupply({\n                  commitment: commitment,\n                  excludeNonCirculatingAccountsList: true\n                });\n\n              case 2:\n                result = _context39.sent;\n                return _context39.abrupt(\"return\", result.value.total);\n\n              case 4:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function getTotalSupply(_x70) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context40.next = 3;\n                return this._rpcRequest('getInflationGovernor', args);\n\n              case 3:\n                unsafeRes = _context40.sent;\n                res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n                if (!('error' in res)) {\n                  _context40.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n\n              case 7:\n                return _context40.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function getInflationGovernor(_x71) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(addresses, epoch, commitmentOrConfig) {\n        var _extractCommitmentFro11, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                _extractCommitmentFro11 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro11.commitment, config = _extractCommitmentFro11.config;\n                args = this._buildArgs([addresses.map(function (pubkey) {\n                  return pubkey.toBase58();\n                })], commitment, undefined\n                /* encoding */\n                , _objectSpread(_objectSpread({}, config), {}, {\n                  epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n                }));\n                _context41.next = 4;\n                return this._rpcRequest('getInflationReward', args);\n\n              case 4:\n                unsafeRes = _context41.sent;\n                res = create(unsafeRes, GetInflationRewardResult);\n\n                if (!('error' in res)) {\n                  _context41.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n\n              case 8:\n                return _context41.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function getInflationReward(_x72, _x73, _x74) {\n        return _getInflationReward.apply(this, arguments);\n      }\n\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(commitmentOrConfig) {\n        var _extractCommitmentFro12, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _extractCommitmentFro12 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro12.commitment, config = _extractCommitmentFro12.config;\n                args = this._buildArgs([], commitment, undefined\n                /* encoding */\n                , config);\n                _context42.next = 4;\n                return this._rpcRequest('getEpochInfo', args);\n\n              case 4:\n                unsafeRes = _context42.sent;\n                res = create(unsafeRes, GetEpochInfoRpcResult);\n\n                if (!('error' in res)) {\n                  _context42.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n\n              case 8:\n                return _context42.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function getEpochInfo(_x75) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return this._rpcRequest('getEpochSchedule', []);\n\n              case 2:\n                unsafeRes = _context43.sent;\n                res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context43.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n\n              case 6:\n                epochSchedule = res.result;\n                return _context43.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n\n              case 8:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                _context44.next = 2;\n                return this._rpcRequest('getLeaderSchedule', []);\n\n              case 2:\n                unsafeRes = _context44.sent;\n                res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context44.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n\n              case 6:\n                return _context44.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                args = this._buildArgs([dataLength], commitment);\n                _context45.next = 3;\n                return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n\n              case 3:\n                unsafeRes = _context45.sent;\n                res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n                if (!('error' in res)) {\n                  _context45.next = 8;\n                  break;\n                }\n\n                console.warn('Unable to fetch minimum balance for rent exemption');\n                return _context45.abrupt(\"return\", 0);\n\n              case 8:\n                return _context45.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function getMinimumBalanceForRentExemption(_x76, _x77) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context46.next = 3;\n                return this._rpcRequest('getRecentBlockhash', args);\n\n              case 3:\n                unsafeRes = _context46.sent;\n                res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n                if (!('error' in res)) {\n                  _context46.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n\n              case 7:\n                return _context46.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function getRecentBlockhashAndContext(_x78) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(limit) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                _context47.next = 2;\n                return this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n\n              case 2:\n                unsafeRes = _context47.sent;\n                res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n                if (!('error' in res)) {\n                  _context47.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n\n              case 6:\n                return _context47.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function getRecentPerformanceSamples(_x79) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n     */\n\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n\n        return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                args = this._buildArgs([blockhash], commitment);\n                _context48.next = 3;\n                return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n\n              case 3:\n                unsafeRes = _context48.sent;\n                res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n                if (!('error' in res)) {\n                  _context48.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n\n              case 7:\n                _res$result = res.result, context = _res$result.context, value = _res$result.value;\n                return _context48.abrupt(\"return\", {\n                  context: context,\n                  value: value !== null ? value.feeCalculator : null\n                });\n\n              case 9:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      function getFeeCalculatorForBlockhash(_x80, _x81) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch the fee for a message from the cluster, return with context\n     */\n\n  }, {\n    key: \"getFeeForMessage\",\n    value: function () {\n      var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49(message, commitment) {\n        var wireMessage, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                wireMessage = message.serialize().toString('base64');\n                args = this._buildArgs([wireMessage], commitment);\n                _context49.next = 4;\n                return this._rpcRequest('getFeeForMessage', args);\n\n              case 4:\n                unsafeRes = _context49.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context49.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n\n              case 8:\n                if (!(res.result === null)) {\n                  _context49.next = 10;\n                  break;\n                }\n\n                throw new Error('invalid blockhash');\n\n              case 10:\n                return _context49.abrupt(\"return\", res.result);\n\n              case 11:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function getFeeForMessage(_x82, _x83) {\n        return _getFeeForMessage.apply(this, arguments);\n      }\n\n      return getFeeForMessage;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(commitment) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                _context50.prev = 0;\n                _context50.next = 3;\n                return this.getRecentBlockhashAndContext(commitment);\n\n              case 3:\n                res = _context50.sent;\n                return _context50.abrupt(\"return\", res.value);\n\n              case 7:\n                _context50.prev = 7;\n                _context50.t0 = _context50[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context50.t0);\n\n              case 10:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this, [[0, 7]]);\n      }));\n\n      function getRecentBlockhash(_x84) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n\n  }, {\n    key: \"getLatestBlockhash\",\n    value: function () {\n      var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51(commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.prev = 0;\n                _context51.next = 3;\n                return this.getLatestBlockhashAndContext(commitmentOrConfig);\n\n              case 3:\n                res = _context51.sent;\n                return _context51.abrupt(\"return\", res.value);\n\n              case 7:\n                _context51.prev = 7;\n                _context51.t0 = _context51[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context51.t0);\n\n              case 10:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this, [[0, 7]]);\n      }));\n\n      function getLatestBlockhash(_x85) {\n        return _getLatestBlockhash.apply(this, arguments);\n      }\n\n      return getLatestBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n\n  }, {\n    key: \"getLatestBlockhashAndContext\",\n    value: function () {\n      var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(commitmentOrConfig) {\n        var _extractCommitmentFro13, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                _extractCommitmentFro13 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro13.commitment, config = _extractCommitmentFro13.config;\n                args = this._buildArgs([], commitment, undefined\n                /* encoding */\n                , config);\n                _context52.next = 4;\n                return this._rpcRequest('getLatestBlockhash', args);\n\n              case 4:\n                unsafeRes = _context52.sent;\n                res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n                if (!('error' in res)) {\n                  _context52.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n\n              case 8:\n                return _context52.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n\n      function getLatestBlockhashAndContext(_x86) {\n        return _getLatestBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getLatestBlockhashAndContext;\n    }()\n    /**\n     * Fetch the node version\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                _context53.next = 2;\n                return this._rpcRequest('getVersion', []);\n\n              case 2:\n                unsafeRes = _context53.sent;\n                res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n                if (!('error' in res)) {\n                  _context53.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get version');\n\n              case 6:\n                return _context53.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /**\n     * Fetch the genesis hash\n     */\n\n  }, {\n    key: \"getGenesisHash\",\n    value: function () {\n      var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                _context54.next = 2;\n                return this._rpcRequest('getGenesisHash', []);\n\n              case 2:\n                unsafeRes = _context54.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context54.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n\n              case 6:\n                return _context54.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n\n      function getGenesisHash() {\n        return _getGenesisHash.apply(this, arguments);\n      }\n\n      return getGenesisHash;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     */\n\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55(slot, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n                _context55.next = 3;\n                return this._rpcRequest('getBlock', args);\n\n              case 3:\n                unsafeRes = _context55.sent;\n                res = create(unsafeRes, GetBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context55.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context55.next = 10;\n                  break;\n                }\n\n                return _context55.abrupt(\"return\", result);\n\n              case 10:\n                return _context55.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref11) {\n                    var transaction = _ref11.transaction,\n                        meta = _ref11.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n\n      function getBlock(_x87, _x88) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n    /*\n     * Returns the current block height of the node\n     */\n\n  }, {\n    key: \"getBlockHeight\",\n    value: function () {\n      var _getBlockHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(commitmentOrConfig) {\n        var _extractCommitmentFro14, commitment, config, args, unsafeRes, res;\n\n        return _regeneratorRuntime().wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                _extractCommitmentFro14 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro14.commitment, config = _extractCommitmentFro14.config;\n                args = this._buildArgs([], commitment, undefined\n                /* encoding */\n                , config);\n                _context56.next = 4;\n                return this._rpcRequest('getBlockHeight', args);\n\n              case 4:\n                unsafeRes = _context56.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context56.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n\n              case 8:\n                return _context56.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n\n      function getBlockHeight(_x89) {\n        return _getBlockHeight.apply(this, arguments);\n      }\n\n      return getBlockHeight;\n    }()\n    /*\n     * Returns recent block production information from the current or previous epoch\n     */\n\n  }, {\n    key: \"getBlockProduction\",\n    value: function () {\n      var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(configOrCommitment) {\n        var extra, commitment, c, rest, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                if (typeof configOrCommitment === 'string') {\n                  commitment = configOrCommitment;\n                } else if (configOrCommitment) {\n                  c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded3);\n                  commitment = c;\n                  extra = rest;\n                }\n\n                args = this._buildArgs([], commitment, 'base64', extra);\n                _context57.next = 4;\n                return this._rpcRequest('getBlockProduction', args);\n\n              case 4:\n                unsafeRes = _context57.sent;\n                res = create(unsafeRes, BlockProductionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context57.next = 8;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n\n              case 8:\n                return _context57.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      function getBlockProduction(_x90) {\n        return _getBlockProduction.apply(this, arguments);\n      }\n\n      return getBlockProduction;\n    }()\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(signature, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n                _context58.next = 3;\n                return this._rpcRequest('getTransaction', args);\n\n              case 3:\n                unsafeRes = _context58.sent;\n                res = create(unsafeRes, GetTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context58.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context58.next = 10;\n                  break;\n                }\n\n                return _context58.abrupt(\"return\", result);\n\n              case 10:\n                return _context58.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: new Message(result.transaction.message)\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n\n      function getTransaction(_x91, _x92) {\n        return _getTransaction.apply(this, arguments);\n      }\n\n      return getTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized transaction\n     */\n\n  }, {\n    key: \"getParsedTransaction\",\n    value: function () {\n      var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context59.next = 3;\n                return this._rpcRequest('getTransaction', args);\n\n              case 3:\n                unsafeRes = _context59.sent;\n                res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context59.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n\n              case 7:\n                return _context59.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      function getParsedTransaction(_x93, _x94) {\n        return _getParsedTransaction.apply(this, arguments);\n      }\n\n      return getParsedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n\n  }, {\n    key: \"getParsedTransactions\",\n    value: function () {\n      var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(signatures, commitment) {\n        var _this12 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this12._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getTransaction',\n                    args: args\n                  };\n                });\n                _context60.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context60.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                  }\n\n                  return res.result;\n                });\n                return _context60.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n\n      function getParsedTransactions(_x95, _x96) {\n        return _getParsedTransactions.apply(this, arguments);\n      }\n\n      return getParsedTransactions;\n    }()\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n     */\n\n  }, {\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61(signatures, commitment) {\n        var _this13 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this13._buildArgsAtLeastConfirmed([signature], commitment);\n\n                  return {\n                    methodName: 'getTransaction',\n                    args: args\n                  };\n                });\n                _context61.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context61.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                  }\n\n                  var result = res.result;\n                  if (!result) return result;\n                  return _objectSpread(_objectSpread({}, result), {}, {\n                    transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                      message: new Message(result.transaction.message)\n                    })\n                  });\n                });\n                return _context61.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n\n      function getTransactions(_x97, _x98) {\n        return _getTransactions.apply(this, arguments);\n      }\n\n      return getTransactions;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(slot, commitment) {\n        var args, unsafeRes, res, result, block;\n        return _regeneratorRuntime().wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment);\n                _context62.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context62.sent;\n                res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context62.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context62.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                block = _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref12) {\n                    var transaction = _ref12.transaction,\n                        meta = _ref12.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                });\n                return _context62.abrupt(\"return\", _objectSpread(_objectSpread({}, block), {}, {\n                  transactions: block.transactions.map(function (_ref13) {\n                    var transaction = _ref13.transaction,\n                        meta = _ref13.meta;\n                    return {\n                      meta: meta,\n                      transaction: Transaction.populate(transaction.message, transaction.signatures)\n                    };\n                  })\n                }));\n\n              case 12:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62, this);\n      }));\n\n      function getConfirmedBlock(_x99, _x100) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch confirmed blocks between two slots\n     */\n\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(startSlot, endSlot, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n                _context63.next = 3;\n                return this._rpcRequest('getBlocks', args);\n\n              case 3:\n                unsafeRes = _context63.sent;\n                res = create(unsafeRes, jsonRpcResult(array(number())));\n\n                if (!('error' in res)) {\n                  _context63.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n\n              case 7:\n                return _context63.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63, this);\n      }));\n\n      function getBlocks(_x101, _x102, _x103) {\n        return _getBlocks.apply(this, arguments);\n      }\n\n      return getBlocks;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a block, excluding rewards\n     */\n\n  }, {\n    key: \"getBlockSignatures\",\n    value: function () {\n      var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context64.next = 3;\n                return this._rpcRequest('getBlock', args);\n\n              case 3:\n                unsafeRes = _context64.sent;\n                res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context64.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get block');\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context64.next = 10;\n                  break;\n                }\n\n                throw new Error('Block ' + slot + ' not found');\n\n              case 10:\n                return _context64.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n\n      function getBlockSignatures(_x104, _x105) {\n        return _getBlockSignatures.apply(this, arguments);\n      }\n\n      return getBlockSignatures;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context65.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context65.sent;\n                res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context65.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context65.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                return _context65.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65, this);\n      }));\n\n      function getConfirmedBlockSignatures(_x106, _x107) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n     */\n\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66(signature, commitment) {\n        var args, unsafeRes, res, result, message, signatures;\n        return _regeneratorRuntime().wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment);\n                _context66.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context66.sent;\n                res = create(unsafeRes, GetTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context66.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context66.next = 10;\n                  break;\n                }\n\n                return _context66.abrupt(\"return\", result);\n\n              case 10:\n                message = new Message(result.transaction.message);\n                signatures = result.transaction.signatures;\n                return _context66.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: Transaction.populate(message, signatures)\n                }));\n\n              case 13:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this);\n      }));\n\n      function getConfirmedTransaction(_x108, _x109) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context67.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context67.sent;\n                res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context67.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n\n              case 7:\n                return _context67.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67, this);\n      }));\n\n      function getParsedConfirmedTransaction(_x110, _x111) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee68(signatures, commitment) {\n        var _this14 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this14._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getConfirmedTransaction',\n                    args: args\n                  };\n                });\n                _context68.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context68.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n                  }\n\n                  return res.result;\n                });\n                return _context68.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n\n      function getParsedConfirmedTransactions(_x112, _x113) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee69(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n\n        return _regeneratorRuntime().wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                options = {};\n                _context69.next = 3;\n                return this.getFirstAvailableBlock();\n\n              case 3:\n                firstAvailableBlock = _context69.sent;\n\n              case 4:\n                if ('until' in options) {\n                  _context69.next = 24;\n                  break;\n                }\n\n                startSlot--;\n\n                if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                  _context69.next = 8;\n                  break;\n                }\n\n                return _context69.abrupt(\"break\", 24);\n\n              case 8:\n                _context69.prev = 8;\n                _context69.next = 11;\n                return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n              case 11:\n                block = _context69.sent;\n\n                if (block.signatures.length > 0) {\n                  options.until = block.signatures[block.signatures.length - 1].toString();\n                }\n\n                _context69.next = 22;\n                break;\n\n              case 15:\n                _context69.prev = 15;\n                _context69.t0 = _context69[\"catch\"](8);\n\n                if (!(_context69.t0 instanceof Error && _context69.t0.message.includes('skipped'))) {\n                  _context69.next = 21;\n                  break;\n                }\n\n                return _context69.abrupt(\"continue\", 4);\n\n              case 21:\n                throw _context69.t0;\n\n              case 22:\n                _context69.next = 4;\n                break;\n\n              case 24:\n                _context69.next = 26;\n                return this.getSlot('finalized');\n\n              case 26:\n                highestConfirmedRoot = _context69.sent;\n\n              case 27:\n                if ('before' in options) {\n                  _context69.next = 47;\n                  break;\n                }\n\n                endSlot++;\n\n                if (!(endSlot > highestConfirmedRoot)) {\n                  _context69.next = 31;\n                  break;\n                }\n\n                return _context69.abrupt(\"break\", 47);\n\n              case 31:\n                _context69.prev = 31;\n                _context69.next = 34;\n                return this.getConfirmedBlockSignatures(endSlot);\n\n              case 34:\n                _block = _context69.sent;\n\n                if (_block.signatures.length > 0) {\n                  options.before = _block.signatures[_block.signatures.length - 1].toString();\n                }\n\n                _context69.next = 45;\n                break;\n\n              case 38:\n                _context69.prev = 38;\n                _context69.t1 = _context69[\"catch\"](31);\n\n                if (!(_context69.t1 instanceof Error && _context69.t1.message.includes('skipped'))) {\n                  _context69.next = 44;\n                  break;\n                }\n\n                return _context69.abrupt(\"continue\", 27);\n\n              case 44:\n                throw _context69.t1;\n\n              case 45:\n                _context69.next = 27;\n                break;\n\n              case 47:\n                _context69.next = 49;\n                return this.getConfirmedSignaturesForAddress2(address, options);\n\n              case 49:\n                confirmedSignatureInfo = _context69.sent;\n                return _context69.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                  return info.signature;\n                }));\n\n              case 51:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this, [[8, 15], [31, 38]]);\n      }));\n\n      function getConfirmedSignaturesForAddress(_x114, _x115, _x116) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee70(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context70.next = 3;\n                return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n\n              case 3:\n                unsafeRes = _context70.sent;\n                res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n                if (!('error' in res)) {\n                  _context70.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n\n              case 7:\n                return _context70.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function getConfirmedSignaturesForAddress2(_x117, _x118, _x119) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee71(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context71.next = 3;\n                return this._rpcRequest('getSignaturesForAddress', args);\n\n              case 3:\n                unsafeRes = _context71.sent;\n                res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n                if (!('error' in res)) {\n                  _context71.next = 7;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n\n              case 7:\n                return _context71.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function getSignaturesForAddress(_x120, _x121, _x122) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getSignaturesForAddress;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee72(nonceAccount, commitment) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n\n        return _regeneratorRuntime().wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                _context72.next = 2;\n                return this.getAccountInfoAndContext(nonceAccount, commitment);\n\n              case 2:\n                _yield$this$getAccoun = _context72.sent;\n                context = _yield$this$getAccoun.context;\n                accountInfo = _yield$this$getAccoun.value;\n                value = null;\n\n                if (accountInfo !== null) {\n                  value = NonceAccount.fromAccountData(accountInfo.data);\n                }\n\n                return _context72.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function getNonceAndContext(_x123, _x124) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee73(nonceAccount, commitment) {\n        return _regeneratorRuntime().wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                _context73.next = 2;\n                return this.getNonceAndContext(nonceAccount, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context73.abrupt(\"return\", _context73.sent);\n\n              case 3:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n        }, _callee73, this);\n      }));\n\n      function getNonce(_x125, _x126) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee74(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                _context74.next = 2;\n                return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n\n              case 2:\n                unsafeRes = _context74.sent;\n                res = create(unsafeRes, RequestAirdropRpcResult);\n\n                if (!('error' in res)) {\n                  _context74.next = 6;\n                  break;\n                }\n\n                throw new SolanaJSONRPCError(res.error, \"airdrop to \".concat(to.toBase58(), \" failed\"));\n\n              case 6:\n                return _context74.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n\n      function requestAirdrop(_x127, _x128) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_blockhashWithExpiryBlockHeight\",\n    value: function () {\n      var _blockhashWithExpiryBlockHeight2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee75(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime().wrap(function _callee75$(_context75) {\n          while (1) {\n            switch (_context75.prev = _context75.next) {\n              case 0:\n                if (disableCache) {\n                  _context75.next = 10;\n                  break;\n                }\n\n              case 1:\n                if (!this._pollingBlockhash) {\n                  _context75.next = 6;\n                  break;\n                }\n\n                _context75.next = 4;\n                return sleep(100);\n\n              case 4:\n                _context75.next = 1;\n                break;\n\n              case 6:\n                timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n                expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n                if (!(this._blockhashInfo.latestBlockhash !== null && !expired)) {\n                  _context75.next = 10;\n                  break;\n                }\n\n                return _context75.abrupt(\"return\", this._blockhashInfo.latestBlockhash);\n\n              case 10:\n                _context75.next = 12;\n                return this._pollNewBlockhash();\n\n              case 12:\n                return _context75.abrupt(\"return\", _context75.sent);\n\n              case 13:\n              case \"end\":\n                return _context75.stop();\n            }\n          }\n        }, _callee75, this);\n      }));\n\n      function _blockhashWithExpiryBlockHeight(_x129) {\n        return _blockhashWithExpiryBlockHeight2.apply(this, arguments);\n      }\n\n      return _blockhashWithExpiryBlockHeight;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {\n        var startTime, cachedLatestBlockhash, cachedBlockhash, i, latestBlockhash;\n        return _regeneratorRuntime().wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                this._pollingBlockhash = true;\n                _context76.prev = 1;\n                startTime = Date.now();\n                cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n                cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n                i = 0;\n\n              case 6:\n                if (!(i < 50)) {\n                  _context76.next = 18;\n                  break;\n                }\n\n                _context76.next = 9;\n                return this.getLatestBlockhash('finalized');\n\n              case 9:\n                latestBlockhash = _context76.sent;\n\n                if (!(cachedBlockhash !== latestBlockhash.blockhash)) {\n                  _context76.next = 13;\n                  break;\n                }\n\n                this._blockhashInfo = {\n                  latestBlockhash: latestBlockhash,\n                  lastFetch: Date.now(),\n                  transactionSignatures: [],\n                  simulatedSignatures: []\n                };\n                return _context76.abrupt(\"return\", latestBlockhash);\n\n              case 13:\n                _context76.next = 15;\n                return sleep(MS_PER_SLOT / 2);\n\n              case 15:\n                i++;\n                _context76.next = 6;\n                break;\n\n              case 18:\n                throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n\n              case 19:\n                _context76.prev = 19;\n                this._pollingBlockhash = false;\n                return _context76.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, this, [[1,, 19, 22]]);\n      }));\n\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n\n      return _pollNewBlockhash;\n    }()\n    /**\n     * Simulate a transaction\n     */\n\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee77(transactionOrMessage, signers, includeAccounts) {\n        var transaction, originalTx, _transaction3, disableCache, _transaction4, latestBlockhash, signature, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;\n\n        return _regeneratorRuntime().wrap(function _callee77$(_context77) {\n          while (1) {\n            switch (_context77.prev = _context77.next) {\n              case 0:\n                if (transactionOrMessage instanceof Transaction) {\n                  originalTx = transactionOrMessage;\n                  transaction = new Transaction();\n                  transaction.feePayer = originalTx.feePayer;\n                  transaction.instructions = transactionOrMessage.instructions;\n                  transaction.nonceInfo = originalTx.nonceInfo;\n                  transaction.signatures = originalTx.signatures;\n                } else {\n                  transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n                  transaction._message = transaction._json = undefined;\n                }\n\n                if (!(transaction.nonceInfo && signers)) {\n                  _context77.next = 5;\n                  break;\n                }\n\n                (_transaction3 = transaction).sign.apply(_transaction3, _toConsumableArray(signers));\n\n                _context77.next = 25;\n                break;\n\n              case 5:\n                disableCache = this._disableBlockhashCaching;\n\n              case 6:\n                _context77.next = 8;\n                return this._blockhashWithExpiryBlockHeight(disableCache);\n\n              case 8:\n                latestBlockhash = _context77.sent;\n                transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n                transaction.recentBlockhash = latestBlockhash.blockhash;\n\n                if (signers) {\n                  _context77.next = 13;\n                  break;\n                }\n\n                return _context77.abrupt(\"break\", 25);\n\n              case 13:\n                (_transaction4 = transaction).sign.apply(_transaction4, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context77.next = 16;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 16:\n                signature = transaction.signature.toString('base64');\n\n                if (!(!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature))) {\n                  _context77.next = 22;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.simulatedSignatures.push(signature);\n\n                return _context77.abrupt(\"break\", 25);\n\n              case 22:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 23:\n                _context77.next = 6;\n                break;\n\n              case 25:\n                message = transaction._compile();\n                signData = message.serialize();\n                wireTransaction = transaction._serialize(signData);\n                encodedTransaction = wireTransaction.toString('base64');\n                config = {\n                  encoding: 'base64',\n                  commitment: this.commitment\n                };\n\n                if (includeAccounts) {\n                  addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n                    return key.toBase58();\n                  });\n                  config['accounts'] = {\n                    encoding: 'base64',\n                    addresses: addresses\n                  };\n                }\n\n                if (signers) {\n                  config.sigVerify = true;\n                }\n\n                args = [encodedTransaction, config];\n                _context77.next = 35;\n                return this._rpcRequest('simulateTransaction', args);\n\n              case 35:\n                unsafeRes = _context77.sent;\n                res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context77.next = 40;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n\n                  if (logs && Array.isArray(logs)) {\n                    traceIndent = '\\n    ';\n                    logTrace = traceIndent + logs.join(traceIndent);\n                    console.error(res.error.message, logTrace);\n                  }\n                }\n\n                throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n\n              case 40:\n                return _context77.abrupt(\"return\", res.result);\n\n              case 41:\n              case \"end\":\n                return _context77.stop();\n            }\n          }\n        }, _callee77, this);\n      }));\n\n      function simulateTransaction(_x130, _x131, _x132) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee78(transaction, signers, options) {\n        var disableCache, latestBlockhash, signature, wireTransaction;\n        return _regeneratorRuntime().wrap(function _callee78$(_context78) {\n          while (1) {\n            switch (_context78.prev = _context78.next) {\n              case 0:\n                if (!transaction.nonceInfo) {\n                  _context78.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context78.next = 22;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context78.next = 7;\n                return this._blockhashWithExpiryBlockHeight(disableCache);\n\n              case 7:\n                latestBlockhash = _context78.sent;\n                transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n                transaction.recentBlockhash = latestBlockhash.blockhash;\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context78.next = 13;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 13:\n                signature = transaction.signature.toString('base64');\n\n                if (this._blockhashInfo.transactionSignatures.includes(signature)) {\n                  _context78.next = 19;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.transactionSignatures.push(signature);\n\n                return _context78.abrupt(\"break\", 22);\n\n              case 19:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 20:\n                _context78.next = 5;\n                break;\n\n              case 22:\n                wireTransaction = transaction.serialize();\n                _context78.next = 25;\n                return this.sendRawTransaction(wireTransaction, options);\n\n              case 25:\n                return _context78.abrupt(\"return\", _context78.sent);\n\n              case 26:\n              case \"end\":\n                return _context78.stop();\n            }\n          }\n        }, _callee78, this);\n      }));\n\n      function sendTransaction(_x133, _x134, _x135) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee79(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime().wrap(function _callee79$(_context79) {\n          while (1) {\n            switch (_context79.prev = _context79.next) {\n              case 0:\n                encodedTransaction = toBuffer(rawTransaction).toString('base64');\n                _context79.next = 3;\n                return this.sendEncodedTransaction(encodedTransaction, options);\n\n              case 3:\n                result = _context79.sent;\n                return _context79.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context79.stop();\n            }\n          }\n        }, _callee79, this);\n      }));\n\n      function sendRawTransaction(_x136, _x137) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee80(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs;\n        return _regeneratorRuntime().wrap(function _callee80$(_context80) {\n          while (1) {\n            switch (_context80.prev = _context80.next) {\n              case 0:\n                config = {\n                  encoding: 'base64'\n                };\n                skipPreflight = options && options.skipPreflight;\n                preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n                if (options && options.maxRetries != null) {\n                  config.maxRetries = options.maxRetries;\n                }\n\n                if (options && options.minContextSlot != null) {\n                  config.minContextSlot = options.minContextSlot;\n                }\n\n                if (skipPreflight) {\n                  config.skipPreflight = skipPreflight;\n                }\n\n                if (preflightCommitment) {\n                  config.preflightCommitment = preflightCommitment;\n                }\n\n                args = [encodedTransaction, config];\n                _context80.next = 10;\n                return this._rpcRequest('sendTransaction', args);\n\n              case 10:\n                unsafeRes = _context80.sent;\n                res = create(unsafeRes, SendTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context80.next = 15;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n                }\n\n                throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n\n              case 15:\n                return _context80.abrupt(\"return\", res.result);\n\n              case 16:\n              case \"end\":\n                return _context80.stop();\n            }\n          }\n        }, _callee80, this);\n      }));\n\n      function sendEncodedTransaction(_x138, _x139) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this15 = this;\n\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _this15._rpcWebSocket.notify('ping').catch(function () {});\n      }, 5000);\n\n      this._updateSubscriptions();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      this._rpcWebSocketConnected = false;\n      console.error('ws error:', err.message);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      var _this16 = this;\n\n      this._rpcWebSocketConnected = false;\n      this._rpcWebSocketGeneration++;\n\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n\n        return;\n      } // implicit close, prepare subscriptions for auto-reconnect\n\n\n      this._subscriptionCallbacksByServerSubscriptionId = {};\n      Object.entries(this._subscriptionsByHash).forEach(function (_ref14) {\n        var _ref15 = _slicedToArray(_ref14, 2),\n            hash = _ref15[0],\n            subscription = _ref15[1];\n\n        _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n          state: 'pending'\n        });\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function () {\n      var _updateSubscriptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee84() {\n        var _this17 = this;\n\n        var activeWebSocketGeneration, isCurrentConnectionStillActive;\n        return _regeneratorRuntime().wrap(function _callee84$(_context84) {\n          while (1) {\n            switch (_context84.prev = _context84.next) {\n              case 0:\n                if (!(Object.keys(this._subscriptionsByHash).length === 0)) {\n                  _context84.next = 3;\n                  break;\n                }\n\n                if (this._rpcWebSocketConnected) {\n                  this._rpcWebSocketConnected = false;\n                  this._rpcWebSocketIdleTimeout = setTimeout(function () {\n                    _this17._rpcWebSocketIdleTimeout = null;\n\n                    try {\n                      _this17._rpcWebSocket.close();\n                    } catch (err) {\n                      // swallow error if socket has already been closed.\n                      if (err instanceof Error) {\n                        console.log(\"Error when closing socket connection: \".concat(err.message));\n                      }\n                    }\n                  }, 500);\n                }\n\n                return _context84.abrupt(\"return\");\n\n              case 3:\n                if (this._rpcWebSocketIdleTimeout !== null) {\n                  clearTimeout(this._rpcWebSocketIdleTimeout);\n                  this._rpcWebSocketIdleTimeout = null;\n                  this._rpcWebSocketConnected = true;\n                }\n\n                if (this._rpcWebSocketConnected) {\n                  _context84.next = 7;\n                  break;\n                }\n\n                this._rpcWebSocket.connect();\n\n                return _context84.abrupt(\"return\");\n\n              case 7:\n                activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n                isCurrentConnectionStillActive = function isCurrentConnectionStillActive() {\n                  return activeWebSocketGeneration === _this17._rpcWebSocketGeneration;\n                };\n\n                _context84.next = 11;\n                return Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n                // `_updateSubscriptions` recursively when processing the state,\n                // so it's important that we look up the *current* version of\n                // each subscription, every time we process a hash.\n                Object.keys(this._subscriptionsByHash).map( /*#__PURE__*/function () {\n                  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee83(hash) {\n                    var subscription;\n                    return _regeneratorRuntime().wrap(function _callee83$(_context83) {\n                      while (1) {\n                        switch (_context83.prev = _context83.next) {\n                          case 0:\n                            subscription = _this17._subscriptionsByHash[hash];\n\n                            if (!(subscription === undefined)) {\n                              _context83.next = 3;\n                              break;\n                            }\n\n                            return _context83.abrupt(\"return\");\n\n                          case 3:\n                            _context83.t0 = subscription.state;\n                            _context83.next = _context83.t0 === 'pending' ? 6 : _context83.t0 === 'unsubscribed' ? 6 : _context83.t0 === 'subscribed' ? 15 : 19;\n                            break;\n\n                          case 6:\n                            if (!(subscription.callbacks.size === 0)) {\n                              _context83.next = 12;\n                              break;\n                            }\n\n                            /**\n                             * You can end up here when:\n                             *\n                             * - a subscription has recently unsubscribed\n                             *   without having new callbacks added to it\n                             *   while the unsubscribe was in flight, or\n                             * - when a pending subscription has its\n                             *   listeners removed before a request was\n                             *   sent to the server.\n                             *\n                             * Being that nobody is interested in this\n                             * subscription any longer, delete it.\n                             */\n                            delete _this17._subscriptionsByHash[hash];\n\n                            if (subscription.state === 'unsubscribed') {\n                              delete _this17._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n                            }\n\n                            _context83.next = 11;\n                            return _this17._updateSubscriptions();\n\n                          case 11:\n                            return _context83.abrupt(\"return\");\n\n                          case 12:\n                            _context83.next = 14;\n                            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {\n                              var args, method, serverSubscriptionId;\n                              return _regeneratorRuntime().wrap(function _callee81$(_context81) {\n                                while (1) {\n                                  switch (_context81.prev = _context81.next) {\n                                    case 0:\n                                      args = subscription.args, method = subscription.method;\n                                      _context81.prev = 1;\n                                      _this17._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'subscribing'\n                                      });\n                                      _context81.next = 5;\n                                      return _this17._rpcWebSocket.call(method, args);\n\n                                    case 5:\n                                      serverSubscriptionId = _context81.sent;\n                                      _this17._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        serverSubscriptionId: serverSubscriptionId,\n                                        state: 'subscribed'\n                                      });\n                                      _this17._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n                                      _context81.next = 10;\n                                      return _this17._updateSubscriptions();\n\n                                    case 10:\n                                      _context81.next = 20;\n                                      break;\n\n                                    case 12:\n                                      _context81.prev = 12;\n                                      _context81.t0 = _context81[\"catch\"](1);\n\n                                      if (_context81.t0 instanceof Error) {\n                                        console.error(\"\".concat(method, \" error for argument\"), args, _context81.t0.message);\n                                      }\n\n                                      if (isCurrentConnectionStillActive()) {\n                                        _context81.next = 17;\n                                        break;\n                                      }\n\n                                      return _context81.abrupt(\"return\");\n\n                                    case 17:\n                                      // TODO: Maybe add an 'errored' state or a retry limit?\n                                      _this17._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'pending'\n                                      });\n                                      _context81.next = 20;\n                                      return _this17._updateSubscriptions();\n\n                                    case 20:\n                                    case \"end\":\n                                      return _context81.stop();\n                                  }\n                                }\n                              }, _callee81, null, [[1, 12]]);\n                            }))();\n\n                          case 14:\n                            return _context83.abrupt(\"break\", 19);\n\n                          case 15:\n                            if (!(subscription.callbacks.size === 0)) {\n                              _context83.next = 18;\n                              break;\n                            }\n\n                            _context83.next = 18;\n                            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {\n                              var serverSubscriptionId, unsubscribeMethod;\n                              return _regeneratorRuntime().wrap(function _callee82$(_context82) {\n                                while (1) {\n                                  switch (_context82.prev = _context82.next) {\n                                    case 0:\n                                      serverSubscriptionId = subscription.serverSubscriptionId, unsubscribeMethod = subscription.unsubscribeMethod;\n\n                                      if (!_this17._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                                        _context82.next = 5;\n                                        break;\n                                      }\n\n                                      /**\n                                       * Special case.\n                                       * If we're dealing with a subscription that has been auto-\n                                       * disposed by the RPC, then we can skip the RPC call to\n                                       * tear down the subscription here.\n                                       *\n                                       * NOTE: There is a proposal to eliminate this special case, here:\n                                       * https://github.com/solana-labs/solana/issues/18892\n                                       */\n                                      _this17._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n\n                                      _context82.next = 20;\n                                      break;\n\n                                    case 5:\n                                      _this17._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'unsubscribing'\n                                      });\n                                      _context82.prev = 6;\n                                      _context82.next = 9;\n                                      return _this17._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n\n                                    case 9:\n                                      _context82.next = 20;\n                                      break;\n\n                                    case 11:\n                                      _context82.prev = 11;\n                                      _context82.t0 = _context82[\"catch\"](6);\n\n                                      if (_context82.t0 instanceof Error) {\n                                        console.error(\"\".concat(unsubscribeMethod, \" error:\"), _context82.t0.message);\n                                      }\n\n                                      if (isCurrentConnectionStillActive()) {\n                                        _context82.next = 16;\n                                        break;\n                                      }\n\n                                      return _context82.abrupt(\"return\");\n\n                                    case 16:\n                                      // TODO: Maybe add an 'errored' state or a retry limit?\n                                      _this17._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'subscribed'\n                                      });\n                                      _context82.next = 19;\n                                      return _this17._updateSubscriptions();\n\n                                    case 19:\n                                      return _context82.abrupt(\"return\");\n\n                                    case 20:\n                                      _this17._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'unsubscribed'\n                                      });\n                                      _context82.next = 23;\n                                      return _this17._updateSubscriptions();\n\n                                    case 23:\n                                    case \"end\":\n                                      return _context82.stop();\n                                  }\n                                }\n                              }, _callee82, null, [[6, 11]]);\n                            }))();\n\n                          case 18:\n                            return _context83.abrupt(\"break\", 19);\n\n                          case 19:\n                          case \"end\":\n                            return _context83.stop();\n                        }\n                      }\n                    }, _callee83);\n                  }));\n\n                  return function (_x140) {\n                    return _ref16.apply(this, arguments);\n                  };\n                }()));\n\n              case 11:\n              case \"end\":\n                return _context84.stop();\n            }\n          }\n        }, _callee84, this);\n      }));\n\n      function _updateSubscriptions() {\n        return _updateSubscriptions2.apply(this, arguments);\n      }\n\n      return _updateSubscriptions;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_handleServerNotification\",\n    value: function _handleServerNotification(serverSubscriptionId, callbackArgs) {\n      var callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n      if (callbacks === undefined) {\n        return;\n      }\n\n      callbacks.forEach(function (cb) {\n        try {\n          cb.apply(void 0, _toConsumableArray(callbackArgs));\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var _create = create(notification, AccountNotificationResult),\n          result = _create.result,\n          subscription = _create.subscription;\n\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_makeSubscription\",\n    value: function _makeSubscription(subscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args) {\n      var _this18 = this;\n\n      var clientSubscriptionId = this._nextClientSubscriptionId++;\n      var hash = fastStableStringify$1([subscriptionConfig.method, args], true\n      /* isArrayProp */\n      );\n      var existingSubscription = this._subscriptionsByHash[hash];\n\n      if (existingSubscription === undefined) {\n        this._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscriptionConfig), {}, {\n          args: args,\n          callbacks: new Set([subscriptionConfig.callback]),\n          state: 'pending'\n        });\n      } else {\n        existingSubscription.callbacks.add(subscriptionConfig.callback);\n      }\n\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee85() {\n        var subscription;\n        return _regeneratorRuntime().wrap(function _callee85$(_context85) {\n          while (1) {\n            switch (_context85.prev = _context85.next) {\n              case 0:\n                delete _this18._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n                subscription = _this18._subscriptionsByHash[hash];\n                assert(subscription !== undefined, \"Could not find a `Subscription` when tearing down client subscription #\".concat(clientSubscriptionId));\n                subscription.callbacks.delete(subscriptionConfig.callback);\n                _context85.next = 6;\n                return _this18._updateSubscriptions();\n\n              case 6:\n              case \"end\":\n                return _context85.stop();\n            }\n          }\n        }, _callee85);\n      }));\n\n      this._updateSubscriptions();\n\n      return clientSubscriptionId;\n    }\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64');\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee86(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee86$(_context86) {\n          while (1) {\n            switch (_context86.prev = _context86.next) {\n              case 0:\n                _context86.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n\n              case 2:\n              case \"end\":\n                return _context86.stop();\n            }\n          }\n        }, _callee86, this);\n      }));\n\n      function removeAccountChangeListener(_x141) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var _create2 = create(notification, ProgramAccountNotificationResult),\n          result = _create2.result,\n          subscription = _create2.subscription;\n\n      this._handleServerNotification(subscription, [{\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account\n      }, result.context]);\n    }\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64'\n      /* encoding */\n      , filters ? {\n        filters: filters\n      } : undefined\n      /* extra */\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee87(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee87$(_context87) {\n          while (1) {\n            switch (_context87.prev = _context87.next) {\n              case 0:\n                _context87.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n\n              case 2:\n              case \"end\":\n                return _context87.stop();\n            }\n          }\n        }, _callee87, this);\n      }));\n\n      function removeProgramAccountChangeListener(_x142) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var args = this._buildArgs([typeof filter === 'object' ? {\n        mentions: [filter.toString()]\n      } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id client subscription id to deregister.\n     */\n\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee88(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee88$(_context88) {\n          while (1) {\n            switch (_context88.prev = _context88.next) {\n              case 0:\n                _context88.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n\n              case 2:\n              case \"end\":\n                return _context88.stop();\n            }\n          }\n        }, _callee88, this);\n      }));\n\n      function removeOnLogsListener(_x143) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var _create3 = create(notification, LogsNotificationResult),\n          result = _create3.result,\n          subscription = _create3.subscription;\n\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var _create4 = create(notification, SlotNotificationResult),\n          result = _create4.result,\n          subscription = _create4.subscription;\n\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe'\n      }, []\n      /* args */\n      );\n    }\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee89(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee89$(_context89) {\n          while (1) {\n            switch (_context89.prev = _context89.next) {\n              case 0:\n                _context89.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n\n              case 2:\n              case \"end\":\n                return _context89.stop();\n            }\n          }\n        }, _callee89, this);\n      }));\n\n      function removeSlotChangeListener(_x144) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var _create5 = create(notification, SlotUpdateNotificationResult),\n          result = _create5.result,\n          subscription = _create5.subscription;\n\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n      }, []\n      /* args */\n      );\n    }\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee90(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee90$(_context90) {\n          while (1) {\n            switch (_context90.prev = _context90.next) {\n              case 0:\n                _context90.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n\n              case 2:\n              case \"end\":\n                return _context90.stop();\n            }\n          }\n        }, _callee90, this);\n      }));\n\n      function removeSlotUpdateListener(_x145) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n\n      return removeSlotUpdateListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_unsubscribeClientSubscription\",\n    value: function () {\n      var _unsubscribeClientSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee91(clientSubscriptionId, subscriptionName) {\n        var dispose;\n        return _regeneratorRuntime().wrap(function _callee91$(_context91) {\n          while (1) {\n            switch (_context91.prev = _context91.next) {\n              case 0:\n                dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n                if (!dispose) {\n                  _context91.next = 6;\n                  break;\n                }\n\n                _context91.next = 4;\n                return dispose();\n\n              case 4:\n                _context91.next = 7;\n                break;\n\n              case 6:\n                console.warn('Ignored unsubscribe request because an active subscription with id ' + \"`\".concat(clientSubscriptionId, \"` for '\").concat(subscriptionName, \"' events \") + 'could not be found.');\n\n              case 7:\n              case \"end\":\n                return _context91.stop();\n            }\n          }\n        }, _callee91, this);\n      }));\n\n      function _unsubscribeClientSubscription(_x146, _x147) {\n        return _unsubscribeClientSubscription2.apply(this, arguments);\n      }\n\n      return _unsubscribeClientSubscription;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment || encoding || extra) {\n        var options = {};\n\n        if (encoding) {\n          options.encoding = encoding;\n        }\n\n        if (commitment) {\n          options.commitment = commitment;\n        }\n\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n\n        args.push(options);\n      }\n\n      return args;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n\n      return this._buildArgs(args, override, encoding, extra);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var _create6 = create(notification, SignatureNotificationResult),\n          result = _create6.result,\n          subscription = _create6.subscription;\n\n      if (result.value !== 'receivedSignature') {\n        /**\n         * Special case.\n         * After a signature is processed, RPCs automatically dispose of the\n         * subscription on the server side. We need to track which of these\n         * subscriptions have been disposed in such a way, so that we know\n         * whether the client is dealing with a not-yet-processed signature\n         * (in which case we must tear down the server subscription) or an\n         * already-processed signature (in which case the client can simply\n         * clear out the subscription locally without telling the server).\n         *\n         * NOTE: There is a proposal to eliminate this special case, here:\n         * https://github.com/solana-labs/solana/issues/18892\n         */\n        this._subscriptionsAutoDisposedByRpc.add(subscription);\n      }\n\n      this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n        type: 'received'\n      }, result.context] : [{\n        type: 'status',\n        result: result.value\n      }, result.context]);\n    }\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var _this19 = this;\n\n      var args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n\n\n            try {\n              _this19.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n\n            } catch (_err) {// Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n\n      return clientSubscriptionId;\n    }\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, _callback2, options) {\n      var _this20 = this;\n\n      var _options$commitment = _objectSpread(_objectSpread({}, options), {}, {\n        commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n      }),\n          commitment = _options$commitment.commitment,\n          extra = _objectWithoutProperties(_options$commitment, _excluded4);\n\n      var args = this._buildArgs([signature], commitment, undefined\n      /* encoding */\n      , extra);\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          _callback2(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n\n          try {\n            _this20.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n\n          } catch (_err) {// Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n\n      return clientSubscriptionId;\n    }\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee92(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee92$(_context92) {\n          while (1) {\n            switch (_context92.prev = _context92.next) {\n              case 0:\n                _context92.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n\n              case 2:\n              case \"end\":\n                return _context92.stop();\n            }\n          }\n        }, _callee92, this);\n      }));\n\n      function removeSignatureListener(_x148) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var _create7 = create(notification, RootNotificationResult),\n          result = _create7.result,\n          subscription = _create7.subscription;\n\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe'\n      }, []\n      /* args */\n      );\n    }\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee93(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee93$(_context93) {\n          while (1) {\n            switch (_context93.prev = _context93.next) {\n              case 0:\n                _context93.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n\n              case 2:\n              case \"end\":\n                return _context93.stop();\n            }\n          }\n        }, _callee93, this);\n      }));\n\n      function removeRootChangeListener(_x149) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n\n      return removeRootChangeListener;\n    }()\n  }]);\n\n  return Connection;\n}();\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     */\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The raw secret key for this keypair\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return this._keypair.secretKey;\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(nacl.sign.keyPair());\n    }\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options: skip secret key validation\n     */\n\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      var keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n      if (!options || !options.skipValidation) {\n        var encoder = new TextEncoder();\n        var signData = encoder.encode('@solana/web3.js-validation-v1');\n        var signature = nacl.sign.detached(signData, keypair.secretKey);\n\n        if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n\n      return new Keypair(keypair);\n    }\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     */\n\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n    }\n  }]);\n\n  return Keypair;\n}();\n\nvar PRIVATE_KEY_BYTES$1 = 64;\nvar PUBLIC_KEY_BYTES$1 = 32;\nvar SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nvar ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nvar Ed25519Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Ed25519Program() {\n    _classCallCheck(this, Ed25519Program);\n  }\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  _createClass(Ed25519Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          instructionIndex = params.instructionIndex;\n      assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n      var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n      var signatureOffset = publicKeyOffset + publicKey.length;\n      var messageDataOffset = signatureOffset + signature.length;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(messageDataOffset + message.length);\n      var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n      : instructionIndex;\n      ED25519_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        padding: 0,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset: publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index\n      }, instructionData);\n      instructionData.fill(publicKey, publicKeyOffset);\n      instructionData.fill(signature, signatureOffset);\n      instructionData.fill(message, messageDataOffset);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Ed25519Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an ed25519 instruction with a private key. The private key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n\n      try {\n        var keypair = Keypair.fromSecretKey(privateKey);\n\n        var _publicKey2 = keypair.publicKey.toBytes();\n\n        var signature = nacl.sign.detached(message, keypair.secretKey);\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey2,\n          message: message,\n          signature: signature,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Ed25519Program;\n}();\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nvar Authorized = /*#__PURE__*/_createClass(\n/** stake authority */\n\n/** withdraw authority */\n\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n\n  this.staker = void 0;\n  this.withdrawer = void 0;\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n});\n/**\n * Stake account lockup info\n */\n\n\nvar Lockup = /*#__PURE__*/_createClass(\n/** Unix timestamp of lockup expiration */\n\n/** Epoch of lockup expiration */\n\n/** Lockup custodian authority */\n\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n\n  this.unixTimestamp = void 0;\n  this.epoch = void 0;\n  this.custodian = void 0;\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n/**\n * Default, inactive Lockup value\n */\n);\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i7 = 0, _Object$entries4 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i7 < _Object$entries4.length; _i7++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i7], 2),\n            ixType = _Object$entries4$_i[0],\n            layout = _Object$entries4$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData18 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n          authorized = _decodeData18.authorized,\n          lockup = _decodeData18.lockup;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData19 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData19.newAuthorized,\n          stakeAuthorizationType = _decodeData19.stakeAuthorizationType;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData20 = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n          newAuthorized = _decodeData20.newAuthorized,\n          stakeAuthorizationType = _decodeData20.stakeAuthorizationType,\n          authoritySeed = _decodeData20.authoritySeed,\n          authorityOwner = _decodeData20.authorityOwner;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData21 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n          lamports = _decodeData21.lamports;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData22 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData22.lamports;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup.default;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorityBase = params.authorityBase,\n          authoritySeed = params.authoritySeed,\n          authorityOwner = params.authorityOwner,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"splitInstruction\",\n    value: function splitInstruction(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          lamports = params.lamports;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction(params));\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another account\n     * derived from a base public key and seed\n     */\n\n  }, {\n    key: \"splitWithSeed\",\n    value: function splitWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          basePubkey = params.basePubkey,\n          seed = params.seed,\n          lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey: basePubkey,\n        seed: seed,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction({\n        stakePubkey: stakePubkey,\n        authorizedPubkey: authorizedPubkey,\n        splitStakePubkey: splitStakePubkey,\n        lamports: lamports\n      }));\n    }\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n          sourceStakePubKey = params.sourceStakePubKey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          toPubkey = params.toPubkey,\n          lamports = params.lamports,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return StakeProgram;\n}();\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nvar publicKeyCreate = secp256k1.publicKeyCreate,\n    ecdsaSign = secp256k1.ecdsaSign;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value: function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n\n      try {\n        return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          _params$instructionIn = params.instructionIndex,\n          instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n\n      try {\n        var privateKey = toBuffer(pkey);\n\n        var _publicKey3 = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n\n        var messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n            signature = _ecdsaSign.signature,\n            recoveryId = _ecdsaSign.recid;\n\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey3,\n          message: message,\n          signature: signature,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Secp256k1Program;\n}();\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var PUBKEY_LENGTH = 32;\n\n      var byteArray = _toConsumableArray(buffer);\n\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n\n      for (var i = 0; i < 2; i++) {\n        var _publicKey4 = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: _publicKey4,\n          isSigner: isSigner\n        });\n      }\n\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$7(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return ValidatorInfo;\n}();\n\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var versionOffset = 4;\n      var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n      var rootSlot = va.rootSlot;\n\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n        priorVoters: getPriorVoters(va.priorVoters),\n        epochCredits: va.epochCredits,\n        lastTimestamp: va.lastTimestamp\n      });\n    }\n  }]);\n\n  return VoteAccount;\n}();\n\nfunction parseAuthorizedVoter(_ref10) {\n  var authorizedVoter = _ref10.authorizedVoter,\n      epoch = _ref10.epoch;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref17) {\n  var authorizedPubkey = _ref17.authorizedPubkey,\n      epochOfLastAuthorizedSwitch = _ref17.epochOfLastAuthorizedSwitch,\n      targetEpoch = _ref17.targetEpoch;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref18) {\n  var buf = _ref18.buf,\n      idx = _ref18.idx,\n      isEmpty = _ref18.isEmpty;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));\n}\n/**\n * Vote account info\n */\n\n\nvar VoteInit = /*#__PURE__*/_createClass(\n/** [0, 100] */\nfunction VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n  _classCallCheck(this, VoteInit);\n\n  this.nodePubkey = void 0;\n  this.authorizedVoter = void 0;\n  this.authorizedWithdrawer = void 0;\n  this.commission = void 0;\n  this.nodePubkey = nodePubkey;\n  this.authorizedVoter = authorizedVoter;\n  this.authorizedWithdrawer = authorizedWithdrawer;\n  this.commission = commission;\n});\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nvar VoteInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteInstruction() {\n    _classCallCheck(this, VoteInstruction);\n  }\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(VoteInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i8 = 0, _Object$entries5 = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i8 < _Object$entries5.length; _i8++) {\n        var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i8], 2),\n            ixType = _Object$entries5$_i[0],\n            layout = _Object$entries5$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a VoteInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode an initialize vote instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitializeAccount\",\n    value: function decodeInitializeAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 4);\n\n      var _decodeData23 = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),\n          voteInit = _decodeData23.voteInit;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        nodePubkey: instruction.keys[3].pubkey,\n        voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n      };\n    }\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData24 = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData24.newAuthorized,\n          voteAuthorizationType = _decodeData24.voteAuthorizationType;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        }\n      };\n    }\n    /**\n     * Decode a withdraw instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData25 = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData25.lamports;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        toPubkey: instruction.keys[1].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(VoteProgram.programId)) {\n        throw new Error('invalid instruction; programId is not VoteProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return VoteInstruction;\n}();\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nvar VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nvar VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nvar VoteProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteProgram() {\n    _classCallCheck(this, VoteProgram);\n  }\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  _createClass(VoteProgram, null, [{\n    key: \"initializeAccount\",\n    value: function initializeAccount(params) {\n      var votePubkey = params.votePubkey,\n          nodePubkey = params.nodePubkey,\n          voteInit = params.voteInit;\n      var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n      var data = encodeData(type, {\n        voteInit: {\n          nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n          authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n          authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n          commission: voteInit.commission\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: nodePubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction that creates a new Vote account.\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit\n      }));\n    }\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var votePubkey = params.votePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          voteAuthorizationType = params.voteAuthorizationType;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction to withdraw from a Vote account.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var votePubkey = params.votePubkey,\n          authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,\n          lamports = params.lamports,\n          toPubkey = params.toPubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedWithdrawerPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return VoteProgram;\n}();\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\nfunction sendAndConfirmRawTransaction(_x150, _x151, _x152, _x153) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee95(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n    var confirmationStrategy, options, sendOptions, signature, commitment, confirmationPromise, status;\n    return _regeneratorRuntime().wrap(function _callee95$(_context95) {\n      while (1) {\n        switch (_context95.prev = _context95.next) {\n          case 0:\n            if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n              confirmationStrategy = confirmationStrategyOrConfirmOptions;\n              options = maybeConfirmOptions;\n            } else {\n              options = confirmationStrategyOrConfirmOptions;\n            }\n\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment,\n              minContextSlot: options.minContextSlot\n            };\n            _context95.next = 4;\n            return connection.sendRawTransaction(rawTransaction, sendOptions);\n\n          case 4:\n            signature = _context95.sent;\n            commitment = options && options.commitment;\n            confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n            _context95.next = 9;\n            return confirmationPromise;\n\n          case 9:\n            status = _context95.sent.value;\n\n            if (!status.err) {\n              _context95.next = 12;\n              break;\n            }\n\n            throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 12:\n            return _context95.abrupt(\"return\", signature);\n\n          case 13:\n          case \"end\":\n            return _context95.stop();\n        }\n      }\n    }, _callee95);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  var url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionStatus, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browserModule","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","require$$1","utils","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","concat","_update","digest","_pad","_digest","pad","bytes","t","ft_1","s","x","y","z","ch32","p32","maj32","s0_256","s1_256","g0_256","g1_256","shaCommon","require$$2","sha1_K","SHA1","call","h","W","_1","require$$3","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","sha512_K","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","SHA384","_384","sha","require$$4","RIPEMD160","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","exports","sha1","sha256","sha224","sha384","sha512","ripemd160","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","defineProperty","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","checkSafeUint53","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","decode","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddressSync","pubkeyData","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","getItemAlloc","item","field","elementLayout","layout","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","encodeData","allocLength","Layout","layoutFields","instruction","index","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","blockhash","signature","nonceInstruction","signers","add","items","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","compiledInstructions","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","entries","SYSTEM_INSTRUCTION_LAYOUTS","ixType","checkKeyLength","Create","lamports","space","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","AllocateWithSeed","base","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","checkKeysLength","recentSlot","authority","payer","Number","addresses","lookupTable","recipient","AddressLookupTableProgram","lookupTableAddress","bumpSeed","addr","BPF_LOADER_DEPRECATED_PROGRAM_ID","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","confirmTransaction","status","sleep","ms","Promise","resolve","setTimeout","CHUNK_SIZE","Loader","Math","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","units","additionalFee","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","microLamports","ComputeBudgetProgram","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","URL","globalThis","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","makeWebsocketUrl","endpoint","useHttps","protocol","host","port","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchImpl","fetchWithMiddleware","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","done","confirmationPromise","subscriptionId","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","timeoutId","TIMED_OUT","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","outcome","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","extra","block","endSlot","transactionDetails","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","o","custodianPubkey","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","secp256k1","ecdsaSign","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/layout.ts","../src/util/bigint.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/sysvar.ts","../src/transaction-constants.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/system-program.ts","../src/address-lookup-table-program.ts","../src/bpf-loader-deprecated.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/loader.ts","../src/bpf-loader.ts","../src/compute-budget.ts","../node_modules/fast-stable-stringify/index.js","../src/util/url-impl.ts","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/util/tx-expiry-custom-errors.ts","../src/util/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport * as bigintLayout from './util/bigint';\nimport {SystemProgram} from './system-program';\nimport {TransactionInstruction} from './transaction';\nimport {decodeData, encodeData, IInstructionInputData} from './instruction';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const URL = globalThis.URL;\nexport const URLSearchParams = globalThis.URLSearchParams;\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {URL} from './url-impl';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {URL} from './util/url-impl';\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './address-lookup-table-program';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/tx-expiry-custom-errors';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}