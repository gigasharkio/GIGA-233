{"ast":null,"code":"import _objectWithoutProperties from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _wrapNativeSuper from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _inherits from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"commitment\"];\nimport _regeneratorRuntime from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/regenerator/index.js\";\nimport nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function TempCtor() {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) {\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n      }\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) {\n      res[i] = msg[i] | 0;\n    }\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    res += zero2(msg[i].toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) {\n      this._update(msg, i, i + this._delta32);\n    }\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) {\n    res[i] = 0;\n  } // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) {\n      res[i++] = 0;\n    }\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) {\n      res[i++] = 0;\n    }\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i++) {\n    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  }\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i++) {\n    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  }\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) {\n    key.push(0);\n  }\n\n  for (i = 0; i < key.length; i++) {\n    key[i] ^= 0x36;\n  }\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) {\n    key[i] ^= 0x6a;\n  }\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nvar version$2 = \"logger/5.6.0\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nvar _logLevel = LogLevels[\"default\"];\nvar _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    var missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nvar _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nvar HEX = \"0123456789abcdef\";\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _createClass(Logger, [{\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      var level = logLevel.toLowerCase();\n\n      if (LogLevels[level] == null) {\n        this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n      }\n\n      if (_logLevel > LogLevels[level]) {\n        return;\n      }\n\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      // Errors are being censored\n      if (_censorErrors) {\n        return this.makeError(\"censored error\", code, {});\n      }\n\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n\n      if (!params) {\n        params = {};\n      }\n\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        var value = params[key];\n\n        try {\n          if (value instanceof Uint8Array) {\n            var hex = \"\";\n\n            for (var i = 0; i < value.length; i++) {\n              hex += HEX[value[i] >> 4];\n              hex += HEX[value[i] & 0x0f];\n            }\n\n            messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n          } else {\n            messageDetails.push(key + \"=\" + JSON.stringify(value));\n          }\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"code=\".concat(code));\n      messageDetails.push(\"version=\".concat(this.version));\n      var reason = message;\n      var url = \"\";\n\n      switch (code) {\n        case ErrorCode.NUMERIC_FAULT:\n          {\n            url = \"NUMERIC_FAULT\";\n            var fault = message;\n\n            switch (fault) {\n              case \"overflow\":\n              case \"underflow\":\n              case \"division-by-zero\":\n                url += \"-\" + fault;\n                break;\n\n              case \"negative-power\":\n              case \"negative-width\":\n                url += \"-unsupported\";\n                break;\n\n              case \"unbound-bitwise-result\":\n                url += \"-unbound-result\";\n                break;\n            }\n\n            break;\n          }\n\n        case ErrorCode.CALL_EXCEPTION:\n        case ErrorCode.INSUFFICIENT_FUNDS:\n        case ErrorCode.MISSING_NEW:\n        case ErrorCode.NONCE_EXPIRED:\n        case ErrorCode.REPLACEMENT_UNDERPRICED:\n        case ErrorCode.TRANSACTION_REPLACED:\n        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n          url = code;\n          break;\n      }\n\n      if (url) {\n        message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n      }\n\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      } // @TODO: Any??\n\n\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(condition, message, code, params) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwError(message, code, params);\n    }\n  }, {\n    key: \"assertArgument\",\n    value: function assertArgument(condition, message, name, value) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwArgumentError(message, name, value);\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n\n      if (message == null) {\n        message = \"value not safe\";\n      }\n\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version$2);\n      }\n\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (!censorship && permanent) {\n        this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel.toLowerCase()];\n\n      if (level == null) {\n        Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n\n      _logLevel = level;\n    }\n  }, {\n    key: \"from\",\n    value: function from(version) {\n      return new Logger(version);\n    }\n  }]);\n\n  return Logger;\n}();\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nvar version$1 = \"bytes/5.6.0\";\nvar logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    var args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < value.length; i++) {\n    var v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    var result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    var hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    var _result = [];\n\n    for (var i = 0; i < hex.length; i += 2) {\n      _result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(_result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nvar version = \"sha2/5.6.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n\n    Object.assign(this, properties);\n  }\n\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n\n  return Struct;\n}(); // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n\n  var _super = _createSuper(Enum);\n\n  function Enum(properties) {\n    var _this;\n\n    _classCallCheck(this, Enum);\n\n    _this = _super.call(this, properties);\n    _this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(function (key) {\n      _this.enum = key;\n    });\n    return _this;\n  }\n\n  return _createClass(Enum);\n}(Struct);\n\nvar SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nvar MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nvar PublicKey = /*#__PURE__*/function (_Struct2) {\n  _inherits(PublicKey, _Struct2);\n\n  var _super2 = _createSuper(PublicKey);\n\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this2;\n\n    _classCallCheck(this, PublicKey);\n\n    _this2 = _super2.call(this, {});\n    _this2._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      _this2._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(\"Invalid public key input\");\n        }\n\n        _this2._bn = new BN(decoded);\n      } else {\n        _this2._bn = new BN(value);\n      }\n\n      if (_this2._bn.byteLength() > 32) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n\n    return _this2;\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value: function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toBase58();\n    }\n    /**\n     * Return the byte array representation of the public key\n     */\n\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      return this.toBuffer();\n    }\n    /**\n     * Return the Buffer representation of the public key\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n\n      if (b.length === 32) {\n        return b;\n      }\n\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n\n    /* eslint-disable require-await */\n\n  }], [{\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, hash;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n                hash = sha256(new Uint8Array(buffer)).slice(2);\n                return _context.abrupt(\"return\", new PublicKey(Buffer.from(hash, 'hex')));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n\n    /* eslint-disable require-await */\n\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seeds, programId) {\n        var buffer, hash, publicKeyBytes;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                buffer = Buffer.alloc(0);\n                seeds.forEach(function (seed) {\n                  if (seed.length > MAX_SEED_LENGTH) {\n                    throw new TypeError(\"Max seed length exceeded\");\n                  }\n\n                  buffer = Buffer.concat([buffer, toBuffer(seed)]);\n                });\n                buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n                hash = sha256(new Uint8Array(buffer)).slice(2);\n                publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n                if (!is_on_curve(publicKeyBytes)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Invalid seeds, address must fall off the curve\");\n\n              case 7:\n                return _context2.abrupt(\"return\", new PublicKey(publicKeyBytes));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(seeds, programId) {\n        var nonce, address, seedsWithNonce;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                nonce = 255;\n\n              case 1:\n                if (!(nonce != 0)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                _context3.prev = 2;\n                seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n                _context3.next = 6;\n                return this.createProgramAddress(seedsWithNonce, programId);\n\n              case 6:\n                address = _context3.sent;\n                _context3.next = 15;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                if (!(_context3.t0 instanceof TypeError)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                throw _context3.t0;\n\n              case 13:\n                nonce--;\n                return _context3.abrupt(\"continue\", 1);\n\n              case 15:\n                return _context3.abrupt(\"return\", [address, nonce]);\n\n              case 18:\n                throw new Error(\"Unable to find a viable program address nonce\");\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 9]]);\n      }));\n\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve(pubkey) {\n      return is_on_curve(pubkey) == 1;\n    }\n  }]);\n\n  return PublicKey;\n}(Struct);\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nvar naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nvar gf1 = naclLowLevel.gf([1]);\nvar I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The **unencrypted** secret key for this account\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return toBuffer(this._keypair.secretKey);\n    }\n  }]);\n\n  return Account;\n}();\n\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Layout for a public key\n */\n\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  var _decode = rsl.decode.bind(rsl);\n\n  var _encode = rsl.encode.bind(rsl);\n\n  var rslShim = rsl;\n\n  rslShim.decode = function (b, offset) {\n    var data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = function (str, b, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nvar voteInit = function voteInit() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nvar PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    var _this3 = this;\n\n    _classCallCheck(this, Message);\n\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(function (ix) {\n      return _this3.indexToProgramIds.set(ix.programIdIndex, _this3.accountKeys[ix.programIdIndex]);\n    });\n  }\n\n  _createClass(Message, [{\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n    }\n  }, {\n    key: \"isProgramId\",\n    value: function isProgramId(index) {\n      return this.indexToProgramIds.has(index);\n    }\n  }, {\n    key: \"programIds\",\n    value: function programIds() {\n      return _toConsumableArray(this.indexToProgramIds.values());\n    }\n  }, {\n    key: \"nonProgramIds\",\n    value: function nonProgramIds() {\n      var _this4 = this;\n\n      return this.accountKeys.filter(function (_, index) {\n        return !_this4.isProgramId(index);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n            programIdIndex = instruction.programIdIndex;\n        var data = Array.from(bs58.decode(instruction.data));\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: accounts,\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n    /**\n     * Decode a compiled message into a Message object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var numRequiredSignatures = byteArray.shift();\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBKEY_LENGTH);\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        accountKeys.push(bs58.encode(Buffer.from(account)));\n      }\n\n      var recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n\n        var _accountCount = decodeLength(byteArray);\n\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n\n  return Message;\n}();\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nvar DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nvar TransactionInstruction = /*#__PURE__*/_createClass(\n/**\n * Public keys to include in this transaction\n * Boolean represents whether this pubkey needs to sign the transaction\n */\n\n/**\n * Program Id to execute\n */\n\n/**\n * Program input\n */\nfunction TransactionInstruction(opts) {\n  _classCallCheck(this, TransactionInstruction);\n\n  this.keys = void 0;\n  this.programId = void 0;\n  this.data = Buffer.alloc(0);\n  this.programId = opts.programId;\n  this.keys = opts.keys;\n\n  if (opts.data) {\n    this.data = opts.data;\n  }\n});\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n\n    /**\n     * The first (payer) Transaction signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this5 = this;\n\n      for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        items[_key4] = arguments[_key4];\n      }\n\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this5.instructions = _this5.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this5.instructions.push(item);\n        } else {\n          _this5.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n    /**\n     * Compile transaction data\n     */\n\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      var nonceInfo = this.nonceInfo;\n\n      if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n        this.recentBlockhash = nonceInfo.nonce;\n        this.instructions.unshift(nonceInfo.nonceInstruction);\n      }\n\n      var recentBlockhash = this.recentBlockhash;\n\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n\n      if (this.instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n\n      var feePayer;\n\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n\n      for (var i = 0; i < this.instructions.length; i++) {\n        if (this.instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n\n      var programIds = [];\n      var accountMetas = [];\n      this.instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      }); // Append programID account metas\n\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      }); // Sort. Prioritizing first by signer, then by writable\n\n      accountMetas.sort(function (x, y) {\n        var pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n        var checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n        var checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n        return checkSigner || checkWritable;\n      }); // Cull duplicate account metas\n\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      }); // Move fee payer to the front\n\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n            _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n            payerMeta = _uniqueMetas$splice2[0];\n\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      } // Disallow unknown signers\n\n\n      var _iterator = _createForOfIteratorHelper(this.signatures),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var signature = _step.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref) {\n        var pubkey = _ref.pubkey,\n            isSigner = _ref.isSigner,\n            isWritable = _ref.isWritable;\n\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var data = instruction.data,\n            programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      instructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: instructions\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n    /**\n     * Get the estimated fee associated with a transaction\n     */\n\n  }, {\n    key: \"getEstimatedFee\",\n    value: function () {\n      var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return connection.getFeeForMessage(this.compileMessage());\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getEstimatedFee(_x8) {\n        return _getEstimatedFee.apply(this, arguments);\n      }\n\n      return getEstimatedFee;\n    }()\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        signers[_key5] = arguments[_key5];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        signers[_key6] = arguments[_key6];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i2 = 0, _signers = signers; _i2 < _signers.length; _i2++) {\n        var signer = _signers[_i2];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n\n      this._verifySignatures(message.serialize(), true);\n    }\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     */\n\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        signers[_key7] = arguments[_key7];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i3 = 0, _signers2 = signers; _i3 < _signers2.length; _i3++) {\n        var signer = _signers2[_i3];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this6 = this;\n\n      var signData = message.serialize();\n\n      for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        signers[_key8 - 1] = arguments[_key8];\n      }\n\n      signers.forEach(function (signer) {\n        var signature = nacl.sign.detached(signData, signer.secretKey);\n\n        _this6._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     */\n\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n\n\n      this._addSignature(pubkey, signature);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n    /**\n     * Verify signatures of a complete, signed Transaction\n     */\n\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures() {\n      return this._verifySignatures(this.serializeMessage(), true);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator2 = _createForOfIteratorHelper(this.signatures),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n              signature = _step2$value.signature,\n              _publicKey = _step2$value.publicKey;\n\n          if (signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!nacl.sign.detached.verify(signData, signature, _publicKey.toBuffer())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return true;\n    }\n    /**\n     * Serialize the Transaction in the wire format.\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n        requireAllSignatures: true,\n        verifySignatures: true\n      }, config),\n          requireAllSignatures = _Object$assign.requireAllSignatures,\n          verifySignatures = _Object$assign.verifySignatures;\n\n      var signData = this.serializeMessage();\n\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n\n      return this._serialize(signData);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref2, index) {\n        var signature = _ref2.signature;\n\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n    /**\n     * Parse a wire transaction into a Transaction object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n\n      for (var i = 0; i < signatureCount; i++) {\n        var signature = byteArray.slice(0, SIGNATURE_LENGTH);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH);\n        signatures.push(bs58.encode(Buffer.from(signature)));\n      }\n\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n    /**\n     * Populate Transaction object from message and signatures\n     */\n\n  }, {\n    key: \"populate\",\n    value: function populate(message) {\n      var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }) || message.isAccountSigner(account),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      return transaction;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nvar SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nfunction sendAndConfirmTransaction(_x9, _x10, _x11, _x12) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\n\n\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee87(connection, transaction, signers, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee87$(_context87) {\n      while (1) {\n        switch (_context87.prev = _context87.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment,\n              maxRetries: options.maxRetries\n            };\n            _context87.next = 3;\n            return connection.sendTransaction(transaction, signers, sendOptions);\n\n          case 3:\n            signature = _context87.sent;\n            _context87.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context87.sent.value;\n\n            if (!status.err) {\n              _context87.next = 9;\n              break;\n            }\n\n            throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context87.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context87.stop();\n        }\n      }\n    }, _callee87);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  var data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n\n  return NonceAccount;\n}();\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i4 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i4 < _Object$entries.length; _i4++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),\n            ixType = _Object$entries$_i[0],\n            layout = _Object$entries$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n          lamports = _decodeData.lamports,\n          space = _decodeData.space,\n          programId = _decodeData.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData2 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n          lamports = _decodeData2.lamports;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData3 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n          lamports = _decodeData3.lamports,\n          seed = _decodeData3.seed,\n          programId = _decodeData3.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData4 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n          space = _decodeData4.space;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData5 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n          base = _decodeData5.base,\n          seed = _decodeData5.seed,\n          space = _decodeData5.space,\n          programId = _decodeData5.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData6 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n          programId = _decodeData6.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData7 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n          base = _decodeData7.base,\n          seed = _decodeData7.seed,\n          programId = _decodeData7.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData8 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n          base = _decodeData8.base,\n          seed = _decodeData8.seed,\n          lamports = _decodeData8.lamports,\n          space = _decodeData8.space,\n          programId = _decodeData8.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData9 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n          authorized = _decodeData9.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData10 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n          lamports = _decodeData10.lamports;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData11 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n          authorized = _decodeData11.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(_type, {\n          lamports: params.lamports,\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type2, {\n          lamports: params.lamports\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(_type3, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type4, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(_type5, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type6, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return SystemProgram;\n}();\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * ( // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return connection.getMinimumBalanceForRentExemption(data.length);\n\n              case 2:\n                balanceNeeded = _context5.sent;\n                _context5.next = 5;\n                return connection.getAccountInfo(program.publicKey, 'confirmed');\n\n              case 5:\n                programInfo = _context5.sent;\n                transaction = null;\n\n                if (!(programInfo !== null)) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                if (!programInfo.executable) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                console.error('Program load failed, account is already executable');\n                return _context5.abrupt(\"return\", false);\n\n              case 11:\n                if (programInfo.data.length !== data.length) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.allocate({\n                    accountPubkey: program.publicKey,\n                    space: data.length\n                  }));\n                }\n\n                if (!programInfo.owner.equals(programId)) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.assign({\n                    accountPubkey: program.publicKey,\n                    programId: programId\n                  }));\n                }\n\n                if (programInfo.lamports < balanceNeeded) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.transfer({\n                    fromPubkey: payer.publicKey,\n                    toPubkey: program.publicKey,\n                    lamports: balanceNeeded - programInfo.lamports\n                  }));\n                }\n\n                _context5.next = 17;\n                break;\n\n              case 16:\n                transaction = new Transaction().add(SystemProgram.createAccount({\n                  fromPubkey: payer.publicKey,\n                  newAccountPubkey: program.publicKey,\n                  lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                  space: data.length,\n                  programId: programId\n                }));\n\n              case 17:\n                if (!(transaction !== null)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                _context5.next = 20;\n                return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 20:\n                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n                chunkSize = Loader.chunkSize;\n                offset = 0;\n                array = data;\n                transactions = [];\n\n              case 25:\n                if (!(array.length > 0)) {\n                  _context5.next = 39;\n                  break;\n                }\n\n                bytes = array.slice(0, chunkSize);\n                _data = Buffer.alloc(chunkSize + 16);\n                dataLayout.encode({\n                  instruction: 0,\n                  // Load instruction\n                  offset: offset,\n                  bytes: bytes,\n                  bytesLength: 0,\n                  bytesLengthPadding: 0\n                }, _data);\n                _transaction = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }],\n                  programId: programId,\n                  data: _data\n                });\n                transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                  commitment: 'confirmed'\n                })); // Delay between sends in an attempt to reduce rate limit errors\n\n                if (!connection._rpcEndpoint.includes('solana.com')) {\n                  _context5.next = 35;\n                  break;\n                }\n\n                REQUESTS_PER_SECOND = 4;\n                _context5.next = 35;\n                return sleep(1000 / REQUESTS_PER_SECOND);\n\n              case 35:\n                offset += chunkSize;\n                array = array.slice(chunkSize);\n                _context5.next = 25;\n                break;\n\n              case 39:\n                _context5.next = 41;\n                return Promise.all(transactions);\n\n              case 41:\n                _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n                _data2 = Buffer.alloc(_dataLayout.span);\n\n                _dataLayout.encode({\n                  instruction: 1 // Finalize instruction\n\n                }, _data2);\n\n                _transaction2 = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }, {\n                    pubkey: SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false\n                  }],\n                  programId: programId,\n                  data: _data2\n                });\n                _context5.next = 47;\n                return sendAndConfirmTransaction(connection, _transaction2, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 47:\n                return _context5.abrupt(\"return\", true);\n\n              case 48:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function load(_x13, _x14, _x15, _x16, _x17) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Loader;\n}();\n\nLoader.chunkSize = CHUNK_SIZE;\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n    /**\n     * Load a BPF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the BPF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n\n  return BpfLoader;\n}();\n\nvar browserPonyfill = {\n  exports: {}\n};\n\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n\n    F.prototype = global;\n    return new F();\n  }();\n\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n\n        return name.toLowerCase();\n      }\n\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n\n        return value;\n      } // Build a destructive iterator for the value list\n\n\n      function iteratorFor(items) {\n        var iterator = {\n          next: function next() {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n\n        return iterator;\n      }\n\n      function Headers(headers) {\n        this.map = {};\n\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n\n        body.bodyUsed = true;\n      }\n\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n\n        return chars.join('');\n      }\n\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n\n      function Body() {\n        this.bodyUsed = false;\n\n        this._initBody = function (body) {\n          this._bodyInit = body;\n\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.\n\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n\n            if (rejected) {\n              return rejected;\n            }\n\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n\n        this.text = function () {\n          var rejected = consumed(this);\n\n          if (rejected) {\n            return rejected;\n          }\n\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n\n        return this;\n      } // HTTP methods whose capitalization should be normalized\n\n\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n\n          this.url = input.url;\n          this.credentials = input.credentials;\n\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n\n        this._initBody(body);\n      }\n\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n\n      Body.call(Request.prototype);\n\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n\n        this._initBody(bodyInit);\n      }\n\n      Body.call(Response.prototype);\n\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n\n      var redirectStatuses = [301, 302, 303, 307, 308];\n\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n\n      exports.DOMException = self.DOMException;\n\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n\n          var xhr = new XMLHttpRequest();\n\n          function abortXhr() {\n            xhr.abort();\n          }\n\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n\n          xhr.open(request.method, request.url, true);\n\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n\n      fetch.polyfill = true;\n\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n\n  __self__.fetch.ponyfill = true; // Remove \"polyfill\" property added by whatwg-fetch\n\n  delete __self__.fetch.polyfill; // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n\n  var ctx = __self__; // this line disable service worker support temporarily\n\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\n\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nvar MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nvar EpochSchedule = /*#__PURE__*/function () {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n\n  return EpochSchedule;\n}();\n\nvar SendTransactionError = /*#__PURE__*/function (_Error) {\n  _inherits(SendTransactionError, _Error);\n\n  var _super3 = _createSuper(SendTransactionError);\n\n  function SendTransactionError(message, logs) {\n    var _this7;\n\n    _classCallCheck(this, SendTransactionError);\n\n    _this7 = _super3.call(this, message);\n    _this7.logs = void 0;\n    _this7.logs = logs;\n    return _this7;\n  }\n\n  return _createClass(SendTransactionError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nvar NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nvar DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  var timeoutId;\n  var timeoutPromise = new Promise(function (resolve) {\n    timeoutId = setTimeout(function () {\n      return resolve(null);\n    }, timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(function (result) {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  var url = new URL(endpoint);\n  var useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nvar UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nvar SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nvar BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  var fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(url, options) {\n        var modifiedFetchArgs;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return new Promise(function (resolve, reject) {\n                  try {\n                    fetchMiddleware(url, options, function (modifiedUrl, modifiedOptions) {\n                      return resolve([modifiedUrl, modifiedOptions]);\n                    });\n                  } catch (error) {\n                    reject(error);\n                  }\n                });\n\n              case 2:\n                modifiedFetchArgs = _context6.sent;\n                _context6.next = 5;\n                return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));\n\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function fetchWithMiddleware(_x18, _x19) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(request, callback) {\n      var agent, options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              agent = undefined;\n              options = {\n                method: 'POST',\n                body: request,\n                agent: agent,\n                headers: Object.assign({\n                  'Content-Type': 'application/json'\n                }, httpHeaders || {})\n              };\n              _context7.prev = 2;\n              too_many_requests_retries = 5;\n              waitTime = 500;\n\n            case 5:\n              if (!fetchWithMiddleware) {\n                _context7.next = 11;\n                break;\n              }\n\n              _context7.next = 8;\n              return fetchWithMiddleware(url, options);\n\n            case 8:\n              res = _context7.sent;\n              _context7.next = 14;\n              break;\n\n            case 11:\n              _context7.next = 13;\n              return fetch(url, options);\n\n            case 13:\n              res = _context7.sent;\n\n            case 14:\n              if (!(res.status !== 429\n              /* Too many requests */\n              )) {\n                _context7.next = 16;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 16:\n              if (!(disableRetryOnRateLimit === true)) {\n                _context7.next = 18;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 18:\n              too_many_requests_retries -= 1;\n\n              if (!(too_many_requests_retries === 0)) {\n                _context7.next = 21;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 21:\n              console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n              _context7.next = 24;\n              return sleep(waitTime);\n\n            case 24:\n              waitTime *= 2;\n\n            case 25:\n              _context7.next = 5;\n              break;\n\n            case 27:\n              _context7.next = 29;\n              return res.text();\n\n            case 29:\n              text = _context7.sent;\n\n              if (res.ok) {\n                callback(null, text);\n              } else {\n                callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n              }\n\n              _context7.next = 36;\n              break;\n\n            case 33:\n              _context7.prev = 33;\n              _context7.t0 = _context7[\"catch\"](2);\n              if (_context7.t0 instanceof Error) callback(_context7.t0);\n\n            case 36:\n              _context7.prev = 36;\n              return _context7.finish(36);\n\n            case 38:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[2, 33, 36, 38]]);\n    }));\n\n    return function (_x20, _x21) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nvar SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nvar GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nvar SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nvar Connection = /*#__PURE__*/function () {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, commitmentOrConfig) {\n    _classCallCheck(this, Connection);\n\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._accountChangeSubscriptionCounter = 0;\n    this._accountChangeSubscriptions = {};\n    this._programAccountChangeSubscriptionCounter = 0;\n    this._programAccountChangeSubscriptions = {};\n    this._rootSubscriptionCounter = 0;\n    this._rootSubscriptions = {};\n    this._signatureSubscriptionCounter = 0;\n    this._signatureSubscriptions = {};\n    this._slotSubscriptionCounter = 0;\n    this._slotSubscriptions = {};\n    this._logsSubscriptionCounter = 0;\n    this._logsSubscriptions = {};\n    this._slotUpdateSubscriptionCounter = 0;\n    this._slotUpdateSubscriptions = {};\n    var url = new URL(endpoint);\n    var useHttps = url.protocol === 'https:';\n    var wsEndpoint;\n    var httpHeaders;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n    /**\n     * The RPC endpoint\n     */\n\n  }, {\n    key: \"rpcEndpoint\",\n    get: function get() {\n      return this._rpcEndpoint;\n    }\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment);\n                _context8.next = 3;\n                return this._rpcRequest('getBalance', args);\n\n              case 3:\n                unsafeRes = _context8.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n                if (!('error' in res)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context8.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getBalanceAndContext(_x22, _x23) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(publicKey, commitment) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getBalanceAndContext(publicKey, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getBalance(_x24, _x25) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._rpcRequest('getBlockTime', [slot]);\n\n              case 2:\n                unsafeRes = _context10.sent;\n                res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n\n              case 6:\n                return _context10.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getBlockTime(_x26) {\n        return _getBlockTime.apply(this, arguments);\n      }\n\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._rpcRequest('minimumLedgerSlot', []);\n\n              case 2:\n                unsafeRes = _context11.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n\n              case 6:\n                return _context11.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._rpcRequest('getFirstAvailableBlock', []);\n\n              case 2:\n                unsafeRes = _context12.sent;\n                res = create(unsafeRes, SlotRpcResult);\n\n                if (!('error' in res)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get first available block: ' + res.error.message);\n\n              case 6:\n                return _context12.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(config) {\n        var configArg, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                configArg = {};\n\n                if (typeof config === 'string') {\n                  configArg = {\n                    commitment: config\n                  };\n                } else if (config) {\n                  configArg = _objectSpread(_objectSpread({}, config), {}, {\n                    commitment: config && config.commitment || this.commitment\n                  });\n                } else {\n                  configArg = {\n                    commitment: this.commitment\n                  };\n                }\n\n                _context13.next = 4;\n                return this._rpcRequest('getSupply', [configArg]);\n\n              case 4:\n                unsafeRes = _context13.sent;\n                res = create(unsafeRes, GetSupplyRpcResult);\n\n                if (!('error' in res)) {\n                  _context13.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get supply: ' + res.error.message);\n\n              case 8:\n                return _context13.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getSupply(_x27) {\n        return _getSupply.apply(this, arguments);\n      }\n\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n                _context14.next = 3;\n                return this._rpcRequest('getTokenSupply', args);\n\n              case 3:\n                unsafeRes = _context14.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token supply: ' + res.error.message);\n\n              case 7:\n                return _context14.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getTokenSupply(_x28, _x29) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                args = this._buildArgs([tokenAddress.toBase58()], commitment);\n                _context15.next = 3;\n                return this._rpcRequest('getTokenAccountBalance', args);\n\n              case 3:\n                unsafeRes = _context15.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token account balance: ' + res.error.message);\n\n              case 7:\n                return _context15.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getTokenAccountBalance(_x30, _x31) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n     */\n\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'base64');\n                _context16.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context16.sent;\n                res = create(unsafeRes, GetTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context16.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context16.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getTokenAccountsByOwner(_x32, _x33, _x34) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'jsonParsed');\n                _context17.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context17.sent;\n                res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context17.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context17.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getParsedTokenAccountsByOwner(_x35, _x36, _x37) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                arg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n                args = arg.filter || arg.commitment ? [arg] : [];\n                _context18.next = 4;\n                return this._rpcRequest('getLargestAccounts', args);\n\n              case 4:\n                unsafeRes = _context18.sent;\n                res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n                if (!('error' in res)) {\n                  _context18.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get largest accounts: ' + res.error.message);\n\n              case 8:\n                return _context18.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getLargestAccounts(_x38) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                args = this._buildArgs([mintAddress.toBase58()], commitment);\n                _context19.next = 3;\n                return this._rpcRequest('getTokenLargestAccounts', args);\n\n              case 3:\n                unsafeRes = _context19.sent;\n                res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n                if (!('error' in res)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token largest accounts: ' + res.error.message);\n\n              case 7:\n                return _context19.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getTokenLargestAccounts(_x39, _x40) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n                _context20.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context20.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context20.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getAccountInfoAndContext(_x41, _x42) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n                _context21.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context21.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context21.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context21.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getParsedAccountInfo(_x43, _x44) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(publicKey, commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.prev = 0;\n                _context22.next = 3;\n                return this.getAccountInfoAndContext(publicKey, commitment);\n\n              case 3:\n                res = _context22.sent;\n                return _context22.abrupt(\"return\", res.value);\n\n              case 7:\n                _context22.prev = 7;\n                _context22.t0 = _context22[\"catch\"](0);\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context22.t0);\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[0, 7]]);\n      }));\n\n      function getAccountInfo(_x45, _x46) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfoAndContext\",\n    value: function () {\n      var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(publicKeys, commitment) {\n        var keys, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                keys = publicKeys.map(function (key) {\n                  return key.toBase58();\n                });\n                args = this._buildArgs([keys], commitment, 'base64');\n                _context23.next = 4;\n                return this._rpcRequest('getMultipleAccounts', args);\n\n              case 4:\n                unsafeRes = _context23.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n                if (!('error' in res)) {\n                  _context23.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n\n              case 8:\n                return _context23.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getMultipleAccountsInfoAndContext(_x47, _x48) {\n        return _getMultipleAccountsInfoAndContext.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfoAndContext;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(publicKeys, commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n\n              case 2:\n                res = _context24.sent;\n                return _context24.abrupt(\"return\", res.value);\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getMultipleAccountsInfo(_x49, _x50) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(publicKey, commitment, epoch) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n                  epoch: epoch\n                } : undefined);\n                _context25.next = 3;\n                return this._rpcRequest('getStakeActivation', args);\n\n              case 3:\n                unsafeRes = _context25.sent;\n                res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n                if (!('error' in res)) {\n                  _context25.next = 7;\n                  break;\n                }\n\n                throw new Error(\"failed to get Stake Activation \".concat(publicKey.toBase58(), \": \").concat(res.error.message));\n\n              case 7:\n                return _context25.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getStakeActivation(_x51, _x52, _x53) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(programId, configOrCommitment) {\n        var extra, commitment, encoding, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n                    encoding = configOrCommitment.encoding;\n\n                    if (configOrCommitment.dataSlice) {\n                      extra.dataSlice = configOrCommitment.dataSlice;\n                    }\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n                _context26.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context26.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context26.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context26.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function getProgramAccounts(_x54, _x55) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(programId, configOrCommitment) {\n        var extra, commitment, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n                _context27.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context27.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context27.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context27.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getParsedProgramAccounts(_x56, _x57) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n\n      return getParsedProgramAccounts;\n    }()\n    /**\n     * Confirm the transaction identified by the specified signature.\n     */\n\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(signature, commitment) {\n        var _this8 = this;\n\n        var decodedSignature, start, subscriptionCommitment, subscriptionId, response, confirmPromise, timeoutMs, duration;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.prev = 0;\n                decodedSignature = bs58.decode(signature);\n                _context28.next = 7;\n                break;\n\n              case 4:\n                _context28.prev = 4;\n                _context28.t0 = _context28[\"catch\"](0);\n                throw new Error('signature must be base58 encoded: ' + signature);\n\n              case 7:\n                assert(decodedSignature.length === 64, 'signature has invalid length');\n                start = Date.now();\n                subscriptionCommitment = commitment || this.commitment;\n                response = null;\n                confirmPromise = new Promise(function (resolve, reject) {\n                  try {\n                    subscriptionId = _this8.onSignature(signature, function (result, context) {\n                      subscriptionId = undefined;\n                      response = {\n                        context: context,\n                        value: result\n                      };\n                      resolve(null);\n                    }, subscriptionCommitment);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n                timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n                _context28.t1 = subscriptionCommitment;\n                _context28.next = _context28.t1 === 'processed' ? 16 : _context28.t1 === 'recent' ? 16 : _context28.t1 === 'single' ? 16 : _context28.t1 === 'confirmed' ? 16 : _context28.t1 === 'singleGossip' ? 16 : 18;\n                break;\n\n              case 16:\n                timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n                return _context28.abrupt(\"break\", 18);\n\n              case 18:\n                _context28.prev = 18;\n                _context28.next = 21;\n                return promiseTimeout(confirmPromise, timeoutMs);\n\n              case 21:\n                _context28.prev = 21;\n\n                if (subscriptionId) {\n                  this.removeSignatureListener(subscriptionId);\n                }\n\n                return _context28.finish(21);\n\n              case 24:\n                if (!(response === null)) {\n                  _context28.next = 27;\n                  break;\n                }\n\n                duration = (Date.now() - start) / 1000;\n                throw new Error(\"Transaction was not confirmed in \".concat(duration.toFixed(2), \" seconds. It is unknown if it succeeded or failed. Check signature \").concat(signature, \" using the Solana Explorer or CLI tools.\"));\n\n              case 27:\n                return _context28.abrupt(\"return\", response);\n\n              case 28:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this, [[0, 4], [18,, 21, 24]]);\n      }));\n\n      function confirmTransaction(_x58, _x59) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n\n      return confirmTransaction;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this._rpcRequest('getClusterNodes', []);\n\n              case 2:\n                unsafeRes = _context29.sent;\n                res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n                if (!('error' in res)) {\n                  _context29.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get cluster nodes: ' + res.error.message);\n\n              case 6:\n                return _context29.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context30.next = 3;\n                return this._rpcRequest('getVoteAccounts', args);\n\n              case 3:\n                unsafeRes = _context30.sent;\n                res = create(unsafeRes, GetVoteAccounts);\n\n                if (!('error' in res)) {\n                  _context30.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get vote accounts: ' + res.error.message);\n\n              case 7:\n                return _context30.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function getVoteAccounts(_x60) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context31.next = 3;\n                return this._rpcRequest('getSlot', args);\n\n              case 3:\n                unsafeRes = _context31.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context31.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot: ' + res.error.message);\n\n              case 7:\n                return _context31.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getSlot(_x61) {\n        return _getSlot.apply(this, arguments);\n      }\n\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context32.next = 3;\n                return this._rpcRequest('getSlotLeader', args);\n\n              case 3:\n                unsafeRes = _context32.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context32.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leader: ' + res.error.message);\n\n              case 7:\n                return _context32.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getSlotLeader(_x62) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                args = [startSlot, limit];\n                _context33.next = 3;\n                return this._rpcRequest('getSlotLeaders', args);\n\n              case 3:\n                unsafeRes = _context33.sent;\n                res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n                if (!('error' in res)) {\n                  _context33.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leaders: ' + res.error.message);\n\n              case 7:\n                return _context33.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function getSlotLeaders(_x63, _x64) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.getSignatureStatuses([signature], config);\n\n              case 2:\n                _yield$this$getSignat = _context34.sent;\n                context = _yield$this$getSignat.context;\n                values = _yield$this$getSignat.value;\n                assert(values.length === 1);\n                value = values[0];\n                return _context34.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function getSignatureStatus(_x65, _x66) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                params = [signatures];\n\n                if (config) {\n                  params.push(config);\n                }\n\n                _context35.next = 4;\n                return this._rpcRequest('getSignatureStatuses', params);\n\n              case 4:\n                unsafeRes = _context35.sent;\n                res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n                if (!('error' in res)) {\n                  _context35.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get signature status: ' + res.error.message);\n\n              case 8:\n                return _context35.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function getSignatureStatuses(_x67, _x68) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context36.next = 3;\n                return this._rpcRequest('getTransactionCount', args);\n\n              case 3:\n                unsafeRes = _context36.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context36.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction count: ' + res.error.message);\n\n              case 7:\n                return _context36.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function getTransactionCount(_x69) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(commitment) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.getSupply({\n                  commitment: commitment,\n                  excludeNonCirculatingAccountsList: true\n                });\n\n              case 2:\n                result = _context37.sent;\n                return _context37.abrupt(\"return\", result.value.total);\n\n              case 4:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function getTotalSupply(_x70) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context38.next = 3;\n                return this._rpcRequest('getInflationGovernor', args);\n\n              case 3:\n                unsafeRes = _context38.sent;\n                res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n                if (!('error' in res)) {\n                  _context38.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation: ' + res.error.message);\n\n              case 7:\n                return _context38.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getInflationGovernor(_x71) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(addresses, epoch, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                args = this._buildArgs([addresses.map(function (pubkey) {\n                  return pubkey.toBase58();\n                })], commitment, undefined, {\n                  epoch: epoch\n                });\n                _context39.next = 3;\n                return this._rpcRequest('getInflationReward', args);\n\n              case 3:\n                unsafeRes = _context39.sent;\n                res = create(unsafeRes, GetInflationRewardResult);\n\n                if (!('error' in res)) {\n                  _context39.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation reward: ' + res.error.message);\n\n              case 7:\n                return _context39.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function getInflationReward(_x72, _x73, _x74) {\n        return _getInflationReward.apply(this, arguments);\n      }\n\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context40.next = 3;\n                return this._rpcRequest('getEpochInfo', args);\n\n              case 3:\n                unsafeRes = _context40.sent;\n                res = create(unsafeRes, GetEpochInfoRpcResult);\n\n                if (!('error' in res)) {\n                  _context40.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get epoch info: ' + res.error.message);\n\n              case 7:\n                return _context40.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function getEpochInfo(_x75) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                _context41.next = 2;\n                return this._rpcRequest('getEpochSchedule', []);\n\n              case 2:\n                unsafeRes = _context41.sent;\n                res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context41.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get epoch schedule: ' + res.error.message);\n\n              case 6:\n                epochSchedule = res.result;\n                return _context41.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n\n              case 8:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return this._rpcRequest('getLeaderSchedule', []);\n\n              case 2:\n                unsafeRes = _context42.sent;\n                res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context42.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get leader schedule: ' + res.error.message);\n\n              case 6:\n                return _context42.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                args = this._buildArgs([dataLength], commitment);\n                _context43.next = 3;\n                return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n\n              case 3:\n                unsafeRes = _context43.sent;\n                res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n                if (!('error' in res)) {\n                  _context43.next = 8;\n                  break;\n                }\n\n                console.warn('Unable to fetch minimum balance for rent exemption');\n                return _context43.abrupt(\"return\", 0);\n\n              case 8:\n                return _context43.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function getMinimumBalanceForRentExemption(_x76, _x77) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context44.next = 3;\n                return this._rpcRequest('getRecentBlockhash', args);\n\n              case 3:\n                unsafeRes = _context44.sent;\n                res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n                if (!('error' in res)) {\n                  _context44.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent blockhash: ' + res.error.message);\n\n              case 7:\n                return _context44.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function getRecentBlockhashAndContext(_x78) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                args = this._buildArgs(limit ? [limit] : []);\n                _context45.next = 3;\n                return this._rpcRequest('getRecentPerformanceSamples', args);\n\n              case 3:\n                unsafeRes = _context45.sent;\n                res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n                if (!('error' in res)) {\n                  _context45.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent performance samples: ' + res.error.message);\n\n              case 7:\n                return _context45.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function getRecentPerformanceSamples(_x79) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n     */\n\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                args = this._buildArgs([blockhash], commitment);\n                _context46.next = 3;\n                return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n\n              case 3:\n                unsafeRes = _context46.sent;\n                res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n                if (!('error' in res)) {\n                  _context46.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get fee calculator: ' + res.error.message);\n\n              case 7:\n                _res$result = res.result, context = _res$result.context, value = _res$result.value;\n                return _context46.abrupt(\"return\", {\n                  context: context,\n                  value: value !== null ? value.feeCalculator : null\n                });\n\n              case 9:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function getFeeCalculatorForBlockhash(_x80, _x81) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch the fee for a message from the cluster, return with context\n     */\n\n  }, {\n    key: \"getFeeForMessage\",\n    value: function () {\n      var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(message, commitment) {\n        var wireMessage, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                wireMessage = message.serialize().toString('base64');\n                args = this._buildArgs([wireMessage], commitment);\n                _context47.next = 4;\n                return this._rpcRequest('getFeeForMessage', args);\n\n              case 4:\n                unsafeRes = _context47.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context47.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get slot: ' + res.error.message);\n\n              case 8:\n                if (!(res.result === null)) {\n                  _context47.next = 10;\n                  break;\n                }\n\n                throw new Error('invalid blockhash');\n\n              case 10:\n                return _context47.abrupt(\"return\", res.result);\n\n              case 11:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function getFeeForMessage(_x82, _x83) {\n        return _getFeeForMessage.apply(this, arguments);\n      }\n\n      return getFeeForMessage;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                _context48.prev = 0;\n                _context48.next = 3;\n                return this.getRecentBlockhashAndContext(commitment);\n\n              case 3:\n                res = _context48.sent;\n                return _context48.abrupt(\"return\", res.value);\n\n              case 7:\n                _context48.prev = 7;\n                _context48.t0 = _context48[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context48.t0);\n\n              case 10:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this, [[0, 7]]);\n      }));\n\n      function getRecentBlockhash(_x84) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n     */\n\n  }, {\n    key: \"getLatestBlockhash\",\n    value: function () {\n      var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                _context49.prev = 0;\n                _context49.next = 3;\n                return this.getLatestBlockhashAndContext(commitment);\n\n              case 3:\n                res = _context49.sent;\n                return _context49.abrupt(\"return\", res.value);\n\n              case 7:\n                _context49.prev = 7;\n                _context49.t0 = _context49[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context49.t0);\n\n              case 10:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this, [[0, 7]]);\n      }));\n\n      function getLatestBlockhash(_x85) {\n        return _getLatestBlockhash.apply(this, arguments);\n      }\n\n      return getLatestBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n     */\n\n  }, {\n    key: \"getLatestBlockhashAndContext\",\n    value: function () {\n      var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context50.next = 3;\n                return this._rpcRequest('getLatestBlockhash', args);\n\n              case 3:\n                unsafeRes = _context50.sent;\n                res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n                if (!('error' in res)) {\n                  _context50.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get latest blockhash: ' + res.error.message);\n\n              case 7:\n                return _context50.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this);\n      }));\n\n      function getLatestBlockhashAndContext(_x86) {\n        return _getLatestBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getLatestBlockhashAndContext;\n    }()\n    /**\n     * Fetch the node version\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.next = 2;\n                return this._rpcRequest('getVersion', []);\n\n              case 2:\n                unsafeRes = _context51.sent;\n                res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n                if (!('error' in res)) {\n                  _context51.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get version: ' + res.error.message);\n\n              case 6:\n                return _context51.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /**\n     * Fetch the genesis hash\n     */\n\n  }, {\n    key: \"getGenesisHash\",\n    value: function () {\n      var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                _context52.next = 2;\n                return this._rpcRequest('getGenesisHash', []);\n\n              case 2:\n                unsafeRes = _context52.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context52.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get genesis hash: ' + res.error.message);\n\n              case 6:\n                return _context52.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n\n      function getGenesisHash() {\n        return _getGenesisHash.apply(this, arguments);\n      }\n\n      return getGenesisHash;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     */\n\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(slot, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n                _context53.next = 3;\n                return this._rpcRequest('getBlock', args);\n\n              case 3:\n                unsafeRes = _context53.sent;\n                res = create(unsafeRes, GetBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context53.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context53.next = 10;\n                  break;\n                }\n\n                return _context53.abrupt(\"return\", result);\n\n              case 10:\n                return _context53.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref5) {\n                    var transaction = _ref5.transaction,\n                        meta = _ref5.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n\n      function getBlock(_x87, _x88) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n    /*\n     * Returns the current block height of the node\n     */\n\n  }, {\n    key: \"getBlockHeight\",\n    value: function () {\n      var _getBlockHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context54.next = 3;\n                return this._rpcRequest('getBlockHeight', args);\n\n              case 3:\n                unsafeRes = _context54.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context54.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get block height information: ' + res.error.message);\n\n              case 7:\n                return _context54.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n\n      function getBlockHeight(_x89) {\n        return _getBlockHeight.apply(this, arguments);\n      }\n\n      return getBlockHeight;\n    }()\n    /*\n     * Returns recent block production information from the current or previous epoch\n     */\n\n  }, {\n    key: \"getBlockProduction\",\n    value: function () {\n      var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(configOrCommitment) {\n        var extra, commitment, c, rest, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                if (typeof configOrCommitment === 'string') {\n                  commitment = configOrCommitment;\n                } else if (configOrCommitment) {\n                  c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded);\n                  commitment = c;\n                  extra = rest;\n                }\n\n                args = this._buildArgs([], commitment, 'base64', extra);\n                _context55.next = 4;\n                return this._rpcRequest('getBlockProduction', args);\n\n              case 4:\n                unsafeRes = _context55.sent;\n                res = create(unsafeRes, BlockProductionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context55.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get block production information: ' + res.error.message);\n\n              case 8:\n                return _context55.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n\n      function getBlockProduction(_x90) {\n        return _getBlockProduction.apply(this, arguments);\n      }\n\n      return getBlockProduction;\n    }()\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(signature, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n                _context56.next = 3;\n                return this._rpcRequest('getTransaction', args);\n\n              case 3:\n                unsafeRes = _context56.sent;\n                res = create(unsafeRes, GetTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context56.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context56.next = 10;\n                  break;\n                }\n\n                return _context56.abrupt(\"return\", result);\n\n              case 10:\n                return _context56.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: new Message(result.transaction.message)\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n\n      function getTransaction(_x91, _x92) {\n        return _getTransaction.apply(this, arguments);\n      }\n\n      return getTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized transaction\n     */\n\n  }, {\n    key: \"getParsedTransaction\",\n    value: function () {\n      var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context57.next = 3;\n                return this._rpcRequest('getTransaction', args);\n\n              case 3:\n                unsafeRes = _context57.sent;\n                res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context57.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction: ' + res.error.message);\n\n              case 7:\n                return _context57.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      function getParsedTransaction(_x93, _x94) {\n        return _getParsedTransaction.apply(this, arguments);\n      }\n\n      return getParsedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n\n  }, {\n    key: \"getParsedTransactions\",\n    value: function () {\n      var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(signatures, commitment) {\n        var _this9 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this9._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getTransaction',\n                    args: args\n                  };\n                });\n                _context58.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context58.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new Error('failed to get transactions: ' + res.error.message);\n                  }\n\n                  return res.result;\n                });\n                return _context58.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n\n      function getParsedTransactions(_x95, _x96) {\n        return _getParsedTransactions.apply(this, arguments);\n      }\n\n      return getParsedTransactions;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(slot, commitment) {\n        var args, unsafeRes, res, result, block;\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment);\n                _context59.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context59.sent;\n                res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context59.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context59.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                block = _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref6) {\n                    var transaction = _ref6.transaction,\n                        meta = _ref6.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                });\n                return _context59.abrupt(\"return\", _objectSpread(_objectSpread({}, block), {}, {\n                  transactions: block.transactions.map(function (_ref7) {\n                    var transaction = _ref7.transaction,\n                        meta = _ref7.meta;\n                    return {\n                      meta: meta,\n                      transaction: Transaction.populate(transaction.message, transaction.signatures)\n                    };\n                  })\n                }));\n\n              case 12:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      function getConfirmedBlock(_x97, _x98) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch confirmed blocks between two slots\n     */\n\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(startSlot, endSlot, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n                _context60.next = 3;\n                return this._rpcRequest('getBlocks', args);\n\n              case 3:\n                unsafeRes = _context60.sent;\n                res = create(unsafeRes, jsonRpcResult(array(number())));\n\n                if (!('error' in res)) {\n                  _context60.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get blocks: ' + res.error.message);\n\n              case 7:\n                return _context60.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n\n      function getBlocks(_x99, _x100, _x101) {\n        return _getBlocks.apply(this, arguments);\n      }\n\n      return getBlocks;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a block, excluding rewards\n     */\n\n  }, {\n    key: \"getBlockSignatures\",\n    value: function () {\n      var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context61.next = 3;\n                return this._rpcRequest('getBlock', args);\n\n              case 3:\n                unsafeRes = _context61.sent;\n                res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context61.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context61.next = 10;\n                  break;\n                }\n\n                throw new Error('Block ' + slot + ' not found');\n\n              case 10:\n                return _context61.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n\n      function getBlockSignatures(_x102, _x103) {\n        return _getBlockSignatures.apply(this, arguments);\n      }\n\n      return getBlockSignatures;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context62.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context62.sent;\n                res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context62.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context62.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                return _context62.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62, this);\n      }));\n\n      function getConfirmedBlockSignatures(_x104, _x105) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n     */\n\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(signature, commitment) {\n        var args, unsafeRes, res, result, message, signatures;\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment);\n                _context63.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context63.sent;\n                res = create(unsafeRes, GetTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context63.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context63.next = 10;\n                  break;\n                }\n\n                return _context63.abrupt(\"return\", result);\n\n              case 10:\n                message = new Message(result.transaction.message);\n                signatures = result.transaction.signatures;\n                return _context63.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: Transaction.populate(message, signatures)\n                }));\n\n              case 13:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63, this);\n      }));\n\n      function getConfirmedTransaction(_x106, _x107) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context64.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context64.sent;\n                res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context64.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed transaction: ' + res.error.message);\n\n              case 7:\n                return _context64.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n\n      function getParsedConfirmedTransaction(_x108, _x109) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(signatures, commitment) {\n        var _this10 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this10._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getConfirmedTransaction',\n                    args: args\n                  };\n                });\n                _context65.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context65.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new Error('failed to get confirmed transactions: ' + res.error.message);\n                  }\n\n                  return res.result;\n                });\n                return _context65.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65, this);\n      }));\n\n      function getParsedConfirmedTransactions(_x110, _x111) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                options = {};\n                _context66.next = 3;\n                return this.getFirstAvailableBlock();\n\n              case 3:\n                firstAvailableBlock = _context66.sent;\n\n              case 4:\n                if ('until' in options) {\n                  _context66.next = 24;\n                  break;\n                }\n\n                startSlot--;\n\n                if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                  _context66.next = 8;\n                  break;\n                }\n\n                return _context66.abrupt(\"break\", 24);\n\n              case 8:\n                _context66.prev = 8;\n                _context66.next = 11;\n                return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n              case 11:\n                block = _context66.sent;\n\n                if (block.signatures.length > 0) {\n                  options.until = block.signatures[block.signatures.length - 1].toString();\n                }\n\n                _context66.next = 22;\n                break;\n\n              case 15:\n                _context66.prev = 15;\n                _context66.t0 = _context66[\"catch\"](8);\n\n                if (!(_context66.t0 instanceof Error && _context66.t0.message.includes('skipped'))) {\n                  _context66.next = 21;\n                  break;\n                }\n\n                return _context66.abrupt(\"continue\", 4);\n\n              case 21:\n                throw _context66.t0;\n\n              case 22:\n                _context66.next = 4;\n                break;\n\n              case 24:\n                _context66.next = 26;\n                return this.getSlot('finalized');\n\n              case 26:\n                highestConfirmedRoot = _context66.sent;\n\n              case 27:\n                if ('before' in options) {\n                  _context66.next = 47;\n                  break;\n                }\n\n                endSlot++;\n\n                if (!(endSlot > highestConfirmedRoot)) {\n                  _context66.next = 31;\n                  break;\n                }\n\n                return _context66.abrupt(\"break\", 47);\n\n              case 31:\n                _context66.prev = 31;\n                _context66.next = 34;\n                return this.getConfirmedBlockSignatures(endSlot);\n\n              case 34:\n                _block = _context66.sent;\n\n                if (_block.signatures.length > 0) {\n                  options.before = _block.signatures[_block.signatures.length - 1].toString();\n                }\n\n                _context66.next = 45;\n                break;\n\n              case 38:\n                _context66.prev = 38;\n                _context66.t1 = _context66[\"catch\"](31);\n\n                if (!(_context66.t1 instanceof Error && _context66.t1.message.includes('skipped'))) {\n                  _context66.next = 44;\n                  break;\n                }\n\n                return _context66.abrupt(\"continue\", 27);\n\n              case 44:\n                throw _context66.t1;\n\n              case 45:\n                _context66.next = 27;\n                break;\n\n              case 47:\n                _context66.next = 49;\n                return this.getConfirmedSignaturesForAddress2(address, options);\n\n              case 49:\n                confirmedSignatureInfo = _context66.sent;\n                return _context66.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                  return info.signature;\n                }));\n\n              case 51:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this, [[8, 15], [31, 38]]);\n      }));\n\n      function getConfirmedSignaturesForAddress(_x112, _x113, _x114) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context67.next = 3;\n                return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n\n              case 3:\n                unsafeRes = _context67.sent;\n                res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n                if (!('error' in res)) {\n                  _context67.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n\n              case 7:\n                return _context67.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67, this);\n      }));\n\n      function getConfirmedSignaturesForAddress2(_x115, _x116, _x117) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context68.next = 3;\n                return this._rpcRequest('getSignaturesForAddress', args);\n\n              case 3:\n                unsafeRes = _context68.sent;\n                res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n                if (!('error' in res)) {\n                  _context68.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get signatures for address: ' + res.error.message);\n\n              case 7:\n                return _context68.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n\n      function getSignaturesForAddress(_x118, _x119, _x120) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getSignaturesForAddress;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(nonceAccount, commitment) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                _context69.next = 2;\n                return this.getAccountInfoAndContext(nonceAccount, commitment);\n\n              case 2:\n                _yield$this$getAccoun = _context69.sent;\n                context = _yield$this$getAccoun.context;\n                accountInfo = _yield$this$getAccoun.value;\n                value = null;\n\n                if (accountInfo !== null) {\n                  value = NonceAccount.fromAccountData(accountInfo.data);\n                }\n\n                return _context69.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this);\n      }));\n\n      function getNonceAndContext(_x121, _x122) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(nonceAccount, commitment) {\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                _context70.next = 2;\n                return this.getNonceAndContext(nonceAccount, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context70.abrupt(\"return\", _context70.sent);\n\n              case 3:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function getNonce(_x123, _x124) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                _context71.next = 2;\n                return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n\n              case 2:\n                unsafeRes = _context71.sent;\n                res = create(unsafeRes, RequestAirdropRpcResult);\n\n                if (!('error' in res)) {\n                  _context71.next = 6;\n                  break;\n                }\n\n                throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n\n              case 6:\n                return _context71.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function requestAirdrop(_x125, _x126) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_recentBlockhash\",\n    value: function () {\n      var _recentBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                if (disableCache) {\n                  _context72.next = 10;\n                  break;\n                }\n\n              case 1:\n                if (!this._pollingBlockhash) {\n                  _context72.next = 6;\n                  break;\n                }\n\n                _context72.next = 4;\n                return sleep(100);\n\n              case 4:\n                _context72.next = 1;\n                break;\n\n              case 6:\n                timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n                expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n                if (!(this._blockhashInfo.recentBlockhash !== null && !expired)) {\n                  _context72.next = 10;\n                  break;\n                }\n\n                return _context72.abrupt(\"return\", this._blockhashInfo.recentBlockhash);\n\n              case 10:\n                _context72.next = 12;\n                return this._pollNewBlockhash();\n\n              case 12:\n                return _context72.abrupt(\"return\", _context72.sent);\n\n              case 13:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function _recentBlockhash(_x127) {\n        return _recentBlockhash2.apply(this, arguments);\n      }\n\n      return _recentBlockhash;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73() {\n        var startTime, i, _yield$this$getRecent, blockhash;\n\n        return _regeneratorRuntime.wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                this._pollingBlockhash = true;\n                _context73.prev = 1;\n                startTime = Date.now();\n                i = 0;\n\n              case 4:\n                if (!(i < 50)) {\n                  _context73.next = 17;\n                  break;\n                }\n\n                _context73.next = 7;\n                return this.getRecentBlockhash('finalized');\n\n              case 7:\n                _yield$this$getRecent = _context73.sent;\n                blockhash = _yield$this$getRecent.blockhash;\n\n                if (!(this._blockhashInfo.recentBlockhash != blockhash)) {\n                  _context73.next = 12;\n                  break;\n                }\n\n                this._blockhashInfo = {\n                  recentBlockhash: blockhash,\n                  lastFetch: Date.now(),\n                  transactionSignatures: [],\n                  simulatedSignatures: []\n                };\n                return _context73.abrupt(\"return\", blockhash);\n\n              case 12:\n                _context73.next = 14;\n                return sleep(MS_PER_SLOT / 2);\n\n              case 14:\n                i++;\n                _context73.next = 4;\n                break;\n\n              case 17:\n                throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n\n              case 18:\n                _context73.prev = 18;\n                this._pollingBlockhash = false;\n                return _context73.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n        }, _callee73, this, [[1,, 18, 21]]);\n      }));\n\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n\n      return _pollNewBlockhash;\n    }()\n    /**\n     * Simulate a transaction\n     */\n\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(transactionOrMessage, signers, includeAccounts) {\n        var transaction, _transaction3, disableCache, _transaction4, signature, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;\n\n        return _regeneratorRuntime.wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                if (transactionOrMessage instanceof Transaction) {\n                  transaction = transactionOrMessage;\n                } else {\n                  transaction = Transaction.populate(transactionOrMessage);\n                }\n\n                if (!(transaction.nonceInfo && signers)) {\n                  _context74.next = 5;\n                  break;\n                }\n\n                (_transaction3 = transaction).sign.apply(_transaction3, _toConsumableArray(signers));\n\n                _context74.next = 23;\n                break;\n\n              case 5:\n                disableCache = this._disableBlockhashCaching;\n\n              case 6:\n                _context74.next = 8;\n                return this._recentBlockhash(disableCache);\n\n              case 8:\n                transaction.recentBlockhash = _context74.sent;\n\n                if (signers) {\n                  _context74.next = 11;\n                  break;\n                }\n\n                return _context74.abrupt(\"break\", 23);\n\n              case 11:\n                (_transaction4 = transaction).sign.apply(_transaction4, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context74.next = 14;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 14:\n                signature = transaction.signature.toString('base64');\n\n                if (!(!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature))) {\n                  _context74.next = 20;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.simulatedSignatures.push(signature);\n\n                return _context74.abrupt(\"break\", 23);\n\n              case 20:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 21:\n                _context74.next = 6;\n                break;\n\n              case 23:\n                message = transaction._compile();\n                signData = message.serialize();\n                wireTransaction = transaction._serialize(signData);\n                encodedTransaction = wireTransaction.toString('base64');\n                config = {\n                  encoding: 'base64',\n                  commitment: this.commitment\n                };\n\n                if (includeAccounts) {\n                  addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n                    return key.toBase58();\n                  });\n                  config['accounts'] = {\n                    encoding: 'base64',\n                    addresses: addresses\n                  };\n                }\n\n                if (signers) {\n                  config.sigVerify = true;\n                }\n\n                args = [encodedTransaction, config];\n                _context74.next = 33;\n                return this._rpcRequest('simulateTransaction', args);\n\n              case 33:\n                unsafeRes = _context74.sent;\n                res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context74.next = 38;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n\n                  if (logs && Array.isArray(logs)) {\n                    traceIndent = '\\n    ';\n                    logTrace = traceIndent + logs.join(traceIndent);\n                    console.error(res.error.message, logTrace);\n                  }\n                }\n\n                throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n\n              case 38:\n                return _context74.abrupt(\"return\", res.result);\n\n              case 39:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n\n      function simulateTransaction(_x128, _x129, _x130) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(transaction, signers, options) {\n        var disableCache, signature, wireTransaction;\n        return _regeneratorRuntime.wrap(function _callee75$(_context75) {\n          while (1) {\n            switch (_context75.prev = _context75.next) {\n              case 0:\n                if (!transaction.nonceInfo) {\n                  _context75.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context75.next = 20;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context75.next = 7;\n                return this._recentBlockhash(disableCache);\n\n              case 7:\n                transaction.recentBlockhash = _context75.sent;\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context75.next = 11;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 11:\n                signature = transaction.signature.toString('base64');\n\n                if (this._blockhashInfo.transactionSignatures.includes(signature)) {\n                  _context75.next = 17;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.transactionSignatures.push(signature);\n\n                return _context75.abrupt(\"break\", 20);\n\n              case 17:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 18:\n                _context75.next = 5;\n                break;\n\n              case 20:\n                wireTransaction = transaction.serialize();\n                _context75.next = 23;\n                return this.sendRawTransaction(wireTransaction, options);\n\n              case 23:\n                return _context75.abrupt(\"return\", _context75.sent);\n\n              case 24:\n              case \"end\":\n                return _context75.stop();\n            }\n          }\n        }, _callee75, this);\n      }));\n\n      function sendTransaction(_x131, _x132, _x133) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime.wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                encodedTransaction = toBuffer(rawTransaction).toString('base64');\n                _context76.next = 3;\n                return this.sendEncodedTransaction(encodedTransaction, options);\n\n              case 3:\n                result = _context76.sent;\n                return _context76.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, this);\n      }));\n\n      function sendRawTransaction(_x134, _x135) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs;\n        return _regeneratorRuntime.wrap(function _callee77$(_context77) {\n          while (1) {\n            switch (_context77.prev = _context77.next) {\n              case 0:\n                config = {\n                  encoding: 'base64'\n                };\n                skipPreflight = options && options.skipPreflight;\n                preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n                if (options && options.maxRetries) {\n                  config.maxRetries = options.maxRetries;\n                }\n\n                if (skipPreflight) {\n                  config.skipPreflight = skipPreflight;\n                }\n\n                if (preflightCommitment) {\n                  config.preflightCommitment = preflightCommitment;\n                }\n\n                args = [encodedTransaction, config];\n                _context77.next = 9;\n                return this._rpcRequest('sendTransaction', args);\n\n              case 9:\n                unsafeRes = _context77.sent;\n                res = create(unsafeRes, SendTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context77.next = 14;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n                }\n\n                throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n\n              case 14:\n                return _context77.abrupt(\"return\", res.result);\n\n              case 15:\n              case \"end\":\n                return _context77.stop();\n            }\n          }\n        }, _callee77, this);\n      }));\n\n      function sendEncodedTransaction(_x136, _x137) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this11 = this;\n\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _this11._rpcWebSocket.notify('ping').catch(function () {});\n      }, 5000);\n\n      this._updateSubscriptions();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      console.error('ws error:', err.message);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n\n        return;\n      } // implicit close, prepare subscriptions for auto-reconnect\n\n\n      this._resetSubscriptions();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function () {\n      var _subscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee78(sub, rpcMethod, rpcArgs) {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee78$(_context78) {\n          while (1) {\n            switch (_context78.prev = _context78.next) {\n              case 0:\n                if (!(sub.subscriptionId == null)) {\n                  _context78.next = 13;\n                  break;\n                }\n\n                sub.subscriptionId = 'subscribing';\n                _context78.prev = 2;\n                _context78.next = 5;\n                return this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n              case 5:\n                id = _context78.sent;\n\n                if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n                  // eslint-disable-next-line require-atomic-updates\n                  sub.subscriptionId = id;\n                }\n\n                _context78.next = 13;\n                break;\n\n              case 9:\n                _context78.prev = 9;\n                _context78.t0 = _context78[\"catch\"](2);\n\n                if (sub.subscriptionId === 'subscribing') {\n                  // eslint-disable-next-line require-atomic-updates\n                  sub.subscriptionId = null;\n                }\n\n                if (_context78.t0 instanceof Error) {\n                  console.error(\"\".concat(rpcMethod, \" error for argument\"), rpcArgs, _context78.t0.message);\n                }\n\n              case 13:\n              case \"end\":\n                return _context78.stop();\n            }\n          }\n        }, _callee78, this, [[2, 9]]);\n      }));\n\n      function _subscribe(_x138, _x139, _x140) {\n        return _subscribe2.apply(this, arguments);\n      }\n\n      return _subscribe;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _unsubscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee79(sub, rpcMethod) {\n        var subscriptionId, unsubscribeId;\n        return _regeneratorRuntime.wrap(function _callee79$(_context79) {\n          while (1) {\n            switch (_context79.prev = _context79.next) {\n              case 0:\n                subscriptionId = sub.subscriptionId;\n\n                if (!(subscriptionId != null && typeof subscriptionId != 'string')) {\n                  _context79.next = 11;\n                  break;\n                }\n\n                unsubscribeId = subscriptionId;\n                _context79.prev = 3;\n                _context79.next = 6;\n                return this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n\n              case 6:\n                _context79.next = 11;\n                break;\n\n              case 8:\n                _context79.prev = 8;\n                _context79.t0 = _context79[\"catch\"](3);\n\n                if (_context79.t0 instanceof Error) {\n                  console.error(\"\".concat(rpcMethod, \" error:\"), _context79.t0.message);\n                }\n\n              case 11:\n              case \"end\":\n                return _context79.stop();\n            }\n          }\n        }, _callee79, this, [[3, 8]]);\n      }));\n\n      function _unsubscribe(_x141, _x142) {\n        return _unsubscribe2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_resetSubscriptions\",\n    value: function _resetSubscriptions() {\n      Object.values(this._accountChangeSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._programAccountChangeSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._rootSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._signatureSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._slotSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._slotUpdateSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function _updateSubscriptions() {\n      var _this12 = this;\n\n      var accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n      var programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n      var slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n      var slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n      var signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n      var rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n      var logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n\n      if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n        if (this._rpcWebSocketConnected) {\n          this._rpcWebSocketConnected = false;\n          this._rpcWebSocketIdleTimeout = setTimeout(function () {\n            _this12._rpcWebSocketIdleTimeout = null;\n\n            try {\n              _this12._rpcWebSocket.close();\n            } catch (err) {\n              // swallow error if socket has already been closed.\n              if (err instanceof Error) {\n                console.log(\"Error when closing socket connection: \".concat(err.message));\n              }\n            }\n          }, 500);\n        }\n\n        return;\n      }\n\n      if (this._rpcWebSocketIdleTimeout !== null) {\n        clearTimeout(this._rpcWebSocketIdleTimeout);\n        this._rpcWebSocketIdleTimeout = null;\n        this._rpcWebSocketConnected = true;\n      }\n\n      if (!this._rpcWebSocketConnected) {\n        this._rpcWebSocket.connect();\n\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(accountKeys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var id = _step3.value;\n          var sub = this._accountChangeSubscriptions[id];\n\n          this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(programKeys),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _id = _step4.value;\n          var _sub = this._programAccountChangeSubscriptions[_id];\n\n          this._subscribe(_sub, 'programSubscribe', this._buildArgs([_sub.programId], _sub.commitment, 'base64', {\n            filters: _sub.filters\n          }));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(slotKeys),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _id2 = _step5.value;\n          var _sub2 = this._slotSubscriptions[_id2];\n\n          this._subscribe(_sub2, 'slotSubscribe', []);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(slotUpdateKeys),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _id3 = _step6.value;\n          var _sub3 = this._slotUpdateSubscriptions[_id3];\n\n          this._subscribe(_sub3, 'slotsUpdatesSubscribe', []);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(signatureKeys),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _id4 = _step7.value;\n          var _sub4 = this._signatureSubscriptions[_id4];\n          var args = [_sub4.signature];\n          if (_sub4.options) args.push(_sub4.options);\n\n          this._subscribe(_sub4, 'signatureSubscribe', args);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(rootKeys),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _id5 = _step8.value;\n          var _sub5 = this._rootSubscriptions[_id5];\n\n          this._subscribe(_sub5, 'rootSubscribe', []);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(logsKeys),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _id6 = _step9.value;\n          var _sub6 = this._logsSubscriptions[_id6];\n          var filter = void 0;\n\n          if (typeof _sub6.filter === 'object') {\n            filter = {\n              mentions: [_sub6.filter.toString()]\n            };\n          } else {\n            filter = _sub6.filter;\n          }\n\n          this._subscribe(_sub6, 'logsSubscribe', this._buildArgs([filter], _sub6.commitment));\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var res = create(notification, AccountNotificationResult);\n\n      for (var _i5 = 0, _Object$values = Object.values(this._accountChangeSubscriptions); _i5 < _Object$values.length; _i5++) {\n        var sub = _Object$values[_i5];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result.value, res.result.context);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var id = ++this._accountChangeSubscriptionCounter;\n      this._accountChangeSubscriptions[id] = {\n        publicKey: publicKey.toBase58(),\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee80(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee80$(_context80) {\n          while (1) {\n            switch (_context80.prev = _context80.next) {\n              case 0:\n                if (!this._accountChangeSubscriptions[id]) {\n                  _context80.next = 8;\n                  break;\n                }\n\n                subInfo = this._accountChangeSubscriptions[id];\n                delete this._accountChangeSubscriptions[id];\n                _context80.next = 5;\n                return this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context80.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown account change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context80.stop();\n            }\n          }\n        }, _callee80, this);\n      }));\n\n      function removeAccountChangeListener(_x143) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var res = create(notification, ProgramAccountNotificationResult);\n\n      for (var _i6 = 0, _Object$values2 = Object.values(this._programAccountChangeSubscriptions); _i6 < _Object$values2.length; _i6++) {\n        var sub = _Object$values2[_i6];\n\n        if (sub.subscriptionId === res.subscription) {\n          var _res$result2 = res.result,\n              value = _res$result2.value,\n              context = _res$result2.context;\n          sub.callback({\n            accountId: value.pubkey,\n            accountInfo: value.account\n          }, context);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var id = ++this._programAccountChangeSubscriptionCounter;\n      this._programAccountChangeSubscriptions[id] = {\n        programId: programId.toBase58(),\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null,\n        filters: filters\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee81(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee81$(_context81) {\n          while (1) {\n            switch (_context81.prev = _context81.next) {\n              case 0:\n                if (!this._programAccountChangeSubscriptions[id]) {\n                  _context81.next = 8;\n                  break;\n                }\n\n                subInfo = this._programAccountChangeSubscriptions[id];\n                delete this._programAccountChangeSubscriptions[id];\n                _context81.next = 5;\n                return this._unsubscribe(subInfo, 'programUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context81.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown program account change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context81.stop();\n            }\n          }\n        }, _callee81, this);\n      }));\n\n      function removeProgramAccountChangeListener(_x144) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var id = ++this._logsSubscriptionCounter;\n      this._logsSubscriptions[id] = {\n        filter: filter,\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id subscription id to deregister.\n     */\n\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee82(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee82$(_context82) {\n          while (1) {\n            switch (_context82.prev = _context82.next) {\n              case 0:\n                if (this._logsSubscriptions[id]) {\n                  _context82.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Unknown logs id: \".concat(id));\n\n              case 2:\n                subInfo = this._logsSubscriptions[id];\n                delete this._logsSubscriptions[id];\n                _context82.next = 6;\n                return this._unsubscribe(subInfo, 'logsUnsubscribe');\n\n              case 6:\n                this._updateSubscriptions();\n\n              case 7:\n              case \"end\":\n                return _context82.stop();\n            }\n          }\n        }, _callee82, this);\n      }));\n\n      function removeOnLogsListener(_x145) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var res = create(notification, LogsNotificationResult);\n      var keys = Object.keys(this._logsSubscriptions).map(Number);\n\n      var _iterator10 = _createForOfIteratorHelper(keys),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var id = _step10.value;\n          var sub = this._logsSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            sub.callback(res.result.value, res.result.context);\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var res = create(notification, SlotNotificationResult);\n\n      for (var _i7 = 0, _Object$values3 = Object.values(this._slotSubscriptions); _i7 < _Object$values3.length; _i7++) {\n        var sub = _Object$values3[_i7];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      var id = ++this._slotSubscriptionCounter;\n      this._slotSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee83(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee83$(_context83) {\n          while (1) {\n            switch (_context83.prev = _context83.next) {\n              case 0:\n                if (!this._slotSubscriptions[id]) {\n                  _context83.next = 8;\n                  break;\n                }\n\n                subInfo = this._slotSubscriptions[id];\n                delete this._slotSubscriptions[id];\n                _context83.next = 5;\n                return this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context83.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown slot change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context83.stop();\n            }\n          }\n        }, _callee83, this);\n      }));\n\n      function removeSlotChangeListener(_x146) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var res = create(notification, SlotUpdateNotificationResult);\n\n      for (var _i8 = 0, _Object$values4 = Object.values(this._slotUpdateSubscriptions); _i8 < _Object$values4.length; _i8++) {\n        var sub = _Object$values4[_i8];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      var id = ++this._slotUpdateSubscriptionCounter;\n      this._slotUpdateSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee84(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee84$(_context84) {\n          while (1) {\n            switch (_context84.prev = _context84.next) {\n              case 0:\n                if (!this._slotUpdateSubscriptions[id]) {\n                  _context84.next = 8;\n                  break;\n                }\n\n                subInfo = this._slotUpdateSubscriptions[id];\n                delete this._slotUpdateSubscriptions[id];\n                _context84.next = 5;\n                return this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context84.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown slot update id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context84.stop();\n            }\n          }\n        }, _callee84, this);\n      }));\n\n      function removeSlotUpdateListener(_x147) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n\n      return removeSlotUpdateListener;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment || encoding || extra) {\n        var options = {};\n\n        if (encoding) {\n          options.encoding = encoding;\n        }\n\n        if (commitment) {\n          options.commitment = commitment;\n        }\n\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n\n        args.push(options);\n      }\n\n      return args;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n\n      return this._buildArgs(args, override, encoding, extra);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var res = create(notification, SignatureNotificationResult);\n\n      for (var _i9 = 0, _Object$entries2 = Object.entries(this._signatureSubscriptions); _i9 < _Object$entries2.length; _i9++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i9], 2),\n            id = _Object$entries2$_i[0],\n            sub = _Object$entries2$_i[1];\n\n        if (sub.subscriptionId === res.subscription) {\n          if (res.result.value === 'receivedSignature') {\n            sub.callback({\n              type: 'received'\n            }, res.result.context);\n          } else {\n            // Signatures subscriptions are auto-removed by the RPC service so\n            // no need to explicitly send an unsubscribe message\n            delete this._signatureSubscriptions[Number(id)];\n\n            this._updateSubscriptions();\n\n            sub.callback({\n              type: 'status',\n              result: res.result.value\n            }, res.result.context);\n          }\n\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var id = ++this._signatureSubscriptionCounter;\n      this._signatureSubscriptions[id] = {\n        signature: signature,\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context);\n          }\n        },\n        options: {\n          commitment: commitment\n        },\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, callback, options) {\n      var id = ++this._signatureSubscriptionCounter;\n      this._signatureSubscriptions[id] = {\n        signature: signature,\n        callback: callback,\n        options: options,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee85(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee85$(_context85) {\n          while (1) {\n            switch (_context85.prev = _context85.next) {\n              case 0:\n                if (!this._signatureSubscriptions[id]) {\n                  _context85.next = 8;\n                  break;\n                }\n\n                subInfo = this._signatureSubscriptions[id];\n                delete this._signatureSubscriptions[id];\n                _context85.next = 5;\n                return this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context85.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown signature result id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context85.stop();\n            }\n          }\n        }, _callee85, this);\n      }));\n\n      function removeSignatureListener(_x148) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var res = create(notification, RootNotificationResult);\n\n      for (var _i10 = 0, _Object$values5 = Object.values(this._rootSubscriptions); _i10 < _Object$values5.length; _i10++) {\n        var sub = _Object$values5[_i10];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      var id = ++this._rootSubscriptionCounter;\n      this._rootSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee86(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee86$(_context86) {\n          while (1) {\n            switch (_context86.prev = _context86.next) {\n              case 0:\n                if (!this._rootSubscriptions[id]) {\n                  _context86.next = 8;\n                  break;\n                }\n\n                subInfo = this._rootSubscriptions[id];\n                delete this._rootSubscriptions[id];\n                _context86.next = 5;\n                return this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context86.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown root change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context86.stop();\n            }\n          }\n        }, _callee86, this);\n      }));\n\n      function removeRootChangeListener(_x149) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n\n      return removeRootChangeListener;\n    }()\n  }]);\n\n  return Connection;\n}();\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     */\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The raw secret key for this keypair\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return this._keypair.secretKey;\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(nacl.sign.keyPair());\n    }\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options: skip secret key validation\n     */\n\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      var keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n      if (!options || !options.skipValidation) {\n        var encoder = new TextEncoder();\n        var signData = encoder.encode('@solana/web3.js-validation-v1');\n        var signature = nacl.sign.detached(signData, keypair.secretKey);\n\n        if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n\n      return new Keypair(keypair);\n    }\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     */\n\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n    }\n  }]);\n\n  return Keypair;\n}();\n\nvar PRIVATE_KEY_BYTES$1 = 64;\nvar PUBLIC_KEY_BYTES$1 = 32;\nvar SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nvar ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nvar Ed25519Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Ed25519Program() {\n    _classCallCheck(this, Ed25519Program);\n  }\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  _createClass(Ed25519Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          instructionIndex = params.instructionIndex;\n      assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n      var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n      var signatureOffset = publicKeyOffset + publicKey.length;\n      var messageDataOffset = signatureOffset + signature.length;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(messageDataOffset + message.length);\n      var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n      : instructionIndex;\n      ED25519_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        padding: 0,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset: publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index\n      }, instructionData);\n      instructionData.fill(publicKey, publicKeyOffset);\n      instructionData.fill(signature, signatureOffset);\n      instructionData.fill(message, messageDataOffset);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Ed25519Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an ed25519 instruction with a private key. The private key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n\n      try {\n        var keypair = Keypair.fromSecretKey(privateKey);\n\n        var _publicKey2 = keypair.publicKey.toBytes();\n\n        var signature = nacl.sign.detached(message, keypair.secretKey);\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey2,\n          message: message,\n          signature: signature,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Ed25519Program;\n}();\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nvar Authorized = /*#__PURE__*/_createClass(\n/** stake authority */\n\n/** withdraw authority */\n\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n\n  this.staker = void 0;\n  this.withdrawer = void 0;\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n});\n/**\n * Stake account lockup info\n */\n\n\nvar Lockup = /*#__PURE__*/_createClass(\n/** Unix timestamp of lockup expiration */\n\n/** Epoch of lockup expiration */\n\n/** Lockup custodian authority */\n\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n\n  this.unixTimestamp = void 0;\n  this.epoch = void 0;\n  this.custodian = void 0;\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n/**\n * Default, inactive Lockup value\n */\n);\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i11 = 0, _Object$entries3 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i11 < _Object$entries3.length; _i11++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i11], 2),\n            ixType = _Object$entries3$_i[0],\n            layout = _Object$entries3$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData12 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n          authorized = _decodeData12.authorized,\n          lockup = _decodeData12.lockup;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData13 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData13.newAuthorized,\n          stakeAuthorizationType = _decodeData13.stakeAuthorizationType;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData14 = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n          newAuthorized = _decodeData14.newAuthorized,\n          stakeAuthorizationType = _decodeData14.stakeAuthorizationType,\n          authoritySeed = _decodeData14.authoritySeed,\n          authorityOwner = _decodeData14.authorityOwner;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData15 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n          lamports = _decodeData15.lamports;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData16 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData16.lamports;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup.default;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorityBase = params.authorityBase,\n          authoritySeed = params.authoritySeed,\n          authorityOwner = params.authorityOwner,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"splitInstruction\",\n    value: function splitInstruction(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          lamports = params.lamports;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction(params));\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another account\n     * derived from a base public key and seed\n     */\n\n  }, {\n    key: \"splitWithSeed\",\n    value: function splitWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          basePubkey = params.basePubkey,\n          seed = params.seed,\n          lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey: basePubkey,\n        seed: seed,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction({\n        stakePubkey: stakePubkey,\n        authorizedPubkey: authorizedPubkey,\n        splitStakePubkey: splitStakePubkey,\n        lamports: lamports\n      }));\n    }\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n          sourceStakePubKey = params.sourceStakePubKey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          toPubkey = params.toPubkey,\n          lamports = params.lamports,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return StakeProgram;\n}();\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nvar publicKeyCreate = secp256k1.publicKeyCreate,\n    ecdsaSign = secp256k1.ecdsaSign;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value: function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n\n      try {\n        return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          _params$instructionIn = params.instructionIndex,\n          instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n\n      try {\n        var privateKey = toBuffer(pkey);\n\n        var _publicKey3 = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n\n        var messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n            signature = _ecdsaSign.signature,\n            recoveryId = _ecdsaSign.recid;\n\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey3,\n          message: message,\n          signature: signature,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Secp256k1Program;\n}();\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var PUBKEY_LENGTH = 32;\n\n      var byteArray = _toConsumableArray(buffer);\n\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n\n      for (var i = 0; i < 2; i++) {\n        var _publicKey4 = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: _publicKey4,\n          isSigner: isSigner\n        });\n      }\n\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$7(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return ValidatorInfo;\n}();\n\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var versionOffset = 4;\n      var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n      var rootSlot = va.rootSlot;\n\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n        priorVoters: getPriorVoters(va.priorVoters),\n        epochCredits: va.epochCredits,\n        lastTimestamp: va.lastTimestamp\n      });\n    }\n  }]);\n\n  return VoteAccount;\n}();\n\nfunction parseAuthorizedVoter(_ref8) {\n  var authorizedVoter = _ref8.authorizedVoter,\n      epoch = _ref8.epoch;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref9) {\n  var authorizedPubkey = _ref9.authorizedPubkey,\n      epochOfLastAuthorizedSwitch = _ref9.epochOfLastAuthorizedSwitch,\n      targetEpoch = _ref9.targetEpoch;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref10) {\n  var buf = _ref10.buf,\n      idx = _ref10.idx,\n      isEmpty = _ref10.isEmpty;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));\n}\n/**\n * Vote account info\n */\n\n\nvar VoteInit = /*#__PURE__*/_createClass(\n/** [0, 100] */\nfunction VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n  _classCallCheck(this, VoteInit);\n\n  this.nodePubkey = void 0;\n  this.authorizedVoter = void 0;\n  this.authorizedWithdrawer = void 0;\n  this.commission = void 0;\n  this.nodePubkey = nodePubkey;\n  this.authorizedVoter = authorizedVoter;\n  this.authorizedWithdrawer = authorizedWithdrawer;\n  this.commission = commission;\n});\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nvar VoteInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteInstruction() {\n    _classCallCheck(this, VoteInstruction);\n  }\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(VoteInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i12 = 0, _Object$entries4 = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i12 < _Object$entries4.length; _i12++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i12], 2),\n            ixType = _Object$entries4$_i[0],\n            layout = _Object$entries4$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a VoteInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode an initialize vote instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitializeAccount\",\n    value: function decodeInitializeAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 4);\n\n      var _decodeData17 = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),\n          voteInit = _decodeData17.voteInit;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        nodePubkey: instruction.keys[3].pubkey,\n        voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n      };\n    }\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData18 = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData18.newAuthorized,\n          voteAuthorizationType = _decodeData18.voteAuthorizationType;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        }\n      };\n    }\n    /**\n     * Decode a withdraw instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData19 = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData19.lamports;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        toPubkey: instruction.keys[1].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(VoteProgram.programId)) {\n        throw new Error('invalid instruction; programId is not VoteProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return VoteInstruction;\n}();\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nvar VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nvar VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nvar VoteProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteProgram() {\n    _classCallCheck(this, VoteProgram);\n  }\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  _createClass(VoteProgram, null, [{\n    key: \"initializeAccount\",\n    value: function initializeAccount(params) {\n      var votePubkey = params.votePubkey,\n          nodePubkey = params.nodePubkey,\n          voteInit = params.voteInit;\n      var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n      var data = encodeData(type, {\n        voteInit: {\n          nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n          authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n          authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n          commission: voteInit.commission\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: nodePubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction that creates a new Vote account.\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit\n      }));\n    }\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var votePubkey = params.votePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          voteAuthorizationType = params.voteAuthorizationType;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction to withdraw from a Vote account.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var votePubkey = params.votePubkey,\n          authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,\n          lamports = params.lamports,\n          toPubkey = params.toPubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedWithdrawerPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return VoteProgram;\n}();\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nfunction sendAndConfirmRawTransaction(_x150, _x151, _x152) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee88(connection, rawTransaction, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee88$(_context88) {\n      while (1) {\n        switch (_context88.prev = _context88.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context88.next = 3;\n            return connection.sendRawTransaction(rawTransaction, sendOptions);\n\n          case 3:\n            signature = _context88.sent;\n            _context88.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context88.sent.value;\n\n            if (!status.err) {\n              _context88.next = 9;\n              break;\n            }\n\n            throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context88.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context88.stop();\n        }\n      }\n    }, _callee88);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  var url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browserModule","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","require$$1","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","utils","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","concat","_update","digest","_pad","_digest","pad","bytes","t","ft_1","s","x","y","z","ch32","p32","maj32","s0_256","s1_256","g0_256","g1_256","common","shaCommon","require$$2","sha1_K","SHA1","call","h","W","_1","require$$3","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","sha512_K","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","SHA384","_384","require$$4","RIPEMD160","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","defineProperty","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","checkSafeUint53","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","decode","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","nonce","seedsWithNonce","createProgramAddress","address","err","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","layout","item","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signatures","feePayer","nonceInfo","signature","add","items","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","status","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","entries","SYSTEM_INSTRUCTION_LAYOUTS","ixType","checkKeyLength","Create","lamports","space","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","AllocateWithSeed","base","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","global","self","this","__self__","F","fetch","DOMException","support","searchParams","iterable","Symbol","Blob","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","oldValue","get","hasOwnProperty","callback","thisArg","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","view","bufferClone","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","then","text","json","parse","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","credentials","mode","signal","referrer","clone","trim","split","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","Response","bodyInit","ok","statusText","response","redirectStatuses","redirect","RangeError","location","stack","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","makeWebsocketUrl","endpoint","URL","useHttps","protocol","host","port","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","modifiedUrl","modifiedOptions","modifiedFetchArgs","clientBrowser","RpcClient","agent","too_many_requests_retries","waitTime","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","decodedSignature","Date","now","subscriptionCommitment","confirmPromise","subscriptionId","onSignature","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","getRecentBlockhash","transactionOrMessage","includeAccounts","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","close","connect","_subscribe","mentions","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","o","custodianPubkey","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","secp256k1","ecdsaSign","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: number;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        BufferLayout.ns64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}