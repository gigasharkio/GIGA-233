{"ast":null,"code":"var _jsxFileName = \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/src/pages/Scene.js\";\nimport \"./Scene.css\";\nimport React, { Component } from 'react';\nimport * as THREE from \"three\";\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Scene extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      ref: el => this.container = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidMount() {\n    //Declare three.js variables\n    var camera,\n        scene,\n        renderer,\n        stars = []; //assign three.js objects to each variable\n\n    function init() {\n      //camera\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 5; //scene\n\n      scene = new THREE.Scene(); //renderer\n\n      renderer = new THREE.WebGLRenderer(); //set the size of the renderer\n\n      renderer.setSize(window.innerWidth, window.innerHeight); //add the renderer to the html document body\n\n      document.body.appendChild(renderer.domElement);\n    }\n\n    function addSphere() {\n      // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position. \n      for (var z = -1000; z < 1000; z += 20) {\n        // Make a sphere (exactly the same as before). \n        var geometry = new THREE.SphereGeometry(0.5, 32, 32);\n        var material = new THREE.MeshBasicMaterial({\n          color: 0x25f5f1\n        });\n        var sphere = new THREE.Mesh(geometry, material); // This time we give the sphere random x and y positions between -500 and 500\n\n        sphere.position.x = Math.random() * 1000 - 500;\n        sphere.position.y = Math.random() * 1000 - 500; // Then set the z position to where it is in the loop (distance of camera)\n\n        sphere.position.z = z; // scale it up a bit\n\n        sphere.scale.x = sphere.scale.y = 2; //add the sphere to the scene\n\n        scene.add(sphere); //finally push it to the stars array \n\n        stars.push(sphere);\n      }\n    }\n\n    function animateStars() {\n      // loop through each star\n      for (var i = 0; i < stars.length; i++) {\n        const star = stars[i]; // and move it forward dependent on the mouseY position. \n\n        star.position.z += i / 10; // if the particle is too close move it to the back\n\n        if (star.position.z > 1000) star.position.z -= 2000;\n      }\n    }\n\n    function render() {\n      //get the frame\n      requestAnimationFrame(render); //render the scene\n\n      renderer.render(scene, camera);\n      animateStars();\n    }\n\n    init();\n    addSphere();\n    render();\n    this.container.appendChild(renderer.domElement);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Scene, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 109,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nexport default Scene;","map":{"version":3,"names":["React","Component","THREE","ReactDOM","Scene","render","width","height","el","container","componentDidMount","camera","scene","renderer","stars","init","PerspectiveCamera","window","innerWidth","innerHeight","position","z","WebGLRenderer","setSize","document","body","appendChild","domElement","addSphere","geometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","x","Math","random","y","scale","add","push","animateStars","i","length","star","requestAnimationFrame","getElementById"],"sources":["/Users/nicksampah/Repository/Three.js/Gigashark-v2/src/pages/Scene.js"],"sourcesContent":["import \"./Scene.css\";\nimport React, { Component } from 'react'\nimport * as THREE from \"three\";\nimport ReactDOM from 'react-dom'\n\n\nclass Scene extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        ref={el => (this.container = el)}\n      />\n    );\n  }\n\n\n\ncomponentDidMount() {\n    //Declare three.js variables\n    var camera, scene, renderer, stars=[];\n\t \n    //assign three.js objects to each variable\n    function init(){\n       \n      //camera\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 5;\t \n  \n      //scene\n      scene = new THREE.Scene();\n       \n      //renderer\n      renderer = new THREE.WebGLRenderer();\n      //set the size of the renderer\n      renderer.setSize( window.innerWidth, window.innerHeight );\n       \n      //add the renderer to the html document body\n      document.body.appendChild( renderer.domElement );\n    }\n  \n  \n    function addSphere(){\n  \n          // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position. \n          for ( var z= -1000; z < 1000; z+=20 ) {\n      \n            // Make a sphere (exactly the same as before). \n            var geometry   = new THREE.SphereGeometry(0.5, 32, 32)\n            var material = new THREE.MeshBasicMaterial( {color: 0x25f5f1} );\n            var sphere = new THREE.Mesh(geometry, material)\n      \n            // This time we give the sphere random x and y positions between -500 and 500\n            sphere.position.x = Math.random() * 1000 - 500;\n            sphere.position.y = Math.random() * 1000 - 500;\n      \n            // Then set the z position to where it is in the loop (distance of camera)\n            sphere.position.z = z;\n      \n            // scale it up a bit\n            sphere.scale.x = sphere.scale.y = 2;\n      \n            //add the sphere to the scene\n            scene.add( sphere );\n      \n            //finally push it to the stars array \n            stars.push(sphere); \n          }\n    }\n  \n    function animateStars() { \n          \n      // loop through each star\n      for(var i=0; i<stars.length; i++) {\n        \n        const star = stars[i]; \n          \n        // and move it forward dependent on the mouseY position. \n        star.position.z +=  i/10;\n          \n        // if the particle is too close move it to the back\n        if(star.position.z>1000) star.position.z-=2000; \n        \n      }\n    \n    }\n  \n    function render() {\n      //get the frame\n      requestAnimationFrame( render );\n  \n      //render the scene\n      renderer.render( scene, camera );\n        animateStars();\n  \n    }\n\n    init();\n    \n    addSphere();\n    render();\n    this.container.appendChild(renderer.domElement);\n}\n\n}\nReactDOM.render(<Scene />, document.getElementById('root')) \nexport default Scene;   \n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}