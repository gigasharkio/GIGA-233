{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\n\nvar ObservableStore_1 = require(\"./ObservableStore\");\n\nvar MergedStore = /*#__PURE__*/function (_ObservableStore_1$Ob) {\n  _inherits(MergedStore, _ObservableStore_1$Ob);\n\n  var _super = _createSuper(MergedStore);\n\n  function MergedStore() {\n    var _this;\n\n    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, MergedStore);\n\n    // Typecast: Preserve existing behavior\n    _this = _super.call(this, {});\n    _this._children = children; // subscribe to children\n\n    children.forEach(function (child) {\n      return _this._addChild(child);\n    });\n\n    _this._updateWholeState();\n\n    return _this;\n  }\n\n  _createClass(MergedStore, [{\n    key: \"_addChild\",\n    value: function _addChild(child) {\n      var _this2 = this;\n\n      child.subscribe(function () {\n        return _this2._updateWholeState();\n      });\n    }\n  }, {\n    key: \"_updateWholeState\",\n    value: function _updateWholeState() {\n      var childStates = this._children.map(function (child) {\n        return child.getState();\n      }); // apply shallow merge over states\n\n\n      var state = Object.assign.apply(Object, [{}].concat(_toConsumableArray(childStates)));\n      this.putState(state);\n    }\n  }]);\n\n  return MergedStore;\n}(ObservableStore_1.ObservableStore);\n\nexports.MergedStore = MergedStore;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEaA,W;;;;;EAKX,uBAAyB;IAAA;;IAAA,IAAbC,QAAa,uEAAF,EAAE;;IAAA;;IACvB;IACA,0BAAM,EAAN;IAEA,MAAKC,SAAL,GAAiBD,QAAjB,CAJuB,CAKvB;;IACAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,KAAD;MAAA,OAAW,MAAKC,SAAL,CAAeD,KAAf,CAAX;IAAA,CAAjB;;IACA,MAAKE,iBAAL;;IAPuB;EAQxB;;;;WAED,mBAAUF,KAAV,EAA4C;MAAA;;MAC1CA,KAAK,CAACG,SAAN,CAAgB;QAAA,OAAM,MAAI,CAACD,iBAAL,EAAN;MAAA,CAAhB;IACD;;;WAED,6BAAiB;MACf,IAAME,WAAW,GAAG,KAAKN,SAAL,CAAeO,GAAf,CAAmB,UAACL,KAAD;QAAA,OAAWA,KAAK,CAACM,QAAN,EAAX;MAAA,CAAnB,CAApB,CADe,CAEf;;;MACA,IAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,aAAM,GAAQ,EAAR,4BAAeL,WAAf,GAApB;MACA,KAAKM,QAAL,CAAcH,KAAd;IACD;;;;EAtBOI,iC;;AAFVC","names":["MergedStore","children","_children","forEach","child","_addChild","_updateWholeState","subscribe","childStates","map","getState","state","Object","assign","putState","ObservableStore_1","exports"],"sourceRoot":"","sources":["../src/MergedStore.ts"],"sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class MergedStore<\n  T extends Record<string, unknown>,\n> extends ObservableStore<T> {\n  private _children: ObservableStore<Partial<T>>[];\n\n  constructor(children = []) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    this._children = children;\n    // subscribe to children\n    children.forEach((child) => this._addChild(child));\n    this._updateWholeState();\n  }\n\n  _addChild(child: ObservableStore<Partial<T>>): void {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState(): void {\n    const childStates = this._children.map((child) => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}