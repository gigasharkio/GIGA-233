{"ast":null,"code":"var _jsxFileName = \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/src/components/web3uikit/src/components/Loading/Loading.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport color from '../../styles/colors';\nimport { DivStyledWaveLoader, StyledSpinnerDiv, StyledSpinnerParent } from './Loading.styles';\nimport { state1, state2, state3, state4 } from './WaveLoaderStates';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Loading = _ref => {\n  let {\n    size = 20,\n    spinnerColor = color.white,\n    text,\n    direction = 'bottom',\n    spinnerType = 'loader',\n    fontSize\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(StyledSpinnerParent, {\n    \"data-testid\": \"test-loading\",\n    direction: direction,\n    role: \"spinner\",\n    size: size,\n    spinnerColor: spinnerColor,\n    fontSize: fontSize,\n    children: [spinnerType == 'loader' ? /*#__PURE__*/_jsxDEV(StyledSpinnerDiv, {\n      spinnerColor: spinnerColor,\n      size: size\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(WaveLoader, {\n      size: size,\n      spinnerColor: spinnerColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), text && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Loading;\n\nconst WaveLoader = _ref2 => {\n  _s();\n\n  let {\n    size,\n    spinnerColor\n  } = _ref2;\n  const states = [state1, state2, state3, state4];\n  const [activeBalls, setActiveBalls] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setActiveBalls(prevState => {\n        if (prevState + 1 == states.length) {\n          return 0;\n        }\n\n        return prevState + 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval); // This represents the unmount function, in which you need to clear your interval to prevent memory leaks.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DivStyledWaveLoader, {\n    size: size,\n    spinnerColor: spinnerColor,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: `${states[activeBalls].ball0 && 'active'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `${states[activeBalls].ball1 && 'active'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `${states[activeBalls].ball2 && 'active'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `${states[activeBalls].ball3 && 'active'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WaveLoader, \"+CbTREM/tDE0kRqmnY10fxpb82Y=\");\n\n_c2 = WaveLoader;\nexport default Loading;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Loading\");\n$RefreshReg$(_c2, \"WaveLoader\");","map":{"version":3,"names":["React","useEffect","useState","color","DivStyledWaveLoader","StyledSpinnerDiv","StyledSpinnerParent","state1","state2","state3","state4","Loading","size","spinnerColor","white","text","direction","spinnerType","fontSize","WaveLoader","states","activeBalls","setActiveBalls","interval","setInterval","prevState","length","clearInterval","ball0","ball1","ball2","ball3"],"sources":["/Users/nicksampah/Repository/Three.js/Gigashark-v2/src/components/web3uikit/src/components/Loading/Loading.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport color from '../../styles/colors';\nimport {\n    DivStyledWaveLoader,\n    StyledSpinnerDiv,\n    StyledSpinnerParent,\n} from './Loading.styles';\nimport { ILoadingProps } from './types';\nimport { state1, state2, state3, state4 } from './WaveLoaderStates';\n\nconst Loading: React.FC<ILoadingProps> = ({\n    size = 20,\n    spinnerColor = color.white,\n    text,\n    direction = 'bottom',\n    spinnerType = 'loader',\n    fontSize,\n}) => {\n    return (\n        <StyledSpinnerParent\n            data-testid=\"test-loading\"\n            direction={direction}\n            role=\"spinner\"\n            size={size}\n            spinnerColor={spinnerColor}\n            fontSize={fontSize}\n        >\n            {spinnerType == 'loader' ? (\n                <StyledSpinnerDiv spinnerColor={spinnerColor} size={size} />\n            ) : (\n                <WaveLoader size={size} spinnerColor={spinnerColor} />\n            )}\n            {text && <span>{text}</span>}\n        </StyledSpinnerParent>\n    );\n};\n\nconst WaveLoader: React.FC<ILoadingProps> = ({ size, spinnerColor }) => {\n    const states = [state1, state2, state3, state4];\n    const [activeBalls, setActiveBalls] = useState(0);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setActiveBalls((prevState) => {\n                if (prevState + 1 == states.length) {\n                    return 0;\n                }\n                return prevState + 1;\n            });\n        }, 1000);\n\n        return () => clearInterval(interval); // This represents the unmount function, in which you need to clear your interval to prevent memory leaks.\n    }, []);\n    return (\n        <DivStyledWaveLoader size={size} spinnerColor={spinnerColor}>\n            <span className={`${states[activeBalls].ball0 && 'active'}`} />\n            <span className={`${states[activeBalls].ball1 && 'active'}`} />\n            <span className={`${states[activeBalls].ball2 && 'active'}`} />\n            <span className={`${states[activeBalls].ball3 && 'active'}`} />\n        </DivStyledWaveLoader>\n    );\n};\n\nexport default Loading;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SACIC,mBADJ,EAEIC,gBAFJ,EAGIC,mBAHJ,QAIO,kBAJP;AAMA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCC,MAAjC,QAA+C,oBAA/C;;;AAEA,MAAMC,OAAgC,GAAG,QAOnC;EAAA,IAPoC;IACtCC,IAAI,GAAG,EAD+B;IAEtCC,YAAY,GAAGV,KAAK,CAACW,KAFiB;IAGtCC,IAHsC;IAItCC,SAAS,GAAG,QAJ0B;IAKtCC,WAAW,GAAG,QALwB;IAMtCC;EANsC,CAOpC;EACF,oBACI,QAAC,mBAAD;IACI,eAAY,cADhB;IAEI,SAAS,EAAEF,SAFf;IAGI,IAAI,EAAC,SAHT;IAII,IAAI,EAAEJ,IAJV;IAKI,YAAY,EAAEC,YALlB;IAMI,QAAQ,EAAEK,QANd;IAAA,WAQKD,WAAW,IAAI,QAAf,gBACG,QAAC,gBAAD;MAAkB,YAAY,EAAEJ,YAAhC;MAA8C,IAAI,EAAED;IAApD;MAAA;MAAA;MAAA;IAAA,QADH,gBAGG,QAAC,UAAD;MAAY,IAAI,EAAEA,IAAlB;MAAwB,YAAY,EAAEC;IAAtC;MAAA;MAAA;MAAA;IAAA,QAXR,EAaKE,IAAI,iBAAI;MAAA,UAAOA;IAAP;MAAA;MAAA;MAAA;IAAA,QAbb;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH,CAzBD;;KAAMJ,O;;AA2BN,MAAMQ,UAAmC,GAAG,SAA4B;EAAA;;EAAA,IAA3B;IAAEP,IAAF;IAAQC;EAAR,CAA2B;EACpE,MAAMO,MAAM,GAAG,CAACb,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,CAAf;EACA,MAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,CAAD,CAA9C;EAEAD,SAAS,CAAC,MAAM;IACZ,MAAMsB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BF,cAAc,CAAEG,SAAD,IAAe;QAC1B,IAAIA,SAAS,GAAG,CAAZ,IAAiBL,MAAM,CAACM,MAA5B,EAAoC;UAChC,OAAO,CAAP;QACH;;QACD,OAAOD,SAAS,GAAG,CAAnB;MACH,CALa,CAAd;IAMH,CAP2B,EAOzB,IAPyB,CAA5B;IASA,OAAO,MAAME,aAAa,CAACJ,QAAD,CAA1B,CAVY,CAU0B;EACzC,CAXQ,EAWN,EAXM,CAAT;EAYA,oBACI,QAAC,mBAAD;IAAqB,IAAI,EAAEX,IAA3B;IAAiC,YAAY,EAAEC,YAA/C;IAAA,wBACI;MAAM,SAAS,EAAG,GAAEO,MAAM,CAACC,WAAD,CAAN,CAAoBO,KAApB,IAA6B,QAAS;IAA1D;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAM,SAAS,EAAG,GAAER,MAAM,CAACC,WAAD,CAAN,CAAoBQ,KAApB,IAA6B,QAAS;IAA1D;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAM,SAAS,EAAG,GAAET,MAAM,CAACC,WAAD,CAAN,CAAoBS,KAApB,IAA6B,QAAS;IAA1D;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAM,SAAS,EAAG,GAAEV,MAAM,CAACC,WAAD,CAAN,CAAoBU,KAApB,IAA6B,QAAS;IAA1D;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH,CAxBD;;GAAMZ,U;;MAAAA,U;AA0BN,eAAeR,OAAf"},"metadata":{},"sourceType":"module"}