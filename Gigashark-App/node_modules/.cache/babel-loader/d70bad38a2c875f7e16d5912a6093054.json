{"ast":null,"code":"import _asyncToGenerator from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/regenerator/index.js\";\nimport OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport log from 'loglevel';\n\nvar getOpenloginDefaultOptions = function getOpenloginDefaultOptions(chainNamespace, chainId) {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar OpenloginAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(OpenloginAdapter, _BaseAdapter);\n\n  var _super = _createSuper(OpenloginAdapter);\n\n  function OpenloginAdapter(params) {\n    var _this;\n\n    _classCallCheck(this, OpenloginAdapter);\n\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginInstance\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"loginSettings\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    var defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    _this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    _this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      _this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      var defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      _this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", _this.chainConfig);\n\n      if (!_this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(OpenloginAdapter, [{\n    key: \"chainConfigProxy\",\n    get: function get() {\n      return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      var _this$privKeyProvider;\n\n      return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var _this$openloginOption, redirectResult, isRedirectResult;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkInitializationRequirements\", this).call(this);\n\n                if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n\n              case 3:\n                if (this.chainConfig) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 5:\n                this.openloginInstance = new OpenLogin(this.openloginOptions);\n                redirectResult = getHashQueryParams();\n                isRedirectResult = true;\n\n                if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n                  isRedirectResult = true;\n                }\n\n                _context.next = 11;\n                return this.openloginInstance.init();\n\n              case 11:\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n                _context.prev = 13;\n\n                if (!(this.openloginInstance.privKey && (options.autoConnect || isRedirectResult))) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 17;\n                return this.connect();\n\n              case 17:\n                _context.next = 23;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](13);\n                log.error(\"Failed to connect with cached openlogin provider\", _context.t0);\n                this.emit(\"ERRORED\", _context.t0);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[13, 19]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkConnectionRequirements\", this).call(this);\n\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.connectWithProvider(params);\n\n              case 6:\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                log.error(\"Failed to connect with openlogin provider\", _context2.t0); // ready again to be connected\n\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n\n                if (!(_context2.t0 !== null && _context2.t0 !== void 0 && _context2.t0.message.includes(\"user closed popup\"))) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                throw WalletLoginError.popupClosed();\n\n              case 16:\n                throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 3:\n                if (this.openloginInstance) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 5:\n                _context3.next = 7;\n                return this.openloginInstance.logout();\n\n              case 7:\n                if (options.cleanup) {\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.openloginInstance = null;\n                  this.privKeyProvider = null;\n                } else {\n                  // ready to be connected again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                _context4.next = 6;\n                return this.openloginInstance.getUserInfo();\n\n              case 6:\n                userInfo = _context4.sent;\n                return _context4.abrupt(\"return\", userInfo);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }() // should be called only before initialization.\n\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(adapterSettings) {\n      if (this.status === ADAPTER_STATUS.READY) return;\n      var defaultOptions = getOpenloginDefaultOptions();\n      this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n    } // should be called only before initialization.\n\n  }, {\n    key: \"setChainConfig\",\n    value: function setChainConfig(customChainConfig) {\n      _get(_getPrototypeOf(OpenloginAdapter.prototype), \"setChainConfig\", this).call(this, customChainConfig);\n\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n    }\n  }, {\n    key: \"connectWithProvider\",\n    value: function () {\n      var _connectWithProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {\n        var _yield$import, SolanaPrivateKeyProvider, _yield$import2, EthereumPrivateKeyProvider, finalPrivKey, _yield$import3, getED25519Key;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                _context5.next = 7;\n                return import('@web3auth/solana-provider');\n\n              case 7:\n                _yield$import = _context5.sent;\n                SolanaPrivateKeyProvider = _yield$import.SolanaPrivateKeyProvider;\n                this.privKeyProvider = new SolanaPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context5.next = 21;\n                break;\n\n              case 12:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.EIP155)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                _context5.next = 15;\n                return import('@web3auth/ethereum-provider');\n\n              case 15:\n                _yield$import2 = _context5.sent;\n                EthereumPrivateKeyProvider = _yield$import2.EthereumPrivateKeyProvider;\n                this.privKeyProvider = new EthereumPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context5.next = 21;\n                break;\n\n              case 20:\n                throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n\n              case 21:\n                if (!(!this.openloginInstance.privKey && params)) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                _context5.next = 24;\n                return this.openloginInstance.login(merge(this.loginSettings, {\n                  loginProvider: params.loginProvider\n                }, {\n                  extraLoginOptions: {\n                    login_hint: params === null || params === void 0 ? void 0 : params.login_hint\n                  }\n                }));\n\n              case 24:\n                finalPrivKey = this.openloginInstance.privKey;\n\n                if (!finalPrivKey) {\n                  _context5.next = 36;\n                  break;\n                }\n\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context5.next = 32;\n                  break;\n                }\n\n                _context5.next = 29;\n                return import('@toruslabs/openlogin-ed25519');\n\n              case 29:\n                _yield$import3 = _context5.sent;\n                getED25519Key = _yield$import3.getED25519Key;\n                finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n\n              case 32:\n                _context5.next = 34;\n                return this.privKeyProvider.setupProvider(finalPrivKey);\n\n              case 34:\n                this.status = ADAPTER_STATUS.CONNECTED;\n                this.emit(ADAPTER_EVENTS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN,\n                  reconnected: !params\n                });\n\n              case 36:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function connectWithProvider(_x3) {\n        return _connectWithProvider.apply(this, arguments);\n      }\n\n      return connectWithProvider;\n    }()\n  }]);\n\n  return OpenloginAdapter;\n}(BaseAdapter);\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };","map":{"version":3,"mappings":"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","names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","chainConfig","getChainConfig","undefined","loginSettings","relogin","OpenloginAdapter","constructor","params","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","debug","defaultOptions","_params$chainConfig","_params$chainConfig2","openloginOptions","_params$chainConfig3","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","invalidParams","privKeyProvider","provider","_","Error","options","_this$openloginOption","openloginInstance","OpenLogin","redirectResult","getHashQueryParams","isRedirectResult","Object","keys","length","result","init","status","READY","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","error","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","connectionError","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected","BaseAdapter"],"sources":["../src/config.ts","../src/openloginAdapter.ts"],"sourcesContent":[null,null]},"metadata":{},"sourceType":"module"}