{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version); ////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  } // If passed a URL, figure out the right type of provider based on the scheme\n\n\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    var match = network.match(/^(ws|http)s?:/i);\n\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new JsonRpcProvider(network);\n\n        case \"ws\":\n          return new WebSocketProvider(network);\n\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n\n  var n = getNetwork(network);\n\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n\n  return n._defaultProvider({\n    FallbackProvider: FallbackProvider,\n    AlchemyProvider: AlchemyProvider,\n    CloudflareProvider: CloudflareProvider,\n    EtherscanProvider: EtherscanProvider,\n    InfuraProvider: InfuraProvider,\n    JsonRpcProvider: JsonRpcProvider,\n    NodesmithProvider: NodesmithProvider,\n    PocketProvider: PocketProvider,\n    Web3Provider: Web3Provider,\n    IpcProvider: IpcProvider\n  }, options);\n} ////////////////////////\n// Exports\n\n\nexport { // Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, ///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, ///////////////////////\n// Signer\nJsonRpcSigner, ///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, ///////////////////////\n// Objects\nFormatter };","map":{"version":3,"mappings":"AAAA;;AAEA,SAQIA,QARJ,QAYO,kCAZP;AAcA,SAASC,UAAT,QAA2B,yBAA3B;AAGA,SAASC,YAAT,EAAiDC,QAAjD,QAAiE,iBAAjE;AAEA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,oBAA1D;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,gBAAT,QAAyD,qBAAzD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,cAAT,EAAyBC,uBAAzB,QAAwD,mBAAxD;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,qBAA/C;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,yBAA1D;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAGA,SAA+BC,SAA/B,EAA0CC,sBAA1C,EAAkEC,mBAAlE,EAAuFC,mBAAvF,QAAkH,aAAlH;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf,C,CAEA;AACA;;AAEA,SAASE,kBAAT,CAA4BC,OAA5B,EAAkDC,OAAlD,EAA+D;EAC3D,IAAID,OAAO,IAAI,IAAf,EAAqB;IAAEA,OAAO,GAAG,WAAV;EAAwB,CADY,CAG3D;;;EACA,IAAI,OAAOA,OAAP,KAAoB,QAAxB,EAAkC;IAC9B;IAEA;IACA,IAAME,KAAK,GAAGF,OAAO,CAACE,KAAR,CAAc,gBAAd,CAAd;;IACA,IAAIA,KAAJ,EAAW;MACP,QAAQA,KAAK,CAAC,CAAD,CAAb;QACI,KAAK,MAAL;UACI,OAAO,IAAInB,eAAJ,CAAoBiB,OAApB,CAAP;;QACJ,KAAK,IAAL;UACI,OAAO,IAAIT,iBAAJ,CAAsBS,OAAtB,CAAP;;QACJ;UACIF,MAAM,CAACK,kBAAP,CAA0B,wBAA1B,EAAoD,SAApD,EAA+DH,OAA/D;MANR;IAQH;EACJ;;EAED,IAAMI,CAAC,GAAGhC,UAAU,CAAC4B,OAAD,CAApB;;EACA,IAAI,CAACI,CAAD,IAAM,CAACA,CAAC,CAACC,gBAAb,EAA+B;IAC3BP,MAAM,CAACQ,UAAP,CAAkB,wCAAlB,EAA4DV,MAAM,CAACW,MAAP,CAAcC,aAA1E,EAAyF;MACrFC,SAAS,EAAE,oBAD0E;MAErFT,OAAO,EAAEA;IAF4E,CAAzF;EAIH;;EAED,OAAOI,CAAC,CAACC,gBAAF,CAAmB;IACtB1B,gBAAgB,EAAhBA,gBADsB;IAGtBJ,eAAe,EAAfA,eAHsB;IAItBE,kBAAkB,EAAlBA,kBAJsB;IAKtBC,iBAAiB,EAAjBA,iBALsB;IAMtBG,cAAc,EAAdA,cANsB;IAOtBE,eAAe,EAAfA,eAPsB;IAQtBG,iBAAiB,EAAjBA,iBARsB;IAStBC,cAAc,EAAdA,cATsB;IAUtBG,YAAY,EAAZA,YAVsB;IAYtBV,WAAW,EAAXA;EAZsB,CAAnB,EAaJqB,OAbI,CAAP;AAcH,C,CAED;AACA;;;AAEA,SAEI;AACA9B,QAHJ,EAIIE,YAJJ,EAMIC,QANJ,EAQIe,kBARJ,EAUI;AACA;AAEAV,gBAbJ,EAeIJ,eAfJ,EAgBIC,wBAhBJ,EAiBIC,kBAjBJ,EAkBIC,iBAlBJ,EAmBIG,cAnBJ,EAoBIC,uBApBJ,EAqBIC,eArBJ,EAsBIE,oBAtBJ,EAuBIC,iBAvBJ,EAwBIC,cAxBJ,EAyBIC,qBAzBJ,EA0BIE,YA1BJ,EA2BIC,iBA3BJ,EA6BIX,WA7BJ,EAgCI;AACA;AAEAI,aAnCJ,EAsCI;AACA;AAEAe,kBAzCJ,EA0CI3B,UA1CJ,EA2CIsB,mBA3CJ,EA4CID,sBA5CJ,EA6CIE,mBA7CJ,EAgDI;AACA;AAEAH,SAnDJ","names":["Provider","getNetwork","BaseProvider","Resolver","AlchemyProvider","AlchemyWebSocketProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","IpcProvider","InfuraProvider","InfuraWebSocketProvider","JsonRpcProvider","JsonRpcSigner","JsonRpcBatchProvider","NodesmithProvider","PocketProvider","StaticJsonRpcProvider","UrlJsonRpcProvider","Web3Provider","WebSocketProvider","Formatter","isCommunityResourcable","isCommunityResource","showThrottleMessage","Logger","version","logger","getDefaultProvider","network","options","match","throwArgumentError","n","_defaultProvider","throwError","errors","NETWORK_ERROR","operation"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}