{"ast":null,"code":"import _asyncToGenerator from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/nicksampah/Repository/Three.js/Gigashark-v2/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nvar apiKey = \"torus-default\";\nvar embedHost = \"\"; // #region API Keys\n\nvar gatewayAuthHeader = \"x-api-key\";\nvar gatewayEmbedHostHeader = \"x-embed-host\";\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  var headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nvar promiseTimeout = function promiseTimeout(ms, promise) {\n  var timeout = new Promise(function (resolve, reject) {\n    var id = setTimeout(function () {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var options_,\n        customOptions,\n        defaultOptions,\n        options,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options_ = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            customOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {}\n            };\n\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n\n            options = merge(defaultOptions, options_, {\n              method: \"GET\"\n            });\n            _context.next = 7;\n            return fetch(url, options);\n\n          case 7:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response.json());\n\n          case 10:\n            debugLogResponse(response);\n            throw response;\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function get(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar post = function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  var options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(function (response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nvar patch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var data,\n        options_,\n        customOptions,\n        defaultOptions,\n        options,\n        response,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options_ = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            customOptions = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n\n            options = merge(defaultOptions, options_, {\n              method: \"PATCH\"\n            }); // deep merge changes the structure of form data and url encoded data ,\n            // so we should not deepmerge body data\n\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n\n            _context2.next = 9;\n            return fetch(url, options);\n\n          case 9:\n            response = _context2.sent;\n\n            if (!response.ok) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", response.json());\n\n          case 12:\n            debugLogResponse(response);\n            throw response;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function patch(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar remove = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n    var data,\n        options_,\n        customOptions,\n        defaultOptions,\n        options,\n        response,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            options_ = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n            customOptions = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n\n            options = merge(defaultOptions, options_, {\n              method: \"DELETE\"\n            });\n\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n\n            _context3.next = 9;\n            return fetch(url, options);\n\n          case 9:\n            response = _context3.sent;\n\n            if (!response.ok) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", response.json());\n\n          case 12:\n            debugLogResponse(response);\n            throw response;\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function remove(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar generateJsonRPCObject = function generateJsonRPCObject(method, parameters) {\n  return {\n    jsonrpc: \"2.0\",\n    method: method,\n    id: 10,\n    params: parameters\n  };\n};\n\nvar promiseRace = function promiseRace(url, options) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"mappings":"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","names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","getApiKeyHeaders","headers","debugLogResponse","response","info","status","statusText","url","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","fetch","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}